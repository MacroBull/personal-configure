(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1076705,      25283]
NotebookOptionsPosition[   1026934,      23679]
NotebookOutlinePosition[   1034375,      23811]
CellTagsIndexPosition[   1034294,      23806]
WindowTitle->Developing Device Drivers
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[GridBox[{
   {Cell["WOLFRAM LANGUAGE TUTORIAL", "PacletNameCell"], Cell[TextData[{
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "Related Guides",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }]],
         TextCell[
          Row[{"Related Guides", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"Using Connected Devices\"\>":>
       Documentation`HelpLookup["paclet:guide/UsingConnectedDevices"]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"TutorialMoreAboutSection"]],
      LineSpacing->{1.4, 0}],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "Functions",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }]],
         TextCell[
          Row[{"Functions", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"Automatic\"\>":>Documentation`HelpLookup[
       "paclet:ref/Automatic"], "\<\"False\"\>":>Documentation`HelpLookup[
       "paclet:ref/False"], "\<\"True\"\>":>Documentation`HelpLookup[
       "paclet:ref/True"]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"TutorialFunction"]],
      LineSpacing->{1.4, 0}],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "URL",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }]],
         TextCell[
          Row[{"URL", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"tutorial/DevelopingDeviceDrivers\"\>":>
       None, "\<\"Copy Wolfram Documentation Center URL\"\>":>
       Module[{DocumentationSearch`Private`nb$}, 
        DocumentationSearch`Private`nb$ = NotebookPut[
           Notebook[{
             Cell["tutorial/DevelopingDeviceDrivers"]}, Visible -> False]]; 
        SelectionMove[DocumentationSearch`Private`nb$, All, Notebook]; 
        FrontEndTokenExecute[DocumentationSearch`Private`nb$, "Copy"]; 
        NotebookClose[DocumentationSearch`Private`nb$]; Null], 
       Delimiter, "\<\"Copy web URL\"\>":>
       Module[{DocumentationSearch`Private`nb$}, 
        DocumentationSearch`Private`nb$ = NotebookPut[
           Notebook[{
             Cell[
              BoxData[
               MakeBoxes[
                Hyperlink[
                "http://reference.wolfram.com/language/tutorial/\
DevelopingDeviceDrivers.html"], StandardForm]], "Input", TextClipboardType -> 
              "PlainText"]}, Visible -> False]]; 
        SelectionMove[DocumentationSearch`Private`nb$, All, Notebook]; 
        FrontEndTokenExecute[DocumentationSearch`Private`nb$, "Copy"]; 
        NotebookClose[DocumentationSearch`Private`nb$]; 
        Null], "\<\"Go to web URL\"\>":>FrontEndExecute[{
         NotebookLocate[{
           URL[
            StringJoin[
             If[
              TrueQ[DocumentationBuild`Make`Private`wsmlinkQ$106170], 
              "http://reference.wolfram.com/system-modeler/", 
              "http://reference.wolfram.com/language/"], 
             "tutorial/DevelopingDeviceDrivers", ".html"]], None}]}]},
       Appearance->None,
       MenuAppearance->Automatic]],
      LineSpacing->{1.4, 0}]
    }], "AnchorBar"]}
  }]], "AnchorBarGrid",
 CellID->1],

Cell[CellGroupData[{

Cell["Developing Device Drivers", "Title",
 CellID->509267359],

Cell[BoxData[GridBox[{
   {
    TemplateBox[{
     Cell["Overview"],"paclet:tutorial/DevelopingDeviceDrivers#939564002",
      GraphicsBox[
       TagBox[
        RasterBox[{{{128, 128, 128, 32}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128,
          128, 128, 0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128,
          128, 239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128,
          0}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         32}, {128, 128, 128, 16}, {128, 128, 128, 16}, {128, 128, 128, 
         175}, {128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 
         0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128, 128, 
         239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128, 
         16}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 175}, {
         128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 0}, {128, 
         128, 128, 0}}, {{128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 
         128, 0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}}}, {{0, 8}, {8, 0}}, {0, 
         255}, ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}],GraphicsBox[
       TagBox[
        RasterBox[{{{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 0}, {
         229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 16}, {229,
          95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 
         95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 0}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95,
          28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 0}, {229,
          95, 28, 0}, {229, 95, 28, 0}}}, {{0, 8}, {8, 0}}, {0, 255}, 
         ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}]},
     "GrayLinkWithIcon",
     BaseStyle->{"TutorialJumpBoxLink"}], 
    TemplateBox[{
     Cell["Inheritance"],"paclet:tutorial/DevelopingDeviceDrivers#699998962",
      GraphicsBox[
       TagBox[
        RasterBox[{{{128, 128, 128, 32}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128,
          128, 128, 0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128,
          128, 239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128,
          0}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         32}, {128, 128, 128, 16}, {128, 128, 128, 16}, {128, 128, 128, 
         175}, {128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 
         0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128, 128, 
         239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128, 
         16}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 175}, {
         128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 0}, {128, 
         128, 128, 0}}, {{128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 
         128, 0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}}}, {{0, 8}, {8, 0}}, {0, 
         255}, ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}],GraphicsBox[
       TagBox[
        RasterBox[{{{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 0}, {
         229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 16}, {229,
          95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 
         95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 0}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95,
          28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 0}, {229,
          95, 28, 0}, {229, 95, 28, 0}}}, {{0, 8}, {8, 0}}, {0, 255}, 
         ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}]},
     "GrayLinkWithIcon",
     BaseStyle->{"TutorialJumpBoxLink"}]},
   {
    TemplateBox[{
     Cell["Device Driver Options"],
      "paclet:tutorial/DevelopingDeviceDrivers#602846093",GraphicsBox[
       TagBox[
        RasterBox[{{{128, 128, 128, 32}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128,
          128, 128, 0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128,
          128, 239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128,
          0}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         32}, {128, 128, 128, 16}, {128, 128, 128, 16}, {128, 128, 128, 
         175}, {128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 
         0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128, 128, 
         239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128, 
         16}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 175}, {
         128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 0}, {128, 
         128, 128, 0}}, {{128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 
         128, 0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}}}, {{0, 8}, {8, 0}}, {0, 
         255}, ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}],GraphicsBox[
       TagBox[
        RasterBox[{{{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 0}, {
         229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 16}, {229,
          95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 
         95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 0}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95,
          28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 0}, {229,
          95, 28, 0}, {229, 95, 28, 0}}}, {{0, 8}, {8, 0}}, {0, 255}, 
         ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}]},
     "GrayLinkWithIcon",
     BaseStyle->{"TutorialJumpBoxLink"}], 
    TemplateBox[{
     Cell["Miscellaneous Notes"],
      "paclet:tutorial/DevelopingDeviceDrivers#1166042701",GraphicsBox[
       TagBox[
        RasterBox[{{{128, 128, 128, 32}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128,
          128, 128, 0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128,
          128, 239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128,
          0}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         32}, {128, 128, 128, 16}, {128, 128, 128, 16}, {128, 128, 128, 
         175}, {128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 
         0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128, 128, 
         239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128, 
         16}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 175}, {
         128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 0}, {128, 
         128, 128, 0}}, {{128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 
         128, 0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}}}, {{0, 8}, {8, 0}}, {0, 
         255}, ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}],GraphicsBox[
       TagBox[
        RasterBox[{{{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 0}, {
         229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 16}, {229,
          95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 
         95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 0}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95,
          28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 0}, {229,
          95, 28, 0}, {229, 95, 28, 0}}}, {{0, 8}, {8, 0}}, {0, 255}, 
         ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}]},
     "GrayLinkWithIcon",
     BaseStyle->{"TutorialJumpBoxLink"}]},
   {
    TemplateBox[{
     Cell["Device Framework Functions"],
      "paclet:tutorial/DevelopingDeviceDrivers#617176298",GraphicsBox[
       TagBox[
        RasterBox[{{{128, 128, 128, 32}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128,
          128, 128, 0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128,
          128, 239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128,
          0}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         32}, {128, 128, 128, 16}, {128, 128, 128, 16}, {128, 128, 128, 
         175}, {128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 
         0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128, 128, 
         239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128, 
         16}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 175}, {
         128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 0}, {128, 
         128, 128, 0}}, {{128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 
         128, 0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}}}, {{0, 8}, {8, 0}}, {0, 
         255}, ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}],GraphicsBox[
       TagBox[
        RasterBox[{{{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 0}, {
         229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 16}, {229,
          95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 
         95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 0}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95,
          28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 0}, {229,
          95, 28, 0}, {229, 95, 28, 0}}}, {{0, 8}, {8, 0}}, {0, 255}, 
         ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}]},
     "GrayLinkWithIcon",
     BaseStyle->{"TutorialJumpBoxLink"}], 
    TemplateBox[{
     Cell["Developing Device Driver Paclets"],
      "paclet:tutorial/DevelopingDeviceDrivers#1883152198",GraphicsBox[
       TagBox[
        RasterBox[{{{128, 128, 128, 32}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128,
          128, 128, 0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128,
          128, 239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128,
          0}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         32}, {128, 128, 128, 16}, {128, 128, 128, 16}, {128, 128, 128, 
         175}, {128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 
         0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128, 128, 
         239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128, 
         16}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 175}, {
         128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 0}, {128, 
         128, 128, 0}}, {{128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 
         128, 0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}}}, {{0, 8}, {8, 0}}, {0, 
         255}, ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}],GraphicsBox[
       TagBox[
        RasterBox[{{{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 0}, {
         229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 16}, {229,
          95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 
         95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 0}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95,
          28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 0}, {229,
          95, 28, 0}, {229, 95, 28, 0}}}, {{0, 8}, {8, 0}}, {0, 255}, 
         ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}]},
     "GrayLinkWithIcon",
     BaseStyle->{"TutorialJumpBoxLink"}]},
   {
    TemplateBox[{
     Cell["Device Properties"],
      "paclet:tutorial/DevelopingDeviceDrivers#720023240",GraphicsBox[
       TagBox[
        RasterBox[{{{128, 128, 128, 32}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128,
          128, 128, 0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128,
          128, 239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128,
          0}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         32}, {128, 128, 128, 16}, {128, 128, 128, 16}, {128, 128, 128, 
         175}, {128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 
         0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128, 128, 
         239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128, 
         16}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 175}, {
         128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 0}, {128, 
         128, 128, 0}}, {{128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 
         128, 0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}}}, {{0, 8}, {8, 0}}, {0, 
         255}, ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}],GraphicsBox[
       TagBox[
        RasterBox[{{{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 0}, {
         229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 16}, {229,
          95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 
         95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 0}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95,
          28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 0}, {229,
          95, 28, 0}, {229, 95, 28, 0}}}, {{0, 8}, {8, 0}}, {0, 255}, 
         ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}]},
     "GrayLinkWithIcon",
     BaseStyle->{"TutorialJumpBoxLink"}], 
    TemplateBox[{
     Cell["Examples"],"paclet:tutorial/DevelopingDeviceDrivers#647897357",
      GraphicsBox[
       TagBox[
        RasterBox[{{{128, 128, 128, 32}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128,
          128, 128, 0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128,
          128, 239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128,
          0}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         32}, {128, 128, 128, 16}, {128, 128, 128, 16}, {128, 128, 128, 
         175}, {128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 
         0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128, 128, 
         239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128, 
         16}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 175}, {
         128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 0}, {128, 
         128, 128, 0}}, {{128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 
         128, 0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}}}, {{0, 8}, {8, 0}}, {0, 
         255}, ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}],GraphicsBox[
       TagBox[
        RasterBox[{{{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 0}, {
         229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 16}, {229,
          95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 
         95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 0}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95,
          28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 0}, {229,
          95, 28, 0}, {229, 95, 28, 0}}}, {{0, 8}, {8, 0}}, {0, 255}, 
         ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}]},
     "GrayLinkWithIcon",
     BaseStyle->{"TutorialJumpBoxLink"}]},
   {
    TemplateBox[{
     Cell["Device Discovery"],
      "paclet:tutorial/DevelopingDeviceDrivers#2076911133",GraphicsBox[
       TagBox[
        RasterBox[{{{128, 128, 128, 32}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128,
          128, 128, 0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128,
          128, 239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128,
          0}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         32}, {128, 128, 128, 16}, {128, 128, 128, 16}, {128, 128, 128, 
         175}, {128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 
         0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128, 128, 
         239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128, 
         16}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 175}, {
         128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 0}, {128, 
         128, 128, 0}}, {{128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 
         128, 0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}}}, {{0, 8}, {8, 0}}, {0, 
         255}, ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}],GraphicsBox[
       TagBox[
        RasterBox[{{{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 0}, {
         229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 16}, {229,
          95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 
         95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 0}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95,
          28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 0}, {229,
          95, 28, 0}, {229, 95, 28, 0}}}, {{0, 8}, {8, 0}}, {0, 255}, 
         ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}]},
     "GrayLinkWithIcon",
     BaseStyle->{"TutorialJumpBoxLink"}], 
    TemplateBox[{
     Cell["Further Info"],
      "paclet:tutorial/DevelopingDeviceDrivers#1293143377",GraphicsBox[
       TagBox[
        RasterBox[{{{128, 128, 128, 32}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 128, 0}, {128,
          128, 128, 0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128,
          128, 239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128,
          0}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         32}, {128, 128, 128, 16}, {128, 128, 128, 16}, {128, 128, 128, 
         175}, {128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 
         0}, {128, 128, 128, 48}}, {{128, 128, 128, 48}, {128, 128, 128, 
         239}, {128, 128, 128, 112}, {128, 128, 128, 0}, {128, 128, 128, 
         16}, {128, 128, 128, 16}, {128, 128, 128, 143}, {128, 128, 128, 
         239}}, {{128, 128, 128, 0}, {128, 128, 128, 64}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 112}, {128, 128, 128, 
         223}, {128, 128, 128, 191}, {128, 128, 128, 32}}, {{128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 175}, {
         128, 128, 128, 255}, {128, 128, 128, 127}, {128, 128, 128, 0}, {128, 
         128, 128, 0}}, {{128, 128, 128, 0}, {128, 128, 128, 0}, {128, 128, 
         128, 0}, {128, 128, 128, 0}, {128, 128, 128, 16}, {128, 128, 128, 
         0}, {128, 128, 128, 0}, {128, 128, 128, 0}}}, {{0, 8}, {8, 0}}, {0, 
         255}, ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}],GraphicsBox[
       TagBox[
        RasterBox[{{{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 0}, {
         229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 32}, {229, 95, 28, 16}, {229, 95, 28, 16}, {229,
          95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 48}}, {{229, 95, 28, 48}, {229, 95, 28, 239}, {229,
          95, 28, 112}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 
         16}, {229, 95, 28, 143}, {229, 95, 28, 239}}, {{229, 95, 28, 0}, {
         229, 95, 28, 64}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 
         28, 112}, {229, 95, 28, 223}, {229, 95, 28, 191}, {229, 95, 28, 
         32}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 
         95, 28, 175}, {229, 95, 28, 255}, {229, 95, 28, 127}, {229, 95, 28, 
         0}, {229, 95, 28, 0}}, {{229, 95, 28, 0}, {229, 95, 28, 0}, {229, 95,
          28, 0}, {229, 95, 28, 0}, {229, 95, 28, 16}, {229, 95, 28, 0}, {229,
          95, 28, 0}, {229, 95, 28, 0}}}, {{0, 8}, {8, 0}}, {0, 255}, 
         ColorFunction -> RGBColor], 
        BoxForm`ImageTag[
        "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
         Automatic], Selectable -> False], BaseStyle -> "ImageGraphics", 
       ImageSizeRaw -> {8, 8}, PlotRange -> {{0, 8}, {0, 8}}, 
       ImageSize -> {8, 9}]},
     "GrayLinkWithIcon",
     BaseStyle->{"TutorialJumpBoxLink"}]}
  }]], "TutorialJumpBox"],

Cell[BoxData[
 GraphicsBox[
  {GrayLevel[0.44], 
   GeometricTransformationBox[{
     GeometricTransformationBox[{
       FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
        0}, {0, 1, 0}, {0, 1, 0}}}, {{{2.5688, 26.214800000000004`}, {
        6.601800000000001, 26.214800000000004`}, {6.601800000000001, 
        24.622800000000005`}, {4.4798, 24.622800000000005`}, {4.4798, 
        4.030800000000003}, {6.601800000000001, 4.030800000000003}, {
        6.601800000000001, 2.4398000000000053`}, {2.5688, 
        2.4398000000000053`}}}], 
       FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
        0}, {0, 1, 0}, {0, 1, 0}}}, {{{9.946299999999999, 
        26.214800000000004`}, {13.979299999999999`, 26.214800000000004`}, {
        13.979299999999999`, 24.622800000000005`}, {11.857299999999999`, 
        24.622800000000005`}, {11.857299999999999`, 4.030800000000003}, {
        13.979299999999999`, 4.030800000000003}, {13.979299999999999`, 
        2.4398000000000053`}, {9.946299999999999, 2.4398000000000053`}}}]}, {
      133, 0}], 
     FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 
       0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}}, {{{
       152.29299999999998`, 7.1709}, {153.69899999999998`, 7.1709}, {
       157.78599999999997`, 7.1709}, {159.909, 9.9569}, {159.909, 
       14.706900000000001`}, {159.909, 18.5809}, {158.26399999999998`, 
       21.6589}, {153.69899999999998`, 21.6589}, {152.29299999999998`, 
       21.6589}}, {{149.95799999999997`, 23.6759}, {153.99099999999999`, 
       23.6759}, {156.45899999999997`, 23.6759}, {157.86499999999998`, 
       23.0919}, {158.92699999999996`, 22.3489}, {160.57199999999997`, 
       21.2079}, {162.34999999999997`, 18.8729}, {162.34999999999997`, 
       14.706900000000001`}, {162.34999999999997`, 9.3469}, {
       159.80299999999997`, 5.1539}, {152.85099999999997`, 5.1539}, {
       149.95799999999997`, 5.1539}}}], 
     FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 
       0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
       0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
       167.791, 15.4497}, {169.595, 15.4497}, {172.089, 15.4497}, {173.045, 
       17.0957}, {173.045, 18.7137}, {173.045, 20.7827}, {171.691, 
       21.764699999999998`}, {169.648, 21.764699999999998`}, {167.791, 
       21.764699999999998`}}, CompressedData["
1:eJxTTMoPSmViYGCQAGIQbX3fv3f6uhQHuxc31/xaY+4A5rulwvlHFDYUZbQi
+H5JAhGWK1IdJLZfZLhnZO7AsUYmKuVwqsO8s6vOX00zc3Dpznn++2Gqw+rz
V8Pe1Js6pIAMfJ/qwL11WeVxSxM4X84i3SXzvhGcz/tAd8KCFwYOCU8vKN2+
mOqwgfl5jwavnsPbGnvTuKpUhyDPuQ1qj3TgfIGX29czH9dx2FMyWYJlXqoD
V4ZSTkWUjsP1xQW2XOtTHd7y7jOY6aXt8OXvlYqXu1IdtkR+3XlLS9NB3RDo
Yr40h1OHndZmzhNx2PYZqGBvKpy/4pi3eWdlqkNLzYXNkVfVHNgapzp3Z6Q6
8Exe2RT4UtNB7Oa578HBqQ5Zvp/7gkW0HVRBCqQR/CiQh36mYPBh5sPCG8YH
AJ/0sPM=
       "]}], 
     FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
       0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
       187.667, 12.0005}, {184.828, 21.234499999999997`}, {184.774, 
       21.234499999999997`}, {181.855, 12.0005}}, {{186.154, 23.6755}, {
       192.204, 5.1545000000000005`}, {189.763, 5.1545000000000005`}, {
       188.27700000000002`, 9.983500000000001}, {181.219, 
       9.983500000000001}, {179.732, 5.1545000000000005`}, {177.397, 
       5.1545000000000005`}, {183.607, 23.6755}}}], 
     FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
      0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{194.4609, 
      23.675800000000002`}, {202.7399, 23.675800000000002`}, {202.7399, 
      21.658800000000003`}, {196.79590000000002`, 21.658800000000003`}, {
      196.79590000000002`, 15.768800000000002`}, {202.4479, 
      15.768800000000002`}, {202.4479, 13.751800000000003`}, {
      196.79590000000002`, 13.751800000000003`}, {196.79590000000002`, 
      5.154800000000002}, {194.4609, 5.154800000000002}}}], 
     FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
      0, 1, 0}, {0, 1, 0}}}, {{{208.4463, 21.659200000000002`}, {204.2003, 
      21.659200000000002`}, {204.2003, 23.6762}, {215.02630000000002`, 
      23.6762}, {215.02630000000002`, 21.659200000000002`}, {
      210.78130000000002`, 21.659200000000002`}, {210.78130000000002`, 
      5.154200000000003}, {208.4463, 5.154200000000003}}}], 
     FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
      0, 1, 0}, {0, 1, 0}}}, {{{216.46, 4.031200000000001}, {218.583, 
      4.031200000000001}, {218.583, 24.622200000000003`}, {216.46, 
      24.622200000000003`}, {216.46, 26.215200000000003`}, {220.493, 
      26.215200000000003`}, {220.493, 2.439200000000001}, {216.46, 
      2.439200000000001}}}], 
     FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
      0, 1, 0}, {0, 1, 0}}}, {{{223.83790000000002`, 4.031200000000001}, {
      225.9609, 4.031200000000001}, {225.9609, 24.622200000000003`}, {
      223.83790000000002`, 24.622200000000003`}, {223.83790000000002`, 
      26.215200000000003`}, {227.8709, 26.215200000000003`}, {227.8709, 
      2.439200000000001}, {223.83790000000002`, 2.439200000000001}}}]}, {-133,
     0}]},
  ImageSize->{112., Automatic},
  PlotRange->{{0., 98}, {0., 29.667}}]], "Text",
 CellMargins->{{25, 4}, {14, 8}},
 ShowCellLabel->False,
 CellID->1859060648],

Cell[TextData[{
 "The Wolfram Device Framework, built into the Wolfram Language, creates \
symbolic objects that represent external devices, streamlines interaction \
with devices, and facilitates the authoring of device drivers. This tutorial \
explains the internals of the Device Framework for advanced users and \
developers of device drivers. For details of the interaction with devices at \
the user level, see \"",
 ButtonBox["Using Connected Devices",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/UsingConnectedDevices"],
 "\". "
}], "Text",
 CellTags->"TextAnnotation",
 CellID->700038665],

Cell[TextData[{
 "For most devices, the functions that comprise the Device Framework are not \
directly concerned with actual device programming or low-level hardware \
communication software. Such implementation would vary on a case-by-case \
basis depending on the hardware device in question. For instance, one \
implementation might involve writing (or being supplied with by a third \
party) low-level device programs in C, and then using WSTP to expose the \
interfaces of these programs to package-level Wolfram Language functions. \
These functions would then be strung together in an appropriate fashion by \
the Device Framework, creating a Wolfram Language device driver. In another \
implementation, one might avoid low-level C programming altogether and use \
the Wolfram Language ",
 ButtonBox[".",
  BaseStyle->"Link",
  ButtonData->"paclet:NETLink/tutorial/Overview"],
 StyleBox[ButtonBox["NET/Link",
  BaseStyle->"Link",
  ButtonData->"paclet:NETLink/tutorial/Overview"],
  FontSlant->"Italic"],
 " functionality to interact with a device from within driver-level Wolfram \
Language functions. The responsibility of the Device Framework would again be \
to integrate these functions, providing a unified way of interfacing with \
devices through a set of user-level functions. "
}], "Text",
 CellID->1360974195],

Cell[CellGroupData[{

Cell["Overview", "Section",
 CellID->939564002],

Cell[BoxData[
 RowBox[{
  RowBox[{"$Line", "=", "0"}], ";", 
  RowBox[{"Clear", "[", "\"\<DevelopingDeviceDrivers`*\>\"", "]"}], ";", 
  RowBox[{"DeviceFramework`DeviceDeregister", "[", 
   RowBox[{"Devices", "[", "]"}], "]"}], ";"}]], "Input",
 CellMargins->{{74, 4}, {0, 0}},
 CellElementSpacings->{"ClosedCellHeight"->0},
 CellOpen->False,
 CellLabel->"In[3]:=",
 CellID->562850576],

Cell[TextData[{
 "Developer-level functions for creating device drivers and encapsulating \
lower-level interactions with devices are collected in the ",
 Cell[BoxData["DeviceFramework`"], "InlineFormula"],
 " context, see ",
 ButtonBox["\"Device Framework Functions\"",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/DevelopingDeviceDrivers#617176298"],
 ". At the heart of a device driver is the function ",
 Cell[BoxData["DeviceClassRegister"], "InlineFormula"],
 "."
}], "Text",
 CellID->1540737561],

Cell[BoxData[GridBox[{
   {
    RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
     RowBox[{"\"\<\!\(\*
StyleBox[\"class\", \"TI\"]\)\>\"", ",", 
      StyleBox["opts", "TI"]}], "]"}], "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "register a device driver for the specified class whose operation is \
defined by the options ",
     Cell[BoxData[
      StyleBox["opts", "TI"]], "InlineFormula"],
     " "
    }], "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
     RowBox[{"\"\<\!\(\*
StyleBox[\"class\", \"TI\"]\)\>\"", ",", "\"\<\!\(\*
StyleBox[\"parent\", \"TI\"]\)\>\"", ",", 
      StyleBox["opts", "TI"]}], "]"}], "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "register a class identical to ",
     Cell[BoxData[
      StyleBox["parent", "TI"]], "InlineFormula"],
     ", except for operations defined by the options ",
     Cell[BoxData[
      StyleBox["opts", "TI"]], "InlineFormula"]
    }], "TableText"]}
  }]], "DefinitionBox",
 CellID->12673],

Cell[TextData[{
 "Options of ",
 Cell[BoxData["DeviceClassRegister"], "InlineFormula"],
 " determine various device and driver properties and define functions that \
the framework will call to discover devices of the class and execute \
operations that a generic device is expected to perform, such as opening a \
connection to a device, configuring it, reading from and writing to a device, \
executing a command, and closing the connection to a device and releasing \
external resources."
}], "Text",
 CellID->750760203],

Cell[BoxData[GridBox[{
   {Cell["option", "TableHeader"], Cell["default value", "TableHeader"], ""},
   {"\"\<FindFunction\>\"", 
    RowBox[{
     RowBox[{"{", "}"}], "&"}], Cell["how to discover devices", "TableText"]},
   {"\"\<OpenFunction\>\"", 
    ButtonBox["None",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/None"], Cell[
    "the function to execute when opening a device", "TableText"]},
   {"\"\<ConfigureFunction\>\"", "None", Cell[
    "how to configure a device", "TableText"]},
   {"\"\<ReadFunction\>\"", "None", Cell[
    "how to read from a device", "TableText"]},
   {"\"\<ReadBufferFunction\>\"", "None", Cell[
    "how to read from a device buffer", "TableText"]},
   {"\"\<WriteFunction\>\"", "None", Cell[
    "how to write to a device", "TableText"]},
   {"\"\<WriteBufferFunction\>\"", "None", Cell[
    "how to write to a device buffer", "TableText"]},
   {"\"\<ExecuteFunction\>\"", "None", Cell[
    "how to execute a command on a device", "TableText"]},
   {"\"\<ExecuteAsynchronousFunction\>\"", "None", Cell[
    "how to execute a command asyncronously", "TableText"]},
   {"\"\<CloseFunction\>\"", "None", Cell[
    "the function to execute when closing a device", "TableText"]},
   {"\"\<Properties\>\"", 
    RowBox[{"{", "}"}], Cell["standardized properties", "TableText"]},
   {"\"\<DeviceIconFunction\>\"", "None", Cell[
    "how to create an icon for the device object", "TableText"]},
   {"\"\<DriverVersion\>\"", 
    RowBox[{"Missing", "[", "\"\<NotAvailable\>\"", "]"}], Cell[
    "the version number of the driver", "TableText"]}
  }]], "DefinitionBox3Col",
 GridBoxOptions->{
 GridBoxDividers->{
  "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
   "Rows" -> {False, True, False, False, False, False, {False}, False}, 
   "RowsIndexed" -> {}}},
 CellID->12623],

Cell["Important device driver options.", "Caption",
 CellID->2060180926],

Cell["\<\
A more general workflow could involve creating a device manager (an \
initialization object and its handle) before opening a device and \
preconfiguring device properties before exposing a new device object to the \
user. The initialization object would then be disposed of at the release \
stage after the device is closed. \
\>", "Text",
 CellID->1353021148],

Cell["\<\
It is also possible to define handlers for setting and getting standardized \
device properties, exposing native device properties and methods, and giving \
the user access to input and output streams associated with a device. \
Finally, a driver can define a policy for creating multiple devices of the \
class as well as specify other custom handlers.\
\>", "Text",
 CellID->1560305696],

Cell[BoxData[GridBox[{
   {Cell["option", "TableHeader"], Cell["default value", "TableHeader"], ""},
   {"\"\<OpenManagerFunction\>\"", 
    ButtonBox["None",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/None"], Cell[
    "the function to execute to open a device manager", "TableText"]},
   {"\"\<MakeManagerHandleFunction\>\"", 
    ButtonBox["Identity",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Identity"], Cell[
    "how to create a handle to the device manager", "TableText"]},
   {"\"\<PreconfigureFunction\>\"", 
    RowBox[{
     RowBox[{"{", "}"}], "&"}], Cell[
    "how to preconfigure a new device", "TableText"]},
   {"\"\<ReleaseFunction\>\"", 
    RowBox[{
     ButtonBox["Null",
      BaseStyle->"Link",
      ButtonData->"paclet:ref/Null"], "&"}], Cell[
    "how to dispose of the device manager object", "TableText"]},
   {"\"\<ReadTimeSeriesFunction\>\"", 
    ButtonBox["Automatic",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Automatic"], Cell[TextData[{
     "the handler for ",
     Cell[BoxData[
      TemplateBox[{Cell[
         TextData["DeviceReadTimeSeries"]],"paclet:ref/DeviceReadTimeSeries"},
       "RefLink",
       BaseStyle->"InlineFormula"]], "InlineFormula"]
    }], "TableText"]},
   {"\"\<StatusLabelFunction\>\"", 
    ButtonBox["Automatic",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Automatic"], Cell[
    "how to create the status label for the device object", "TableText"]},
   {"\"\<NativeProperties\>\"", 
    RowBox[{"{", "}"}], Cell["native properties", "TableText"]},
   {"\"\<NativeMethods\>\"", 
    RowBox[{"{", "}"}], Cell["native methods", "TableText"]},
   {"\"\<GetPropertyFunction\>\"", "DeviceFramework`DeviceGetProperty", Cell[
    "how to get standardized properties", "TableText"]},
   {"\"\<SetPropertyFunction\>\"", "DeviceFramework`DeviceSetProperty", Cell[
    "how to set standardized properties", "TableText"]},
   {"\"\<GetNativePropertyFunction\>\"", 
    ButtonBox["Automatic",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Automatic"], Cell[
    "how to get native properties", "TableText"]},
   {"\"\<SetNativePropertyFunction\>\"", 
    ButtonBox["Automatic",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Automatic"], Cell[
    "how to set native properties", "TableText"]},
   {"\"\<NativeIDFunction\>\"", 
    ButtonBox["None",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/None"], Cell[
    "how to get the native ID of a device", "TableText"]},
   {"\"\<OpenReadFunction\>\"", 
    ButtonBox["None",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/None"], Cell[
    "how to open input streams assoociated with the device", "TableText"]},
   {"\"\<OpenWriteFunction\>\"", 
    ButtonBox["None",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/None"], Cell[
    "how to open output streams assoociated with the device", "TableText"]},
   {"\"\<DeregisterOnClose\>\"", 
    ButtonBox["False",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/False"], Cell[
    "whether to deregister a device after it is closed", "TableText"]},
   {"\"\<Singleton\>\"", 
    ButtonBox["Automatic",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Automatic"], Cell[
    "creation policy for multiiple devices", "TableText"]}
  }]], "DefinitionBox3Col",
 GridBoxOptions->{
 GridBoxDividers->{
  "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
   "Rows" -> {False, True, False, False, False, False, {False}, False}, 
   "RowsIndexed" -> {}}},
 CellID->1162312469],

Cell["Advanced device driver options.", "Caption",
 CellID->1474413371],

Cell[TextData[{
 "A detailed look at the ",
 Cell[BoxData["DeviceClassRegister"], "InlineFormula"],
 " options follows in the next section. Note that none of the options are \
mandatory and many of them would typically be omitted in a particular driver \
implementation."
}], "Text",
 CellID->1135019155],

Cell["\<\
As an example, here is a driver for a simple device that can perform the \
device read operation:\
\>", "Text",
 CellID->510605039],

Cell[BoxData[{
 RowBox[{
  RowBox[{"BeginPackage", "[", "\"\<MyDevice`\>\"", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"read", "[", "__", "]"}], " ", ":=", " ", "XXXXX"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<MyDevice\>\"", ",", " ", 
    RowBox[{"\"\<ReadFunction\>\"", " ", "\[Rule]", " ", "read"}]}], "]"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{"End", "[", "]"}], "\n"}], "\n", 
 RowBox[{"EndPackage", "[", "]"}]}], "Program",
 CellID->192892392],

Cell[TextData[{
 "A basic driver file ",
 StyleBox["MyDevice.m", "InlineCode"],
 ". "
}], "Caption",
 CellID->8007],

Cell[TextData[{
 "To be automatically discoverable by the framework, a ",
 Cell[BoxData[
  RowBox[{"DeviceClassRegister", "[", 
   RowBox[{"\"\<\!\(\*
StyleBox[\"class\", \"TI\"]\)\>\"", ",", 
    StyleBox["\[Ellipsis]", "TR"]}], "]"}]], "InlineFormula"],
 " statement for ",
 Cell[BoxData[
  StyleBox["class", "TI"]], "InlineFormula"],
 " must reside in a Wolfram Language package ",
 Cell[BoxData[
  StyleBox["class", "TI"]], "InlineFormula"],
 StyleBox[".m", "InlineCode"],
 ". Note the naming convention; the first string argument of ",
 Cell[BoxData["DeviceClassRegister"], "InlineFormula"],
 " matches the driver file name. Further, the driver must be placed at one of \
the following locations:"
}], "Text",
 CellID->1506860218],

Cell[TextData[{
 "in the current evaluation notebook directory (",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["NotebookDirectory"]],"paclet:ref/NotebookDirectory"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ")"
}], "Item",
 CellID->1059878494],

Cell[TextData[{
 "in a special directory ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["ToFileName"]],"paclet:ref/ToFileName"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{Cell[
        TextData["$InstallationDirectory"]],
       "paclet:ref/$InstallationDirectory"},
      "RefLink",
      BaseStyle->"InlineFormula"], ",", "\"\<SystemFiles\>\"", ",", 
     "\"\<Devices\>\"", ",", "\"\<DeviceDrivers\>\""}], "}"}], "]"}]], 
  "InlineFormula"],
 " on your computer system"
}], "Item",
 CellID->996793],

Cell[TextData[{
 "anywhere on ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["$Path"]],"paclet:ref/$Path"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"]
}], "Item",
 CellID->1720714422],

Cell[CellGroupData[{

Cell[TextData[{
 "on a paclet server or in a driver paclet directory (see ",
 ButtonBox["\"Developing Device Driver Paclets\"",
  BaseStyle->"Link",
  ButtonData->"paclet:DevelopingDeviceDriverPaclets#1883152198"],
 ")"
}], "Item",
 CellID->2032500052],

Cell[TextData[{
 "A driver can be used even if it does not follow these conventions, but then \
it must be explicitly loaded in your Wolfram Language session, for instance, \
with ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Get"]],"paclet:ref/Get"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 "."
}], "Text",
 CellID->1789187572],

Cell[TextData[{
 "To make a driver available on a specific platform, you can wrap a ",
 Cell[BoxData[
  RowBox[{"DeviceClassRegister", "[", "]"}]], "InlineFormula"],
 " statement in an ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["If"]],"paclet:ref/If"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 "."
}], "Text",
 CellID->1166297488],

Cell["This driver will only be available on Mac OS X.", "MathCaption",
 CellID->1878634647],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"$OperatingSystem", "===", "\"\<MacOSX\>\""}], ",", 
   RowBox[{
    RowBox[{"DeviceFramework`DeviceClassRegister", "[", "\"\<mac\>\"", "]"}], 
    ";"}]}], "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->1907933935]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Device Driver Options", "Section",
 CellID->602846093],

Cell[TextData[{
 "The options of ",
 Cell[BoxData["DeviceClassRegister"], "InlineFormula"],
 ", also called ",
 StyleBox["device driver options",
  FontSlant->"Italic"],
 ", allow you to create a driver suitable for your device. Driver options \
whose names include the word ",
 StyleBox["\"Function\"", "InlineCode"],
 " (",
 StyleBox["driver functions",
  FontSlant->"Italic"],
 ") roughly correspond to user-level functions. For instance, ",
 Cell[BoxData["\"\<ConfigureFunction\>\""], "InlineFormula"],
 " is called during the execution of ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceConfigure"]],"paclet:ref/DeviceConfigure"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ", ",
 Cell[BoxData["\"\<FindFunction\>\""], "InlineFormula"],
 " is called in ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["FindDevices"]],"paclet:ref/FindDevices"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ", and so on. However, there are also user-level functions that span more \
than one driver function, as indicated below. One example is the device ",
 StyleBox["opening sequence",
  FontSlant->"Italic"],
 ", executed during ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ", that includes ",
 Cell[BoxData["\"\<OpenManagerFunction\>\""], "InlineFormula"],
 ", ",
 Cell[BoxData["\"\<MakeManagerHandleFunction\>\""], "InlineFormula"],
 ", ",
 Cell[BoxData["\"\<OpenFunction\>\""], "InlineFormula"],
 ", and ",
 Cell[BoxData["\"\<PreconfigureFunction\>\""], "InlineFormula"],
 ". If a driver function fails, it is expected to return ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["$Failed"]],"paclet:ref/$Failed"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 "."
}], "Text",
 CellID->1935578732],

Cell[TextData[{
 "The first argument supplied to many driver functions is a list in the form ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    StyleBox["ihandle", "TI"], ",", " ", 
    StyleBox["dhandle", "TI"]}], "}"}]], "InlineFormula"],
 ", where ",
 Cell[BoxData[
  StyleBox["ihandle", "TI"]], "InlineFormula"],
 " is the handle to the initialization object (or manager handle; see ",
 Cell[BoxData["\"\<MakeManagerHandleFunction\>\""], "InlineFormula"],
 ") and ",
 Cell[BoxData[
  StyleBox["dhandle", "TI"]], "InlineFormula"],
 " is the device handle (see ",
 Cell[BoxData["\"\<OpenFunction\>\""], "InlineFormula"],
 "). This convention, employed in ",
 Cell[BoxData["\"\<ConfigureFunction\>\""], "InlineFormula"],
 ", ",
 Cell[BoxData["\"\<ReadFunction\>\""], "InlineFormula"],
 ", and other driver functions, lets you use whatever handle is necessary and \
skip the other one. For instance, if you only need ",
 Cell[BoxData[
  StyleBox["ihandle", "TI"]], "InlineFormula"],
 ", your driver function could be implemented as ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"ih_", ",", " ", "_"}], "}"}], ",", " ", "args___"}], "]"}], ":=", 
   RowBox[{"(*", " ", 
    RowBox[{"use", " ", "ih"}], " ", "*)"}]}]], "InlineFormula"],
 "; to use only ",
 Cell[BoxData[
  StyleBox["dhandle", "TI"]], "InlineFormula"],
 ", you provide a rule for ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"_", ",", " ", "dh_"}], "}"}], ",", " ", "args___"}], "]"}], ":=",
    "\[Ellipsis]"}]], "InlineFormula"],
 "; to skip both handles, use ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"_", ",", " ", "args___"}], "]"}], ":=", "\[Ellipsis]"}]], 
  "InlineFormula"],
 "; and so on. You will find many examples of such usage below."
}], "Text",
 CellID->1682897120],

Cell[TextData[{
 "The remaining arguments supplied to a driver function are typically passed \
from the parent top-level function, possibly stripped of a list wrapper. For \
instance, for both ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceRead"]],"paclet:ref/DeviceRead"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", 
   RowBox[{
    StyleBox["dev", "TI"], ",", 
    StyleBox["param", "TI"]}], "]"}]], "InlineFormula"],
 " and ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceRead"]],"paclet:ref/DeviceRead"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", 
   RowBox[{
    StyleBox["dev", "TI"], ",", 
    RowBox[{"{", 
     StyleBox["param", "TI"], "}"}]}], "]"}]], "InlineFormula"],
 ", your implementation of ",
 Cell[BoxData[
  RowBox[{"\"\<ReadFunction\>\"", "\[Rule]", 
   StyleBox["f", "TI"]}]], "InlineFormula"],
 " will receive a call as ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", 
   RowBox[{
    StyleBox["handles", "TI"], ",", 
    StyleBox["param", "TI"]}], "]"}]], "InlineFormula"],
 "; for ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceRead"]],"paclet:ref/DeviceRead"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", 
   RowBox[{
    StyleBox["dev", "TI"], ",", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox[
       StyleBox["param", "TI"], 
       StyleBox["1", "TR"]], ",", 
      SubscriptBox[
       StyleBox["param", "TI"], 
       StyleBox["2", "TR"]], ",", "\[Ellipsis]"}], "}"}]}], "]"}]], 
  "InlineFormula"],
 ", the function will be called as ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", 
   RowBox[{
    StyleBox["handles", "TI"], ",", 
    SubscriptBox[
     StyleBox["param", "TI"], 
     StyleBox["1", "TR"]], ",", 
    SubscriptBox[
     StyleBox["param", "TI"], 
     StyleBox["2", "TR"]], ",", "\[Ellipsis]"}], "]"}]], "InlineFormula"],
 "; for ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceRead"]],"paclet:ref/DeviceRead"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", 
   StyleBox["dev", "TI"], "]"}]], "InlineFormula"],
 ", the call will be in the form ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", 
   StyleBox["handles", "TI"], "]"}]], "InlineFormula"],
 ", and so on. You should anticipate all possible combinations of arguments \
that are documented for the parent function and issue appropriate error \
messages if some combinations do not make sense in your case."
}], "Text",
 CellID->2102440761],

Cell[TextData[{
 "When reporting errors, it is customary to associate messages with your own \
user-visible symbols if your driver exports such symbols. Otherwise, you can \
assign messages for your class to a special symbol ",
 StyleBox["DeviceFramework`Devices`", "InlineCode"],
 Cell[BoxData[
  StyleBox["class", "TI"]], "InlineFormula"],
 ". Some examples of this convention are given in this tutorial. To learn \
more, see ",
 ButtonBox["\"Messages\"",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/Messages"],
 "."
}], "Text",
 CellID->163433197],

Cell["\<\
Of course, if your driver does not implement some driver functions, you need \
not bother about error messages for those functions either. Such messages are \
issued by the framework.\
\>", "Text",
 CellID->1312919637],

Cell["This dummy driver does not implement any driver functions. ", \
"MathCaption",
 CellID->845866134],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceFramework`DeviceClassRegister", "[", "\"\<dummy\>\"", 
  "]"}]], "Input",
 CellLabel->"In[22]:=",
 CellID->130370998],

Cell[BoxData["\<\"dummy\"\>"], "Output",
 ImageSize->{39, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[22]=",
 CellID->1380533687]
}, Open  ]],

Cell["\<\
You can open a dummy device, but attempting to execute any specific operation \
on it will result in error.  \
\>", "MathCaption",
 CellID->1535315838],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", "\"\<dummy\>\"", "]"}]}]], "Input",
 CellLabel->"In[23]:=",
 CellID->2037270561],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"dummy\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"dummy", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"dummy\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"dummy", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"dummy", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"dummy", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[23]=",
 CellID->1216355221]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceConfigure", "[", 
  RowBox[{"dev", ",", 
   RowBox[{"a", "\[Rule]", "x"}]}], "]"}]], "Input",
 CellLabel->"In[24]:=",
 CellID->1385363554],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"DeviceConfigure", "::", "noop"}], "MessageName"], ":", 
  " ", "\<\"\[NoBreak]\\!\\(DeviceConfigure\\)\[NoBreak] not supported for \
\[NoBreak]\\!\\(\\\"dummy\\\"\\)\[NoBreak]. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/DeviceConfigure\\\", ButtonNote -> \
\\\"DeviceConfigure::noop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellLabel->"During evaluation of In[24]:=",
 CellID->787551304],

Cell[BoxData["$Failed"], "Output",
 ImageSize->{53, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[24]=",
 CellID->1433049867]
}, Open  ]],

Cell[TextData[{
 "In reading through this tutorial, you will have noticed that most examples \
employ only top-level Wolfram Language commands. This is done on purpose so \
that you could reevaluate examples and learn to use the device framework \
without any specific device. Real-life drivers will, of course, also call \
external programs. See ",
 ButtonBox["\"Calling External Programs\"",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/CallingExternalPrograms"],
 " for an overview and the ",
 ButtonBox["\"Examples\" section below",
  BaseStyle->"Link",
  ButtonData->"paclet:paclet:tutorial/DevelopingDeviceDrivers#647897357"],
 " for a typical implementation."
}], "Text",
 CellID->251501067],

Cell[TextData[{
 "Besides examples in this tutorial, you might also want to look over the \
implementation of demo drivers referenced in the Wolfram Language \
documentation. For instance, to see how you could implement ",
 Cell[BoxData["\"\<ExecuteAsynchronousFunction\>\""], "InlineFormula"],
 ", look at the demo driver for ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceExecuteAsynchronous"]],
    "paclet:ref/DeviceExecuteAsynchronous"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 "."
}], "Text",
 CellID->2013037339],

Cell[TextData[{
 "Execute the following command to examine a demo implementation of ",
 Cell[BoxData["\"\<ExecuteAsynchronousFunction\>\""], "InlineFormula"],
 "."
}], "MathCaption",
 CellID->1825717595],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "DeviceFramework`DeviceDriverLoad", "[", "\"\<AsynchronousDemo\>\"", "]"}], 
  "//", "SystemOpen"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->1661181735],

Cell[CellGroupData[{

Cell["\"FindFunction\"", "Subsection",
 CellID->2076911133],

Cell[TextData[{
 "In order for your device to be discoverable, your driver must implement the \
",
 Cell[BoxData["\"\<FindFunction\>\""], "InlineFormula"],
 " option. ",
 Cell[BoxData[
  RowBox[{"\"\<FindFunction\>\"", "\[Rule]", 
   StyleBox["f", "TI"]}]], "InlineFormula"],
 " specifies that ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", "]"}]], "InlineFormula"],
 " should be called by ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["FindDevices"]],"paclet:ref/FindDevices"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 Cell[BoxData[
  RowBox[{"[", 
   StyleBox["class", "TI"], "]"}]], "InlineFormula"],
 " to find devices of the given class. The function ",
 Cell[BoxData[
  StyleBox["f", "TI"]], "InlineFormula"],
 " receives no arguments and should return an output in the form ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      SubscriptBox[
       StyleBox["arg", "TI"], 
       StyleBox["11", "TR"]], ",", 
      SubscriptBox[
       StyleBox["arg", "TI"], 
       StyleBox["12", "TR"]], ",", "\[Ellipsis]"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox[
       StyleBox["arg", "TI"], 
       StyleBox["21", "TR"]], ",", 
      SubscriptBox[
       StyleBox["arg", "TI"], 
       StyleBox["22", "TR"]], ",", "\[Ellipsis]"}], "}"}], ",", 
    "\[Ellipsis]"}], "}"}]], "InlineFormula"],
 ", where ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    SubscriptBox[
     StyleBox["arg", "TI"], 
     StyleBox[
      StyleBox[
       RowBox[{"i", 
        StyleBox["1",
         FontSlant->"Plain"]}]], "TI"]], ",", 
    SubscriptBox[
     StyleBox["arg", "TI"], 
     StyleBox[
      StyleBox[
       RowBox[{"i", 
        StyleBox["2",
         FontSlant->"Plain"]}]], "TI"]], ",", "\[Ellipsis]"}], "}"}]], 
  "InlineFormula"],
 " is a list of arguments that could be supplied to ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", 
   RowBox[{
    StyleBox["class", "TI"], ",", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox[
       StyleBox["arg", "TI"], 
       StyleBox[
        StyleBox[
         RowBox[{"i", 
          StyleBox["1",
           FontSlant->"Plain"]}]], "TI"]], ",", 
      SubscriptBox[
       StyleBox["arg", "TI"], 
       StyleBox[
        StyleBox[
         RowBox[{"i", 
          StyleBox["2",
           FontSlant->"Plain"]}]], "TI"]], ",", "\[Ellipsis]"}], "}"}]}], 
   "]"}]], "InlineFormula"],
 " to open the device number ",
 Cell[BoxData[
  StyleBox["i", "TI"]], "InlineFormula"],
 ". "
}], "Text",
 CellID->1578727342],

Cell[TextData[{
 "Typical arguments returned by the function ",
 Cell[BoxData[
  StyleBox["f", "TI"]], "InlineFormula"],
 " would be a port name, a GPIB address, or a camera name. If a device can be \
opened without arguments, ",
 Cell[BoxData[
  StyleBox["f", "TI"]], "InlineFormula"],
 " can return ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", "}"}], "}"}], "&"}]], "InlineFormula"],
 ". "
}], "Text",
 CellID->1459121595],

Cell[TextData[{
 "If your driver implements ",
 Cell[BoxData["\"\<FindFunction\>\""], "InlineFormula"],
 ", the user will also be able to use devices of your class without \
explicitly opening them first. "
}], "Text",
 CellID->1337854623],

Cell[TextData[{
 "Devices without a proper ",
 Cell[BoxData["\"\<FindFunction\>\""], "InlineFormula"],
 " are not automatically discoverable."
}], "MathCaption",
 CellID->1168864671],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
  RowBox[{"\"\<read\>\"", ",", 
   RowBox[{"\"\<ReadFunction\>\"", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Random", "[", "]"}], "&"}], ")"}]}]}], "]"}]], "Input",
 CellLabel->"In[43]:=",
 CellID->715856181],

Cell[BoxData["\<\"read\"\>"], "Output",
 ImageSize->{32, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[43]=",
 CellID->1672643812]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindDevices", "[", "\"\<read\>\"", "]"}]], "Input",
 CellLabel->"In[44]:=",
 CellID->544796539],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 ImageSize->{18, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[44]=",
 CellID->1563609054]
}, Open  ]],

Cell["You must open a device of such class before it can be used.", \
"MathCaption",
 CellID->644057651],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceRead", "[", "\"\<read\>\"", "]"}]], "Input",
 CellLabel->"In[35]:=",
 CellID->1833664541],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"DeviceRead", "::", "ncdevx"}], "MessageName"], ":", 
  " ", "\<\"Unable to automatically open a device in the \
\[NoBreak]\\!\\(\\\"read\\\"\\)\[NoBreak] class to perform this operation. \
Try opening a device first. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/DeviceRead\\\", ButtonNote -> \
\\\"DeviceRead::ncdevx\\\"]\\)\"\>"}]], "Message", "MSG",
 CellLabel->"During evaluation of In[35]:=",
 CellID->2009606137],

Cell[BoxData["$Failed"], "Output",
 ImageSize->{53, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[35]=",
 CellID->1975028190]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceOpen", "[", "\"\<read\>\"", "]"}]], "Input",
 CellLabel->"In[36]:=",
 CellID->1359359477],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"read\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"read", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"read\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"read", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"read", 1}], Devices`DeviceAPI`DeviceDump`props$$,
               Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"read", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 62},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[36]=",
 CellID->1823693153]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceRead", "[", "\"\<read\>\"", "]"}]], "Input",
 CellLabel->"In[37]:=",
 CellID->1924212487],

Cell[BoxData["0.15600566106430597`"], "Output",
 ImageSize->{60, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[37]=",
 CellID->1283028836]
}, Open  ]],

Cell[TextData[{
 "This driver extends the previous one by supplying the ",
 Cell[BoxData["\"\<FindFunction\>\""], "InlineFormula"],
 " option."
}], "MathCaption",
 CellID->982347125],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
  RowBox[{"\"\<read2\>\"", ",", "\"\<read\>\"", ",", 
   RowBox[{"\"\<FindFunction\>\"", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"{", "}"}], "}"}], "&"}], ")"}]}]}], "]"}]], "Input",
 CellLabel->"In[38]:=",
 CellID->453851739],

Cell[BoxData["\<\"read2\"\>"], "Output",
 ImageSize->{39, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[38]=",
 CellID->24263229]
}, Open  ]],

Cell["\<\
Devices of this class can be opened automatically by the framework.\
\>", "MathCaption",
 CellID->2074548389],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceRead", "[", "\"\<read2\>\"", "]"}]], "Input",
 CellLabel->"In[39]:=",
 CellID->1917680520],

Cell[BoxData["0.5371856975157944`"], "Output",
 ImageSize->{60, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[39]=",
 CellID->1021925464]
}, Open  ]],

Cell["\<\
Devices remain open after performing the required operation until they are \
explicitly closed.\
\>", "MathCaption",
 CellID->390281231],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Devices", "[", "\"\<read2\>\"", "]"}]], "Input",
 CellLabel->"In[40]:=",
 CellID->1041591479],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   RowBox[{
    TagBox["DeviceObject",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False}, 
     PanelBox[
      PaneSelectorBox[{False->GridBox[{
         {
          PaneBox[
           ButtonBox[
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEBitmaps", "SquarePlusIconMedium"],
             ImageSizeCache->{12., {0., 12.}}],
            Appearance->None,
            ButtonFunction:>(Typeset`open$$ = True),
            Evaluator->Automatic,
            Method->"Preemptive"],
           Alignment->{Center, Center},
           
           ImageSize->
            Dynamic[{
             Automatic, 3.5 CurrentValue["FontCapHeight"]/
              AbsoluteCurrentValue[Magnification]}]], 
          GraphicsBox[
           {Thickness[0.038461538461538464`], 
            {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
             FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
              3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
              1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
              0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
              25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
              24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
            {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
             JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
              3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
              1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
              0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
              25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
              24.605}, {25.5, 23.5}, {25.5, 2.5}}},
              CurveClosed->{1}]}, 
            {FaceForm[{RGBColor[
             0.45999999999999996`, 0.45999999999999996`, 
              0.45999999999999996`], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
              20.542}, {11.020999999999999`, 20.542}}}]}, 
            {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              15.979000000000001`, 16.541999999999998`}, {10.020999999999999`,
               16.541999999999998`}, {10.020999999999999`, 10.542}, {
              12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
              13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
              15.979000000000001`, 10.542}, {15.979000000000001`, 
              16.541999999999998`}}}]}},
           AspectRatio->Automatic,
           ImageSize->{Automatic, 
             Dynamic[3.5 CurrentValue["FontCapHeight"]]},
           PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
            {
             RowBox[{
              TagBox["\<\"Class: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["\<\"read2\"\>",
               "SummaryItem"]}], 
             RowBox[{
              TagBox["\<\"ID: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["1",
               "SummaryItem"]}]},
            {
             RowBox[{
              TagBox["\<\"Status: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox[
               DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                 Style[
                  Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                   9, ImageMargins -> {{3, 3}, {2, 0}}, 
                   BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                  False], 
                 Style[
                  Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                   9, ImageMargins -> {{3, 3}, {2, 0}}, 
                   BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                  False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                 Opacity[1], 
                 Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                "Connected", "Not connected"}, 
                Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"read2", 1}],
                 Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
                Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
                DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                  Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                 ImageSizeCache->{94., {5., 9.}}],
                DynamicModuleValues:>{}],
               "SummaryItem"]}], "\[SpanFromLeft]"}
           },
           AutoDelete->False,
           
           BaseStyle->{
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
           GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
        },
        AutoDelete->False,
        BaselinePosition->{1, 1},
        GridBoxAlignment->{"Rows" -> {{Top}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
         {
          PaneBox[
           ButtonBox[
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEBitmaps", "SquarePlusIconMedium"]],
            Appearance->None,
            ButtonFunction:>(Typeset`open$$ = False),
            Evaluator->Automatic,
            Method->"Preemptive"],
           Alignment->{Center, Center},
           
           ImageSize->
            Dynamic[{
             Automatic, 3.5 CurrentValue["FontCapHeight"]/
              AbsoluteCurrentValue[Magnification]}]], 
          GraphicsBox[
           {Thickness[0.038461538461538464`], 
            {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
             FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
              3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
              1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
              0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
              25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
              24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
            {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
             JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
              3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
              1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
              0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
              25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
              24.605}, {25.5, 23.5}, {25.5, 2.5}}},
              CurveClosed->{1}]}, 
            {FaceForm[{RGBColor[
             0.45999999999999996`, 0.45999999999999996`, 
              0.45999999999999996`], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
              20.542}, {11.020999999999999`, 20.542}}}]}, 
            {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              15.979000000000001`, 16.541999999999998`}, {10.020999999999999`,
               16.541999999999998`}, {10.020999999999999`, 10.542}, {
              12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
              13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
              15.979000000000001`, 10.542}, {15.979000000000001`, 
              16.541999999999998`}}}]}},
           AspectRatio->Automatic,
           ImageSize->{Automatic, 
             Dynamic[3.5 CurrentValue["FontCapHeight"]]},
           PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
            {
             RowBox[{
              TagBox["\<\"Class: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["\<\"read2\"\>",
               "SummaryItem"]}], 
             RowBox[{
              TagBox["\<\"ID: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["1",
               "SummaryItem"]}]},
            {
             RowBox[{
              TagBox["\<\"Status: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox[
               DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                 Style[
                  Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                   9, ImageMargins -> {{3, 3}, {2, 0}}, 
                   BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                  False], 
                 Style[
                  Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                   9, ImageMargins -> {{3, 3}, {2, 0}}, 
                   BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                  False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                 Opacity[1], 
                 Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                "Connected", "Not connected"}, 
                Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"read2", 1}],
                 Devices`DeviceAPI`DeviceDump`ind$$, 
                Devices`DeviceAPI`DeviceDump`indr$$}, 
                DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                  Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
                DynamicModuleValues:>{}],
               "SummaryItem"]}], "\[SpanFromLeft]"},
            {
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"read2", 1}], 
               Devices`DeviceAPI`DeviceDump`props$$, 
               Devices`DeviceAPI`DeviceDump`vals$$, 
               Devices`DeviceAPI`DeviceDump`reg$$}, 
               
               DynamicBox[ToBoxes[
                Devices`DeviceAPI`DeviceDump`reg$$ = 
                  DeviceFramework`DeviceRegisteredQ[
                   Devices`DeviceAPI`DeviceDump`d$$]; 
                 Devices`DeviceAPI`DeviceDump`props$$ = 
                  DeviceFramework`DeviceExternalProperties[
                   Devices`DeviceAPI`DeviceDump`d$$]; 
                 Devices`DeviceAPI`DeviceDump`vals$$ = 
                  Devices`DeviceAPI`DeviceDump`d$$[
                   Devices`DeviceAPI`DeviceDump`props$$]; Column[
                   Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                    MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"], "\[SpanFromLeft]"}
           },
           AutoDelete->False,
           
           BaseStyle->{
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
           GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
        },
        AutoDelete->False,
        BaselinePosition->{1, 1},
        GridBoxAlignment->{"Rows" -> {{Top}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
       Typeset`open$$],
       ImageSize->Automatic],
      BaselinePosition->Baseline],
     DynamicModuleValues:>{}], "]"}],
   DeviceObject[{"read2", 1}],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",
 ImageSize->{325, 62},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[40]=",
 CellID->1888780856]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceClose", "[", "%", "]"}]], "Input",
 CellLabel->"In[41]:=",
 CellID->636576838],

Cell[BoxData[
 RowBox[{"{", "Null", "}"}]], "Output",
 ImageSize->{46, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[41]=",
 CellID->183386912]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"OpenManagerFunction\"", "Subsection",
 CellID->180358514],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<OpenManagerFunction\>\"", "\[Rule]", 
   StyleBox["f", "TI"]}]], "InlineFormula"],
 " specifies that ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", 
   StyleBox["args\[Ellipsis]", "TI"], "]"}]], "InlineFormula"],
 " should be called at the outset of the device opening sequence to create an \
initialization object, also called the \"",
 StyleBox["device manager",
  FontSlant->"Italic"],
 "\". ",
 Cell[BoxData[
  StyleBox["args", "TI"]], "InlineFormula"],
 " are the same as the user supplies to ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", 
   RowBox[{"\"\<\!\(\*
StyleBox[\"class\", \"TI\"]\)\>\"", ",", 
    RowBox[{"{", 
     StyleBox["args\[Ellipsis]", "TI"], "}"}]}], "]"}]], "InlineFormula"],
 ". The return value will be passed to ",
 Cell[BoxData["\"\<ReleaseFunction\>\""], "InlineFormula"],
 " in the deinitialization stage at the end of the device life cycle. Use ",
 Cell[BoxData["DeviceFramework`DeviceInitObject"], "InlineFormula"],
 " to retrieve the initialization object at any other time before the device \
is closed."
}], "Text",
 CellID->1882009059],

Cell[TextData[{
 "You may wish to specify ",
 Cell[BoxData["\"\<OpenManagerFunction\>\""], "InlineFormula"],
 ", for instance, to open a WSTP connection to an external program. In that \
case, the function would return a ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["LinkObject"]],"paclet:ref/LinkObject"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ", which you can close with ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["LinkClose"]],"paclet:ref/LinkClose"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " in your ",
 Cell[BoxData["\"\<ReleaseFunction\>\""], "InlineFormula"],
 ". "
}], "Text",
 CellID->411192981],

Cell["This driver keeps a count of open devices in the class.", "MathCaption",
 CellID->1505061739],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<count\>\"", ",", 
    RowBox[{"\"\<OpenManagerFunction\>\"", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"$counter", "++"}], ")"}], "&"}], ")"}]}], ",", 
    RowBox[{"\"\<ReleaseFunction\>\"", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"$counter", "--"}], ")"}], "&"}], ")"}]}]}], "]"}], 
  ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->362769360],

Cell["\<\
The counter is incremented (decremented) when a device is opened (closed).\
\>", "MathCaption",
 CellID->1865333832],

Cell[BoxData[
 RowBox[{
  RowBox[{"$counter", " ", "=", " ", "0"}], ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->358559687],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", "\"\<count\>\"", "]"}]}]], "Input",
 CellLabel->"In[3]:=",
 CellID->473545927],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"count\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"count", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"count\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"count", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"count", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"count", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 62},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->669033435]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["$counter"], "Input",
 CellLabel->"In[4]:=",
 CellID->1764770422],

Cell[BoxData["1"], "Output",
 ImageSize->{11, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->220566353]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceClose", "[", "dev", "]"}], ";", "$counter"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->1912038019],

Cell[BoxData["0"], "Output",
 ImageSize->{11, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[5]=",
 CellID->501920149]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"MakeManagerHandleFunction\"", "Subsection",
 CellID->175207631],

Cell[TextData[{
 "You can create a separate handle to the initialization object (a ",
 StyleBox["manager handle",
  FontSlant->"Italic"],
 ") by specifying ",
 Cell[BoxData[
  RowBox[{"\"\<MakeManagerHandleFunction\>\"", "\[Rule]", 
   StyleBox["f", "TI"]}]], "InlineFormula"],
 ". The function ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", 
   StyleBox["obj", "TI"], "]"}]], "InlineFormula"],
 " will be called after ",
 Cell[BoxData["\"\<OpenManagerFunction\>\""], "InlineFormula"],
 " and supplied the initialization object ",
 Cell[BoxData[
  StyleBox["obj", "TI"]], "InlineFormula"],
 " created by ",
 Cell[BoxData["\"\<OpenManagerFunction\>\""], "InlineFormula"],
 ". The return value is assumed to be the manager handle. In the absence of ",
 Cell[BoxData["\"\<MakeManagerHandleFunction\>\""], "InlineFormula"],
 ", the manager handle will be the initialization object itself. "
}], "Text",
 CellID->1768935652],

Cell[TextData[{
 "The manager handle is given to many driver functions as a part of ",
 ButtonBox["the first argument",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/DevelopingDeviceDrivers#1682897120"],
 ". At other times, you can retrieve the handle with ",
 Cell[BoxData["DeviceFramework`DeviceManagerHandle"], "InlineFormula"],
 "."
}], "Text",
 CellID->1816399863],

Cell[TextData[{
 "An example of a manager handle would be a socket handle or a ",
 ButtonBox[".NET object",
  BaseStyle->"Link",
  ButtonData->"paclet:NETLink/tutorial/CallingNETFromTheWolframLanguage#7716"],
 ". "
}], "Text",
 CellID->737894096]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"OpenFunction\"", "Subsection",
 CellID->1742434029],

Cell[TextData[{
 "The function specified with ",
 Cell[BoxData[
  RowBox[{"\"\<OpenFunction\>\"", "\[Rule]", 
   StyleBox["f", "TI"]}]], "InlineFormula"],
 " is the main function called by the framework in response to a user call to \
",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ". ",
 Cell[BoxData[
  RowBox[{" ", 
   RowBox[{
    StyleBox["f", "TI"], "[", 
    RowBox[{
     StyleBox["ihandle", "TI"], ",", 
     StyleBox["args\[Ellipsis]", "TI"]}], "]"}]}]], "InlineFormula"],
 " receives the manager handle ",
 Cell[BoxData[
  StyleBox["ihandle", "TI"]], "InlineFormula"],
 " created by ",
 Cell[BoxData["\"\<MakeManagerHandleFunction\>\""], "InlineFormula"],
 " and the arguments ",
 Cell[BoxData[
  StyleBox["args", "TI"]], "InlineFormula"],
 " the user supplies to ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", 
   RowBox[{"\"\<\!\(\*
StyleBox[\"class\", \"TI\"]\)\>\"", ",", 
    RowBox[{"{", 
     StyleBox["args\[Ellipsis]", "TI"], "}"}]}], "]"}]], "InlineFormula"],
 ". The return value is called the \"",
 StyleBox["device handle\"",
  FontSlant->"Italic"],
 ". That handle will be given to many driver functions along with the manager \
handle (see below). Otherwise, you can retrieve it with ",
 Cell[BoxData["DeviceFramework`DeviceHandle"], "InlineFormula"],
 "."
}], "Text",
 CellID->2001714911],

Cell[TextData[{
 "The framework attempts to maintain a one-to-one correspondence between the \
device handle returned by ",
 Cell[BoxData["\"\<OpenFunction\>\""], "InlineFormula"],
 " and the top-level ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceObject"]],"paclet:ref/DeviceObject"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " returned by ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ". It is therefore strongly recommended that your device handles be unique \
or at least unlikely to coincide with handles created by other drivers. One \
easy way to achieve that is to generate your handle using ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["CreateUUID"]],"paclet:ref/CreateUUID"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ". Alternatively, you can return a handle in the form ",
 Cell[BoxData[
  RowBox[{"\"\<\!\(\*
StyleBox[\"com\", \"TI\"]\).\!\(\*
StyleBox[\"company\", \"TI\"]\).\!\(\*
StyleBox[\"class\", \"TI\"]\)\>\"", "[", "\[Ellipsis]", 
   StyleBox[" ", "TI"], "]"}]], "InlineFormula"],
 " or use similar means."
}], "Text",
 CellID->1188106456],

Cell[TextData[{
 "Devices of this class print open arguments. The ",
 Cell[BoxData[
  StyleBox["ihandle", "TI"]], "InlineFormula"],
 " parameter is not used."
}], "MathCaption",
 CellID->916361059],

Cell[BoxData[
 RowBox[{
  RowBox[{"open", "[", 
   RowBox[{"_", ",", "args___"}], "]"}], " ", ":=", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"{", "args", "}"}], "]"}], ";", 
    RowBox[{"CreateUUID", "[", "]"}]}], ")"}]}]], "Input",
 CellLabel->"In[20]:=",
 CellID->147803265],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<print\>\"", ",", 
    RowBox[{"\"\<OpenFunction\>\"", "\[Rule]", "open"}]}], "]"}], 
  ";"}]], "Input",
 CellLabel->"In[22]:=",
 CellID->730615773],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", 
   RowBox[{"\"\<print\>\"", ",", "1"}], "]"}]}]], "Input",
 CellLabel->"In[23]:=",
 CellID->1638378923],

Cell[BoxData[
 RowBox[{"{", "1", "}"}]], "Print",
 CellLabel->"During evaluation of In[23]:=",
 CellID->1471920373],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"print\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (1)", "Not connected (1)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"print", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{111., {5., 10.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"print\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (1)", "Not connected (1)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"print", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"print", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"print", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{328, 66},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[23]=",
 CellID->1701579218]
}, Open  ]],

Cell["\<\
Retrieve the device handle and use it to get back the device object.\
\>", "MathCaption",
 CellID->2128084428],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceFramework`DeviceHandle", "[", "dev", "]"}]], "Input",
 CellLabel->"In[24]:=",
 CellID->374840611],

Cell[BoxData["\<\"08b1a825-408b-46fc-95b7-14afedcf8a92\"\>"], "Output",
 ImageSize->{256, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[24]=",
 CellID->402189827]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceFramework`DeviceObjectFromHandle", "[", "%", "]"}]], "Input",
 CellLabel->"In[25]:=",
 CellID->1883714651],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"print\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (1)", "Not connected (1)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"print", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{111., {5., 10.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"print\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (1)", "Not connected (1)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"print", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"print", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"print", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{328, 66},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[25]=",
 CellID->1473385280]
}, Open  ]],

Cell[TextData[{
 "If ",
 Cell[BoxData["\"\<OpenFunction\>\""], "InlineFormula"],
 " is omitted, the framework assigns a random device handle to any new device \
in the class."
}], "Text",
 CellID->148362392],

Cell[TextData[{
 "This driver does not implement ",
 Cell[BoxData["\"\<OpenFunction\>\""], "InlineFormula"],
 "."
}], "MathCaption",
 CellID->298208177],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", "\"\<nopen\>\"", "]"}], 
  ";"}]], "Input",
 CellLabel->"In[88]:=",
 CellID->1905482388],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", "\"\<nopen\>\"", "]"}]}]], "Input",
 CellLabel->"In[89]:=",
 CellID->1424379726],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"nopen\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"nopen", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"nopen\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"nopen", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"nopen", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"nopen", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[89]=",
 CellID->1549841773]
}, Open  ]],

Cell["\<\
You can still use the default device handle provided by the framework.\
\>", "MathCaption",
 CellID->18867405],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceHandle", "[", "dev", "]"}], "//", 
  "DeviceFramework`DeviceObjectFromHandle"}]], "Input",
 CellLabel->"In[91]:=",
 CellID->1361524348],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"nopen\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"nopen", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"nopen\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"nopen", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"nopen", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"nopen", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[91]=",
 CellID->513219705]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"PreconfigureFunction\"", "Subsection",
 CellID->525002300],

Cell[TextData[{
 "The function specified in ",
 Cell[BoxData[
  RowBox[{"\"\<PreconfigureFunction\>\"", "\[Rule]", 
   StyleBox["f", "TI"]}]], "InlineFormula"],
 " concludes the device opening sequence. For the device object ",
 Cell[BoxData[
  StyleBox["dev", "TI"]], "InlineFormula"],
 " that is about to be returned to the user, ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", 
   StyleBox["dev", "TI"], "]"}]], "InlineFormula"],
 " is guaranteed to be called at the end of a successful call to ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ", but before the initial configuration that re-applies top-level device \
properties of the device (if they have been set on the device previously) or \
sets ",
 ButtonBox["class properties",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/DevelopingDeviceDrivers#2011240917"],
 " (if they are defined by the driver). ",
 Cell[BoxData["\"\<PreconfigureFunction\>\""], "InlineFormula"],
 " must return a list of properties that has been configured by the driver, \
by ",
 Cell[BoxData["\"\<PreconfigureFunction\>\""], "InlineFormula"],
 " itself, ",
 Cell[BoxData["\"\<OpenFunction\>\""], "InlineFormula"],
 ", or any other function in the device opening sequence. These properties \
will not be changed further by the framework until ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " finishes. ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["All"]],"paclet:ref/All"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " or ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["None"]],"paclet:ref/None"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " can also be returned."
}], "Text",
 CellID->670175973],

Cell[TextData[{
 "This driver sets a device property ",
 Cell[BoxData["\"\<parity\>\""], "InlineFormula"],
 " based on the device ID."
}], "MathCaption",
 CellID->95849696],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<p\>\"", ",", 
    RowBox[{"\"\<Properties\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<parity\>\"", "\[Rule]", "Null"}], "}"}]}], ",", 
    RowBox[{"\"\<PreconfigureFunction\>\"", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", "\"\<parity\>\"", "]"}], "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"EvenQ", "[", 
             RowBox[{"DeviceFramework`DeviceID", "[", "#", "]"}], "]"}], ",", 
            "\"\<even\>\"", ",", "\"\<odd\>\""}], "]"}]}], ";", "All"}], 
        ")"}], "&"}], ")"}]}]}], "]"}], ";"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->333105422],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", "\"\<p\>\"", "]"}]}]], "Input",
 CellLabel->"In[6]:=",
 CellID->1995630701],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"p\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"p", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"p\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"p", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 1, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 1}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{67., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"p", 1}], Devices`DeviceAPI`DeviceDump`props$$ = {
              "parity"}, Devices`DeviceAPI`DeviceDump`vals$$ = {"odd"}, 
              Devices`DeviceAPI`DeviceDump`reg$$ = True}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm],
               ImageSizeCache->{72., {10., 15.}}],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"p", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[6]=",
 CellID->99541551]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "[", "\"\<parity\>\"", "]"}]], "Input",
 CellLabel->"In[7]:=",
 CellID->313777176],

Cell[BoxData["\<\"odd\"\>"], "Output",
 ImageSize->{25, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[7]=",
 CellID->105086644]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData["\"\<PreconfigureFunction\>\""], "InlineFormula"],
 " is also a convenient place to set status labels for the open and closed \
device states. "
}], "Text",
 CellID->383903556],

Cell["\<\
This driver automatically closes an open device after 20 seconds and displays \
a running indicator of time until close. \
\>", "MathCaption",
 CellID->1377941831],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<timeout\>\"", ",", 
    RowBox[{"\"\<PreconfigureFunction\>\"", "\[Rule]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"max", "=", "20"}], "}"}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"$timeout", "=", "0"}], ";", 
          RowBox[{
           RowBox[{"DeviceFramework`DeviceStatusLabels", "[", "#", "]"}], "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"ProgressIndicator", "[", 
              RowBox[{
               RowBox[{"Dynamic", "[", "$timeout", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "max"}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"20", ",", "3"}], "}"}]}]}], "]"}], ",", 
             "\"\<Closed\>\""}], "}"}]}], ";", 
          RowBox[{"RunScheduledTask", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"++", "$timeout"}], "\[GreaterEqual]", "max"}], ",", 
              RowBox[{"DeviceClose", "[", "#", "]"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"0.1", ",", "max"}], "}"}], ",", 
            RowBox[{"\"\<AutoRemove\>\"", "\[Rule]", "True"}]}], "]"}], ";", 
          "None"}], ")"}], "&"}]}], "]"}]}]}], "]"}], ";"}]], "Input",
 CellLabel->"In[102]:=",
 CellID->2113485805],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", "\"\<timeout\>\"", "]"}]}]], "Input",
 CellLabel->"In[106]:=",
 CellID->1976403255],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"timeout\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                ProgressIndicator[
                 Dynamic[$CellContext`$timeout], {0, 20}, 
                 ImageSize -> {20, 3}], "Closed"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"timeout", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{51., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"timeout\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                ProgressIndicator[
                 Dynamic[$CellContext`$timeout], {0, 20}, 
                 ImageSize -> {20, 3}], "Closed"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"timeout", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"timeout", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"timeout", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{301, 62},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[106]=",
 CellID->977956499]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"ConfigureFunction\"", "Subsection",
 CellID->372300196],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<ConfigureFunction\>\"", "\[Rule]", 
   StyleBox["f", "TI"]}]], "InlineFormula"],
 " specifies that ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      StyleBox["ihandle", "TI"], ",", 
      StyleBox["dhandle", "TI"]}], "}"}], ",", 
    StyleBox["args\[Ellipsis]", "TI"]}], "]"}]], "InlineFormula"],
 " should be called in response to the top-level command ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceConfigure"]],"paclet:ref/DeviceConfigure"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", 
   RowBox[{
    StyleBox["dev", "TI"], ",", 
    RowBox[{"{", 
     StyleBox["args\[Ellipsis]", "TI"], "}"}]}], "]"}]], "InlineFormula"],
 " to configure a device. The first argument ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    StyleBox["ihandle", "TI"], ",", 
    StyleBox["dhandle", "TI"]}], "}"}]], "InlineFormula"],
 ", where ",
 Cell[BoxData[
  StyleBox["ihandle", "TI"]], "InlineFormula"],
 " is the manager handle and ",
 Cell[BoxData[
  StyleBox["dhandle", "TI"]], "InlineFormula"],
 " is the device handle, is ",
 ButtonBox["common to many driver functions",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/DevelopingDeviceDrivers#1682897120"],
 ". The return value of this function is not used, unless it is ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["$Failed"]],"paclet:ref/$Failed"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 "."
}], "Text",
 CellID->1629530461],

Cell[TextData[{
 Cell[BoxData["\"\<ConfigureFunction\>\""], "InlineFormula"],
 " in this driver sets a top-level property."
}], "MathCaption",
 CellID->1776373297],

Cell[BoxData[
 RowBox[{
  RowBox[{"config", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"_", ",", "h_"}], "}"}], ",", "assoc_"}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"dev", "=", 
      RowBox[{"DeviceFramework`DeviceObjectFromHandle", "[", "h", "]"}]}], 
     "}"}], ",", 
    RowBox[{
     RowBox[{"dev", "[", "\"\<p\>\"", "]"}], "=", 
     RowBox[{"Lookup", "[", 
      RowBox[{"assoc", ",", "\"\<p\>\""}], "]"}]}]}], "]"}]}]], "Input",
 CellLabel->"In[1]:=",
 CellID->867505495],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<c\>\"", ",", 
    RowBox[{"\"\<Properties\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<p\>\"", "\[Rule]", "1"}], "}"}]}], ",", 
    RowBox[{"\"\<ConfigureFunction\>\"", "\[Rule]", "config"}]}], "]"}], 
  ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->1559217387],

Cell[TextData[{
 "Open a device and configure it by calling ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceConfigure"]],"paclet:ref/DeviceConfigure"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 "."
}], "MathCaption",
 CellID->898374982],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", "\"\<c\>\"", "]"}]}]], "Input",
 CellLabel->"In[3]:=",
 CellID->30800417],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"c\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"c", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"c\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"c", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"c", 1}], Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"c", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 62},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->1775435693]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceConfigure", "[", 
  RowBox[{"dev", ",", 
   RowBox[{"\"\<p\>\"", "\[Rule]", "\"\<new\>\""}]}], "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->392705582],

Cell[BoxData[
 RowBox[{"\<\"p\"\>", "\[Rule]", "\<\"new\"\>"}]], "Output",
 ImageSize->{49, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->462417186]
}, Open  ]],

Cell["This is the new value of the property.", "MathCaption",
 CellID->102326609],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "[", "\"\<p\>\"", "]"}]], "Input",
 CellLabel->"In[37]:=",
 CellID->1749980217],

Cell[BoxData["\<\"new\"\>"], "Output",
 ImageSize->{25, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[37]=",
 CellID->681820133]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"ReadFunction\"", "Subsection",
 CellID->75304213],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<ReadFunction\>\"", "\[Rule]", 
   StyleBox["f", "TI"]}]], "InlineFormula"],
 " specifies that ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      StyleBox["ihandle", "TI"], ",", 
      StyleBox["dhandle", "TI"]}], "}"}], ",", 
    StyleBox["args\[Ellipsis]", "TI"]}], "]"}]], "InlineFormula"],
 " should be called in response to the top-level command ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceRead"]],"paclet:ref/DeviceRead"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", 
   RowBox[{
    StyleBox["dev", "TI"], ",", 
    RowBox[{"{", 
     StyleBox["args\[Ellipsis]", "TI"], "}"}]}], "]"}]], "InlineFormula"],
 " to read data from a device. The first argument ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    StyleBox["ihandle", "TI"], ",", 
    StyleBox["dhandle", "TI"]}], "}"}]], "InlineFormula"],
 ", where ",
 Cell[BoxData[
  StyleBox["ihandle", "TI"]], "InlineFormula"],
 " is the manager handle and ",
 Cell[BoxData[
  StyleBox["dhandle", "TI"]], "InlineFormula"],
 " is the device handle, is ",
 ButtonBox["common to many driver functions",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/DevelopingDeviceDrivers#1682897120"],
 ". The return value of this function will be passed on to the user as an \
output of the ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceRead"]],"paclet:ref/DeviceRead"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", "]"}]], "InlineFormula"],
 " command."
}], "Text",
 CellID->1752455336],

Cell[TextData[{
 "Devices of this class read consecutive characters from a string. The \
current string position for each device is stored in an association, with \
device handles as keys. Keys are added to the association in ",
 Cell[BoxData["\"\<OpenFunction\>\""], "InlineFormula"],
 " and removed in ",
 Cell[BoxData["\"\<CloseFunction\>\""], "InlineFormula"],
 "."
}], "MathCaption",
 CellID->959667874],

Cell[BoxData[
 RowBox[{
  RowBox[{"$string", "=", "\"\<abcde\>\""}], ";"}]], "Input",
 CellLabel->"In[130]:=",
 CellID->1069478543],

Cell[BoxData[
 RowBox[{
  RowBox[{"$positions", "=", 
   RowBox[{"<|", "|>"}]}], ";"}]], "Input",
 CellLabel->"In[131]:=",
 CellID->1225421999],

Cell[BoxData[
 RowBox[{
  RowBox[{"read", "[", 
   RowBox[{"{", 
    RowBox[{"_", ",", "h_"}], "}"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"StringTake", "[", 
    RowBox[{"$string", ",", 
     RowBox[{"{", 
      RowBox[{"++", 
       RowBox[{"$positions", "[", "h", "]"}]}], "}"}]}], "]"}], "/;", 
   RowBox[{
    RowBox[{"$positions", "[", "h", "]"}], "<", "5"}]}]}]], "Input",
 CellLabel->"In[132]:=",
 CellID->1701259630],

Cell[BoxData[
 RowBox[{
  RowBox[{"read", "[", "___", "]"}], ":=", "$Failed"}]], "Input",
 CellLabel->"In[133]:=",
 CellID->247871197],

Cell[BoxData[
 RowBox[{
  RowBox[{"open", "[", "___", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"h", "=", 
      RowBox[{"CreateUUID", "[", "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"$positions", "[", "h", "]"}], "=", "0"}], ";", "h"}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[134]:=",
 CellID->1968251663],

Cell[BoxData[
 RowBox[{
  RowBox[{"close", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"_", ",", "h_"}], "}"}], ",", "___"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"$positions", "[", "h", "]"}], "=."}]}]], "Input",
 CellLabel->"In[135]:=",
 CellID->567601653],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<r\>\"", ",", 
    RowBox[{"\"\<ReadFunction\>\"", "\[Rule]", "read"}], ",", 
    RowBox[{"\"\<OpenFunction\>\"", "\[Rule]", "open"}], ",", 
    RowBox[{"\"\<CloseFunction\>\"", "\[Rule]", "close"}]}], "]"}], 
  ";"}]], "Input",
 CellLabel->"In[136]:=",
 CellID->1773181174],

Cell["Open a device and read a character from it.", "MathCaption",
 CellID->558621997],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev1", "=", 
  RowBox[{"DeviceOpen", "[", 
   RowBox[{"\"\<r\>\"", ",", "1"}], "]"}]}]], "Input",
 CellLabel->"In[137]:=",
 CellID->2108882542],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"r\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (1)", "Not connected (1)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"r", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{111., {5., 10.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"r\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (1)", "Not connected (1)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"r", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"r", 1}], Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"r", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{328, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[137]=",
 CellID->1212769815]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceRead", "[", "dev1", "]"}]], "Input",
 CellLabel->"In[138]:=",
 CellID->213372004],

Cell[BoxData["\<\"a\"\>"], "Output",
 ImageSize->{11, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[138]=",
 CellID->1254987028]
}, Open  ]],

Cell["Open another device and read several characters.", "MathCaption",
 CellID->692771366],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev2", "=", 
  RowBox[{"DeviceOpen", "[", 
   RowBox[{"\"\<r\>\"", ",", "2"}], "]"}]}]], "Input",
 CellLabel->"In[139]:=",
 CellID->1899497975],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"r\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (2)", "Not connected (2)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"r", 2}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{111., {5., 10.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"r\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (2)", "Not connected (2)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"r", 2}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"r", 2}], Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"r", 2}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{328, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[139]=",
 CellID->2130082409]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceReadList", "[", 
  RowBox[{"dev2", ",", "3"}], "]"}]], "Input",
 CellLabel->"In[140]:=",
 CellID->459396761],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>"}], "}"}]], "Output",
 ImageSize->{61, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[140]=",
 CellID->1742652573]
}, Open  ]],

Cell["\<\
The current read counters are remembered for each open device. \
\>", "MathCaption",
 CellID->2098561760],

Cell[CellGroupData[{

Cell[BoxData["$positions"], "Input",
 CellLabel->"In[141]:=",
 CellID->256081992],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"0bc917c3-22a5-44be-8e0b-dea2cd2f7985\"\>", "\[Rule]", "1"}], 
   ",", 
   RowBox[{"\<\"36c8bd52-9e61-4d28-b5a9-9621bc89bfa4\"\>", "\[Rule]", "3"}]}],
   "\[RightAssociation]"}]], "Output",
 ImageSize->{300, 33},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[141]=",
 CellID->1379816625]
}, Open  ]],

Cell["\<\
Reading from the first device again gives the next characters, until the \
device reads the string completely. \
\>", "MathCaption",
 CellID->502658409],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceReadList", "[", 
  RowBox[{"dev1", ",", "5"}], "]"}]], "Input",
 CellLabel->"In[142]:=",
 CellID->2126696412],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", ",", "\<\"e\"\>", 
   ",", "$Failed"}], "}"}]], "Output",
 ImageSize->{139, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[142]=",
 CellID->2049596069]
}, Open  ]],

Cell["Closing a device clears its counter.", "MathCaption",
 CellID->412810956],

Cell[BoxData[
 RowBox[{"DeviceClose", "[", "dev1", "]"}]], "Input",
 CellLabel->"In[143]:=",
 CellID->1741557682],

Cell[CellGroupData[{

Cell[BoxData["$positions"], "Input",
 CellLabel->"In[144]:=",
 CellID->1089342576],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"36c8bd52-9e61-4d28-b5a9-9621bc89bfa4\"\>", "\[Rule]", "3"}], 
  "\[RightAssociation]"}]], "Output",
 ImageSize->{304, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[144]=",
 CellID->1923433803]
}, Open  ]],

Cell[TextData[{
 "Your implementation of ",
 Cell[BoxData["\"\<ReadFunction\>\""], "InlineFormula"],
 " will be among those that benefit most from a robust argument checking. \
When necessary, the required error messages can be assigned to the symbol \
corresponding to your class name in the ",
 StyleBox[ButtonBox["DeviceFramework`Devices`",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/DevelopingDeviceDrivers#163433197"], 
  "InlineCode"],
 " context."
}], "Text",
 CellID->1246205090],

Cell["\<\
This driver lets devices read either real or integer random values and \
implements a rudimentary argument checking. \
\>", "MathCaption",
 CellID->1080588730],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeviceFramework`Devices`random", "::", "arg"}], "=", 
   "\"\<Argument `` is not \\\"Real\\\" or \\\"Integer\\\".\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[237]:=",
 CellID->1222975879],

Cell[BoxData[
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"DeviceFramework`Devices`random", "::", "argx"}], "MessageName"], 
   StyleBox["=", "MessageName"], 
   "\"\<DeviceRead called with `` arguments. For devices in the class \
\\\"``\\\", 2 arguments are expected.\>\""}], ";"}]], "Input",
 CellLabel->"In[15]:=",
 CellID->190157466],

Cell[BoxData[
 RowBox[{
  RowBox[{"rand", "[", 
   RowBox[{"_", ",", "\"\<Real\>\""}], "]"}], ":=", 
  RowBox[{"RandomReal", "[", "]"}]}]], "Input",
 CellLabel->"In[240]:=",
 CellID->185582431],

Cell[BoxData[
 RowBox[{
  RowBox[{"rand", "[", 
   RowBox[{"_", ",", "\"\<Integer\>\""}], "]"}], ":=", 
  RowBox[{"RandomInteger", "[", "]"}]}]], "Input",
 CellLabel->"In[241]:=",
 CellID->937662373],

Cell[BoxData[
 RowBox[{
  RowBox[{"rand", "[", 
   RowBox[{"_", ",", "x_"}], "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Message", "[", 
     RowBox[{
      RowBox[{"DeviceFramework`Devices`random", "::", "arg"}], ",", "x"}], 
     "]"}], ";", "$Failed"}], ")"}]}]], "Input",
 CellLabel->"In[242]:=",
 CellID->1056501325],

Cell[BoxData[
 RowBox[{
  RowBox[{"rand", "[", 
   RowBox[{"_", ",", "x__"}], "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Message", "[", 
     RowBox[{
      RowBox[{"DeviceFramework`Devices`random", "::", "arg"}], ",", 
      RowBox[{"{", "x", "}"}]}], "]"}], ";", "$Failed"}], ")"}]}]], "Input",
 CellLabel->"In[243]:=",
 CellID->296700468],

Cell[BoxData[
 RowBox[{
  RowBox[{"rand", "[", "_", "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Message", "[", 
     RowBox[{
      RowBox[{"DeviceFramework`Devices`random", "::", "argx"}], ",", "1", 
      ",", "\"\<random\>\""}], "]"}], ";", "$Failed"}], ")"}]}]], "Input",
 CellLabel->"In[244]:=",
 CellID->63504324],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<random\>\"", ",", 
    RowBox[{"\"\<ReadFunction\>\"", "\[Rule]", "rand"}]}], "]"}], 
  ";"}]], "Input",
 CellLabel->"In[245]:=",
 CellID->17800909],

Cell[TextData[{
 "Open a device and call ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceRead"]],"paclet:ref/DeviceRead"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " with legal arguments."
}], "MathCaption",
 CellID->394254680],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", "\"\<random\>\"", "]"}]}]], "Input",
 CellLabel->"In[247]:=",
 CellID->679650630],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"random\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"random", 1}],
                Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"random\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"random", 1}],
                Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"random", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"random", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 62},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[247]=",
 CellID->1238432497]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceRead", "[", 
  RowBox[{"dev", ",", "\"\<Real\>\""}], "]"}]], "Input",
 CellLabel->"In[248]:=",
 CellID->1251355765],

Cell[BoxData["0.01068795464223693`"], "Output",
 ImageSize->{60, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[248]=",
 CellID->923470355]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceRead", "[", 
  RowBox[{"dev", ",", "\"\<Integer\>\""}], "]"}]], "Input",
 CellLabel->"In[249]:=",
 CellID->1091565342],

Cell[BoxData["1"], "Output",
 ImageSize->{11, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[249]=",
 CellID->901939616]
}, Open  ]],

Cell[TextData[{
 "Calling ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceRead"]],"paclet:ref/DeviceRead"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " with illegal arguments triggers errors."
}], "MathCaption",
 CellID->2068809152],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceRead", "[", 
  RowBox[{"dev", ",", "\"\<foo\>\""}], "]"}]], "Input",
 CellLabel->"In[250]:=",
 CellID->1504137928],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"DeviceFramework`Devices`random", "::", "arg"}], "MessageName"], 
  ":", " ", "\<\"Argument \[NoBreak]\\!\\(\\\"foo\\\"\\)\[NoBreak] is not \
\\\"Real\\\" or \\\"Integer\\\".\"\>"}]], "Message", "MSG",
 CellLabel->"During evaluation of In[250]:=",
 CellID->1959545586],

Cell[BoxData["$Failed"], "Output",
 ImageSize->{53, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[250]=",
 CellID->273453510]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceRead", "[", 
  RowBox[{"dev", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<foo\>\"", ",", "\"\<bar\>\""}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[251]:=",
 CellID->567689087],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"DeviceFramework`Devices`random", "::", "arg"}], "MessageName"], 
  ":", " ", "\<\"Argument \[NoBreak]\\!\\({\\\"foo\\\", \\\"bar\\\"}\\)\
\[NoBreak] is not \\\"Real\\\" or \\\"Integer\\\".\"\>"}]], "Message", "MSG",
 CellLabel->"During evaluation of In[251]:=",
 CellID->318137990],

Cell[BoxData["$Failed"], "Output",
 ImageSize->{53, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[251]=",
 CellID->1858400547]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceRead", "[", "dev", "]"}]], "Input",
 CellLabel->"In[252]:=",
 CellID->1399236465],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"DeviceFramework`Devices`random", "::", "argx"}], "MessageName"], 
  ":", " ", "\<\"DeviceRead called with \[NoBreak]\\!\\(1\\)\[NoBreak] \
argument. For devices in the class \\\"\[NoBreak]\\!\\(\\\"random\\\"\\)\
\[NoBreak]\\\", 2 arguments are expected. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/argx\\\", ButtonNote -> \
\\\"DeviceFramework`Devices`random::argx\\\"]\\)\"\>"}]], "Message", "MSG",
 CellLabel->"During evaluation of In[252]:=",
 CellID->1135831461],

Cell[BoxData["$Failed"], "Output",
 ImageSize->{53, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[252]=",
 CellID->937226844]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"ReadBufferFunction\"", "Subsection",
 CellID->509461683],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<ReadBufferFunction\>\"", "\[Rule]", 
   StyleBox["f", "TI"]}]], "InlineFormula"],
 " specifies that ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      StyleBox["ihandle", "TI"], ",", 
      StyleBox["dhandle", "TI"]}], "}"}], ",", 
    StyleBox["args\[Ellipsis]", "TI"]}], "]"}]], "InlineFormula"],
 " should be called in response to the top-level command ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceReadBuffer"]],"paclet:ref/DeviceReadBuffer"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", 
   RowBox[{
    StyleBox["dev", "TI"], ",", 
    RowBox[{"{", 
     StyleBox["args\[Ellipsis]", "TI"], "}"}]}], "]"}]], "InlineFormula"],
 " to read data from a device buffer. The first argument ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    StyleBox["ihandle", "TI"], ",", 
    StyleBox["dhandle", "TI"]}], "}"}]], "InlineFormula"],
 ", where ",
 Cell[BoxData[
  StyleBox["ihandle", "TI"]], "InlineFormula"],
 " is the manager handle and ",
 Cell[BoxData[
  StyleBox["dhandle", "TI"]], "InlineFormula"],
 " is the device handle, is ",
 ButtonBox["common to many driver functions",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/DevelopingDeviceDrivers#1682897120"],
 ". The return value of this function will be passed on to the user as an \
output of the ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceReadBuffer"]],"paclet:ref/DeviceReadBuffer"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", "]"}]], "InlineFormula"],
 " command."
}], "Text",
 CellID->873838021],

Cell[TextData[{
 "A typical example of using ",
 Cell[BoxData["\"\<ReadBufferFunction\>\""], "InlineFormula"],
 " is reading a sequence of bytes from a serial device."
}], "Text",
 CellID->941636747]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"WriteFunction\"", "Subsection",
 CellID->372312379],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<WriteFunction\>\"", "\[Rule]", 
   StyleBox["f", "TI"]}]], "InlineFormula"],
 " specifies that ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      StyleBox["ihandle", "TI"], ",", 
      StyleBox["dhandle", "TI"]}], "}"}], ",", 
    StyleBox["args\[Ellipsis]", "TI"]}], "]"}]], "InlineFormula"],
 " should be called in response to the top-level command ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceWrite"]],"paclet:ref/DeviceWrite"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", 
   RowBox[{
    StyleBox["dev", "TI"], ",", 
    RowBox[{"{", 
     StyleBox["args\[Ellipsis]", "TI"], "}"}]}], "]"}]], "InlineFormula"],
 " to write data to a device. The first argument ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    StyleBox["ihandle", "TI"], ",", 
    StyleBox["dhandle", "TI"]}], "}"}]], "InlineFormula"],
 ", where ",
 Cell[BoxData[
  StyleBox["ihandle", "TI"]], "InlineFormula"],
 " is the manager handle and ",
 Cell[BoxData[
  StyleBox["dhandle", "TI"]], "InlineFormula"],
 " is the device handle, is ",
 ButtonBox["common to many driver functions",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/DevelopingDeviceDrivers#1682897120"],
 ". The return value of this function is not used, unless it is ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["$Failed"]],"paclet:ref/$Failed"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 "."
}], "Text",
 CellID->856676189],

Cell[TextData[{
 "This driver creates a new notebook for every call to ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceWrite"]],"paclet:ref/DeviceWrite"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 "."
}], "MathCaption",
 CellID->1290614491],

Cell[BoxData[
 RowBox[{
  RowBox[{"write", "[", 
   RowBox[{"_", ",", "args___"}], "]"}], ":=", 
  RowBox[{"CreateDocument", "[", 
   RowBox[{"{", "args", "}"}], "]"}]}]], "Input",
 CellLabel->"In[44]:=",
 CellID->292030307],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<w\>\"", ",", 
    RowBox[{"\"\<WriteFunction\>\"", "\[Rule]", "write"}]}], "]"}], 
  ";"}]], "Input",
 CellLabel->"In[45]:=",
 CellID->122296298],

Cell["Open a device and execute a write operation.", "MathCaption",
 CellID->2019627722],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", "\"\<w\>\"", "]"}]}]], "Input",
 CellLabel->"In[47]:=",
 CellID->1279537321],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"w\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"w", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"w\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"w", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"w", 1}], Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"w", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 62},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[47]=",
 CellID->1492017210]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceWrite", "[", 
  RowBox[{"dev", ",", "\"\<Hello world\>\""}], "]"}]], "Input",
 CellLabel->"In[48]:=",
 CellID->109462606],

Cell[BoxData["\<\"Hello world\"\>"], "Output",
 ImageSize->{81, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[48]=",
 CellID->166702451]
}, Open  ]],

Cell[TextData[{
 "If your device writes values of several parameters, it is common to supply \
their values to ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceWrite"]],"paclet:ref/DeviceWrite"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " as an association or a set of rules. The job of parsing such rules then \
falls on your implementation of ",
 Cell[BoxData["\"\<WriteFunction\>\""], "InlineFormula"],
 "."
}], "Text",
 CellID->426397350],

Cell[TextData[{
 "Parse rules in ",
 Cell[BoxData["\"\<WriteFunction\>\""], "InlineFormula"],
 ". "
}], "MathCaption",
 CellID->307331411],

Cell[BoxData[
 RowBox[{
  RowBox[{"writer", "[", 
   RowBox[{"_", ",", "assoc_"}], "]"}], ":=", 
  RowBox[{"CreateDocument", "[", 
   RowBox[{"MapThread", "[", 
    RowBox[{"TextCell", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Lookup", "[", 
          RowBox[{"assoc", ",", "#", ",", "\"\<\>\""}], "]"}], ",", "#"}], 
        "}"}], "&"}], "@", 
      RowBox[{"{", 
       RowBox[{"\"\<Title\>\"", ",", "\"\<Section\>\"", ",", "\"\<Text\>\""}],
        "}"}]}]}], " ", "]"}], "]"}]}]], "Input",
 CellLabel->"In[75]:=",
 CellID->64120321],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<wr\>\"", ",", 
    RowBox[{"\"\<WriteFunction\>\"", "\[Rule]", "writer"}]}], "]"}], 
  ";"}]], "Input",
 CellLabel->"In[76]:=",
 CellID->1770961704],

Cell["\<\
Open a device and execute a write operation to create a new notebook with the \
specified text and title and a blank section cell.\
\>", "MathCaption",
 CellID->430011708],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", "\"\<wr\>\"", "]"}]}]], "Input",
 CellLabel->"In[77]:=",
 CellID->924304201],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"wr\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"wr", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"wr\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"wr", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"wr", 1}], Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"wr", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 62},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[77]=",
 CellID->1655332254]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceWrite", "[", 
  RowBox[{"dev", ",", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Title\>\"", "->", "\"\<Hello\>\""}], ",", 
     RowBox[{"\"\<Text\>\"", "\[Rule]", "\"\<world\>\""}]}], "|>"}]}], 
  "]"}]], "Input",
 CellLabel->"In[79]:=",
 CellID->367169339],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Title\"\>", "\[Rule]", "\<\"Hello\"\>"}], ",", 
   RowBox[{"\<\"Text\"\>", "\[Rule]", "\<\"world\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 ImageSize->{206, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[79]=",
 CellID->715545525]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"WriteBufferFunction\"", "Subsection",
 CellID->1318946931],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<WriteBufferFunction\>\"", "\[Rule]", 
   StyleBox["f", "TI"]}]], "InlineFormula"],
 " specifies that ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      StyleBox["ihandle", "TI"], ",", 
      StyleBox["dhandle", "TI"]}], "}"}], ",", 
    StyleBox["args\[Ellipsis]", "TI"]}], "]"}]], "InlineFormula"],
 " should be called in response to the top-level command ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceWriteBuffer"]],"paclet:ref/DeviceWriteBuffer"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", 
   RowBox[{
    StyleBox["dev", "TI"], ",", 
    RowBox[{"{", 
     StyleBox["args\[Ellipsis]", "TI"], "}"}]}], "]"}]], "InlineFormula"],
 " to write data to a device buffer. The first argument ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    StyleBox["ihandle", "TI"], ",", 
    StyleBox["dhandle", "TI"]}], "}"}]], "InlineFormula"],
 ", where ",
 Cell[BoxData[
  StyleBox["ihandle", "TI"]], "InlineFormula"],
 " is the manager handle and ",
 Cell[BoxData[
  StyleBox["dhandle", "TI"]], "InlineFormula"],
 " is the device handle, is ",
 ButtonBox["common to many driver functions",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/DevelopingDeviceDrivers#1682897120"],
 ". The return value of this function is not used, unless it is ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["$Failed"]],"paclet:ref/$Failed"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 "."
}], "Text",
 CellID->1447920800],

Cell[TextData[{
 "A typical example of using ",
 Cell[BoxData["\"\<WriteBufferFunction\>\""], "InlineFormula"],
 " is writing a sequence of bytes to a serial device."
}], "Text",
 CellID->2067681443]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"ExecuteFunction\"", "Subsection",
 CellID->1550760166],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<ExecuteFunction\>\"", "\[Rule]", 
   StyleBox["f", "TI"]}]], "InlineFormula"],
 " specifies that ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      StyleBox["ihandle", "TI"], ",", 
      StyleBox["dhandle", "TI"]}], "}"}], ",", "\"\<\!\(\*
StyleBox[\"command\", \"TI\"]\)\>\"", ",", 
    StyleBox["args\[Ellipsis]", "TI"]}], "]"}]], "InlineFormula"],
 " should be called in response to the top-level command ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceExecute"]],"paclet:ref/DeviceExecute"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", 
   RowBox[{
    StyleBox["dev", "TI"], ",", "\"\<\!\(\*
StyleBox[\"command\", \"TI\"]\)\>\"", ",", 
    RowBox[{"{", 
     StyleBox["args\[Ellipsis]", "TI"], "}"}]}], "]"}]], "InlineFormula"],
 " to execute a command on a device. The first argument ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    StyleBox["ihandle", "TI"], ",", 
    StyleBox["dhandle", "TI"]}], "}"}]], "InlineFormula"],
 ", where ",
 Cell[BoxData[
  StyleBox["ihandle", "TI"]], "InlineFormula"],
 " is the manager handle and ",
 Cell[BoxData[
  StyleBox["dhandle", "TI"]], "InlineFormula"],
 " is the device handle, is ",
 ButtonBox["common to many driver functions",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/DevelopingDeviceDrivers#1682897120"],
 ". The return value of this function will be passed on to the user as an \
output of the ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceExecute"]],"paclet:ref/DeviceExecute"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", "]"}]], "InlineFormula"],
 " command."
}], "Text",
 CellID->807608835]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"ExecuteAsynchronousFunction\"", "Subsection",
 CellID->168337089],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<ExecuteAsynchronousFunction\>\"", "\[Rule]", 
   StyleBox["f", "TI"]}]], "InlineFormula"],
 " specifies that ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      StyleBox["ihandle", "TI"], ",", 
      StyleBox["dhandle", "TI"]}], "}"}], ",", "\"\<\!\(\*
StyleBox[\"command\", \"TI\"]\)\>\"", ",", 
    StyleBox["args\[Ellipsis]", "TI"], ",", 
    StyleBox["fun", "TI"]}], "]"}]], "InlineFormula"],
 " should be called in response to the top-level command ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceExecuteAsynchronous"]],
     "paclet:ref/DeviceExecuteAsynchronous"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", 
   RowBox[{
    StyleBox["dev", "TI"], ",", "\"\<\!\(\*
StyleBox[\"command\", \"TI\"]\)\>\"", ",", 
    RowBox[{"{", 
     StyleBox["args\[Ellipsis]", "TI"], "}"}], ",", 
    StyleBox["fun", "TI"]}], "]"}]], "InlineFormula"],
 " to start an asynchronous execution of the specified command on a device. \
The first argument ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    StyleBox["ihandle", "TI"], ",", 
    StyleBox["dhandle", "TI"]}], "}"}]], "InlineFormula"],
 ", where ",
 Cell[BoxData[
  StyleBox["ihandle", "TI"]], "InlineFormula"],
 " is the manager handle and ",
 Cell[BoxData[
  StyleBox["dhandle", "TI"]], "InlineFormula"],
 " is the device handle, is ",
 ButtonBox["common to many driver functions",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/DevelopingDeviceDrivers#1682897120"],
 ". The function ",
 Cell[BoxData[
  StyleBox["f", "TI"]], "InlineFormula"],
 " will typically pass the user-specified handler function ",
 Cell[BoxData[
  StyleBox["fun", "TI"]], "InlineFormula"],
 " downstream to be executed when an event occurs. The return value of ",
 Cell[BoxData[
  StyleBox["f", "TI"]], "InlineFormula"],
 ", which should be ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["AsynchronousTaskObject"]],"paclet:ref/AsynchronousTaskObject"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", "]"}]], "InlineFormula"],
 " or a similar object, will be passed on to the user as an output of the ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceExecuteAsynchronous"]],
     "paclet:ref/DeviceExecuteAsynchronous"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", "]"}]], "InlineFormula"],
 " command."
}], "Text",
 CellID->1304849692],

Cell[TextData[{
 "If ",
 Cell[BoxData[
  StyleBox["command", "TI"]], "InlineFormula"],
 " is not supported, the function ",
 Cell[BoxData[
  StyleBox["f", "TI"]], "InlineFormula"],
 " must yield a ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["Missing"]],"paclet:ref/Missing"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", "]"}]], "InlineFormula"],
 " object or simply return unevaluated. In either case, the framework will \
issue an appropriate message. In case of other errors, ",
 Cell[BoxData[
  StyleBox["f", "TI"]], "InlineFormula"],
 " must issue a proper message and return ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["$Failed"]],"paclet:ref/$Failed"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ". In particular, this should happen if the specified command cannot be \
executed with the given arguments."
}], "Text",
 CellID->505770280],

Cell[TextData[{
 Cell[BoxData[
  StyleBox["command", "TI"]], "InlineFormula"],
 " can be ",
 Cell[BoxData["\"\<Read\>\""], "InlineFormula"],
 ", ",
 Cell[BoxData["\"\<Write\>\""], "InlineFormula"],
 ", ",
 Cell[BoxData["\"\<ReadBuffer\>\""], "InlineFormula"],
 ", ",
 Cell[BoxData["\"\<WriteBuffer\>\""], "InlineFormula"],
 ", or any other commands that are supported by the driver."
}], "Text",
 CellID->1490360631],

Cell["\<\
This driver asynchronously saves the content of a URL to a file.\
\>", "MathCaption",
 CellID->241866609],

Cell[BoxData[
 RowBox[{
  RowBox[{"async", "[", 
   RowBox[{
   "_", ",", "\"\<Save\>\"", ",", "url_", ",", "file_", ",", "opts___", ",", 
    "fun_"}], "]"}], ":=", 
  RowBox[{"URLSaveAsynchronous", "[", 
   RowBox[{"url", ",", "file", ",", "fun", ",", "opts"}], "]"}]}]], "Input",
 CellLabel->"In[1]:=",
 CellID->1434284997],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<async\>\"", ",", 
    RowBox[{"\"\<ExecuteAsynchronousFunction\>\"", "\[Rule]", "async"}]}], 
   "]"}], ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->524007004],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", "\"\<async\>\"", "]"}]}]], "Input",
 CellLabel->"In[3]:=",
 CellID->155279881],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"async\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"async", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"async\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"async", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"async", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"async", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->831074822]
}, Open  ]],

Cell["Prepare a progress function and a progress indicator.", "MathCaption",
 CellID->1058145675],

Cell[BoxData[
 RowBox[{
  RowBox[{"$progress", "=", " ", "0."}], ";"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->301299687],

Cell[BoxData[
 RowBox[{
  RowBox[{"pfun", "[", 
   RowBox[{"_", ",", "\"\<progress\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"now_", ",", "total_", ",", "__"}], "}"}]}], "]"}], ":=", 
  RowBox[{"Quiet", "[", 
   RowBox[{"$progress", " ", "=", " ", 
    RowBox[{"now", "/", "total"}]}], "]"}]}]], "Input",
 CellLabel->"In[5]:=",
 CellID->2119053189],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dynamic", "[", 
  RowBox[{"ProgressIndicator", "[", "$progress", "]"}], "]"}]], "Input",
 CellLabel->"In[6]:=",
 CellID->688568790],

Cell[BoxData[
 DynamicBox[ToBoxes[
   ProgressIndicator[$CellContext`$progress], StandardForm],
  ImageSizeCache->{196., {2., 8.}}]], "Output",
 ImageSize->{200, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[6]=",
 CellID->640893266]
}, Open  ]],

Cell["Start an asynchronous task and observe the progress. ", "MathCaption",
 CellID->942278918],

Cell[BoxData[{
 RowBox[{
  RowBox[{"url", "=", "\"\<http://exampledata.wolfram.com/10mb.dat\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"temp", "=", 
   RowBox[{"CreateTemporary", "[", "]"}]}], ";"}]}], "Input",
 CellLabel->"In[7]:=",
 CellID->852299100],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceExecuteAsynchronous", "[", 
  RowBox[{"dev", ",", "\"\<Save\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"url", ",", " ", "temp", ",", 
     RowBox[{"\"\<Progress\>\"", "\[Rule]", "True"}]}], "}"}], ",", " ", 
   "pfun"}], "]"}]], "Input",
 CellLabel->"In[9]:=",
 CellID->844173584],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"AsynchronousTaskObject", "[", 
   RowBox[{"\<\"http://exampledata.wolfram.com/10mb.dat\"\>", ",", "1", ",", 
    " ", "<>"}], "]"}],
  AsynchronousTaskObject[
  "http://exampledata.wolfram.com/10mb.dat", 1, 
   18645014016595844422]]], "Output",
 ImageSize->{496, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[9]=",
 CellID->1862631957]
}, Open  ]],

Cell["\<\
The framework issues an error message for unsupported asynchronous operations.\
\>", "MathCaption",
 CellID->1724177082],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceExecuteAsynchronous", "[", 
  RowBox[{"dev", ",", "\"\<foo\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"url", ",", " ", "temp", ",", 
     RowBox[{"\"\<Progress\>\"", "\[Rule]", "True"}]}], "}"}], ",", " ", 
   "pfun"}], "]"}]], "Input",
 CellLabel->"In[10]:=",
 CellID->1386178980],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"DeviceExecuteAsynchronous", "::", "noopa"}], "MessageName"], ":", 
  " ", "\<\"Asynchronous operation \[NoBreak]\\!\\(\\\"foo\\\"\\)\[NoBreak] \
is not supported for \[NoBreak]\\!\\(\\\"async\\\"\\)\[NoBreak]. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/DeviceExecuteAsynchronous\\\", \
ButtonNote -> \\\"DeviceExecuteAsynchronous::noopa\\\"]\\)\"\>"}]], "Message",\
 "MSG",
 CellLabel->"During evaluation of In[10]:=",
 CellID->1607514204],

Cell[BoxData["$Failed"], "Output",
 ImageSize->{53, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[10]=",
 CellID->2146947368]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"CloseFunction\"", "Subsection",
 CellID->911463099],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<CloseFunction\>\"", "\[Rule]", 
   StyleBox["f", "TI"]}]], "InlineFormula"],
 " specifies that ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", 
   RowBox[{"{", 
    RowBox[{
     StyleBox["ihandle", "TI"], ",", 
     StyleBox["dhandle", "TI"]}], "}"}], "]"}]], "InlineFormula"],
 " should be called in response to the top-level command ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceClose"]],"paclet:ref/DeviceClose"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", 
   StyleBox["dev", "TI"], "]"}]], "InlineFormula"],
 " to close\.10a device and free related resources. The first argument ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    StyleBox["ihandle", "TI"], ",", 
    StyleBox["dhandle", "TI"]}], "}"}]], "InlineFormula"],
 ", where ",
 Cell[BoxData[
  StyleBox["ihandle", "TI"]], "InlineFormula"],
 " is the manager handle and ",
 Cell[BoxData[
  StyleBox["dhandle", "TI"]], "InlineFormula"],
 " is the device handle, is ",
 ButtonBox["common to many driver functions",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/DevelopingDeviceDrivers#1682897120"],
 ". The return value of this function will be passed on to the user as an \
output of the ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceClose"]],"paclet:ref/DeviceClose"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", "]"}]], "InlineFormula"],
 " command. On successful completion, it is expected  to be ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Null"]],"paclet:ref/Null"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 "."
}], "Text",
 CellID->99884556],

Cell[TextData[{
 "The implementation of ",
 Cell[BoxData["\"\<CloseFunction\>\""], "InlineFormula"],
 " would typically involve closing all ports and sockets and releasing other \
resources, with the exception of those that are closed in ",
 Cell[BoxData["\"\<ReleaseFunction\>\""], "InlineFormula"],
 ". Streams opened in ",
 Cell[BoxData["\"\<OpenReadFunction\>\""], "InlineFormula"],
 " and ",
 Cell[BoxData["\"\<OpenWriteFunction\>\""], "InlineFormula"],
 " are automatically closed by the framework, provided that they can be \
closed using ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Close"]],"paclet:ref/Close"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ". If that is not the case, you should close the streams in ",
 Cell[BoxData["\"\<CloseFunction\>\""], "InlineFormula"],
 "."
}], "Text",
 CellID->959450842],

Cell[TextData[{
 "A closed device remains available in the current Wolfram Language session. \
Use ",
 Cell[BoxData["\"\<DeregisterOnClose\>\""], "InlineFormula"],
 " to completely remove the device after it is closed."
}], "Text",
 CellID->1577690347]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"ReleaseFunction\"", "Subsection",
 CellID->1264392131],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<ReleaseFunction\>\"", "\[Rule]", 
   StyleBox["f", "TI"]}]], "InlineFormula"],
 " specifies that ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", 
   StyleBox["obj", "TI"], "]"}]], "InlineFormula"],
 " should be called after ",
 Cell[BoxData["\"\<CloseFunction\>\""], "InlineFormula"],
 " during the operation of ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceClose"]],"paclet:ref/DeviceClose"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " to destroy the initialization object ",
 Cell[BoxData[
  StyleBox["obj", "TI"]], "InlineFormula"],
 " created by ",
 Cell[BoxData["\"\<OpenManagerFunction\>\""], "InlineFormula"],
 " and perform any other remaining cleanup tasks if necessary. The return \
value of this function is not used, unless it is ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["$Failed"]],"paclet:ref/$Failed"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 "."
}], "Text",
 CellID->254880194],

Cell[TextData[{
 "If you used ",
 Cell[BoxData["\"\<OpenManagerFunction\>\""], "InlineFormula"],
 " to open a WSTP connection to an external program, you could close the \
connection in ",
 Cell[BoxData["\"\<ReleaseFunction\>\""], "InlineFormula"],
 ". "
}], "Text",
 CellID->1689028440]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"DeregisterOnClose\"", "Subsection",
 CellID->1535191473],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<DeregisterOnClose\>\"", "\[Rule]", 
   TemplateBox[{Cell[
      TextData["True"]],"paclet:ref/True"},
    "RefLink",
    BaseStyle->"InlineFormula"]}]], "InlineFormula"],
 " specifies that ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceClose"]],"paclet:ref/DeviceClose"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " should not only release all external resources, but also completely remove \
the device from the current Wolfram Language session. By default, with ",
 Cell[BoxData[
  RowBox[{"\"\<DeregisterOnClose\>\"", "\[Rule]", 
   TemplateBox[{Cell[
      TextData["False"]],"paclet:ref/False"},
    "RefLink",
    BaseStyle->"InlineFormula"]}]], "InlineFormula"],
 ", the device remains available and can be re-opened with exactly the same \
parameters."
}], "Text",
 CellID->2094551653],

Cell[TextData[{
 "With the default value of the ",
 Cell[BoxData["\"\<DeregisterOnClose\>\""], "InlineFormula"],
 " option, a closed device remains available."
}], "MathCaption",
 CellID->1687712731],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", "\"\<dummy\>\"", "]"}], 
  ";"}]], "Input",
 CellLabel->"In[15]:=",
 CellID->1423860341],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", 
   RowBox[{"\"\<dummy\>\"", ",", "1"}], "]"}]}]], "Input",
 CellLabel->"In[16]:=",
 CellID->1410472666],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"dummy\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (1)", "Not connected (1)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"dummy", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{111., {5., 10.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"dummy\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (1)", "Not connected (1)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"dummy", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"dummy", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"dummy", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{328, 66},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[16]=",
 CellID->1943290620]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceClose", "[", "dev", "]"}], ";", " ", 
  RowBox[{"Devices", "[", "\"\<dummy\>\"", "]"}]}]], "Input",
 CellLabel->"In[17]:=",
 CellID->515863127],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   RowBox[{
    TagBox["DeviceObject",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False}, 
     PanelBox[
      PaneSelectorBox[{False->GridBox[{
         {
          PaneBox[
           ButtonBox[
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEBitmaps", "SquarePlusIconMedium"],
             ImageSizeCache->{12., {0., 12.}}],
            Appearance->None,
            ButtonFunction:>(Typeset`open$$ = True),
            Evaluator->Automatic,
            Method->"Preemptive"],
           Alignment->{Center, Center},
           
           ImageSize->
            Dynamic[{
             Automatic, 
              3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}]], 
          GraphicsBox[
           {Thickness[0.038461538461538464`], 
            {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
             FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
              3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
              1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
              0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
              25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
              24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
            {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
             JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
              3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
              1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
              0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
              25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
              24.605}, {25.5, 23.5}, {25.5, 2.5}}},
              CurveClosed->{1}]}, 
            {FaceForm[{RGBColor[
             0.45999999999999996`, 0.45999999999999996`, 
              0.45999999999999996`], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
              20.542}, {11.020999999999999`, 20.542}}}]}, 
            {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              15.979000000000001`, 16.541999999999998`}, {10.020999999999999`,
               16.541999999999998`}, {10.020999999999999`, 10.542}, {
              12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
              13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
              15.979000000000001`, 10.542}, {15.979000000000001`, 
              16.541999999999998`}}}]}},
           AspectRatio->Automatic,
           ImageSize->{Automatic, 
             Dynamic[3.5 CurrentValue["FontCapHeight"]]},
           PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
            {
             RowBox[{
              TagBox["\<\"Class: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["\<\"dummy\"\>",
               "SummaryItem"]}], 
             RowBox[{
              TagBox["\<\"ID: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["1",
               "SummaryItem"]}]},
            {
             RowBox[{
              TagBox["\<\"Status: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox[
               DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                 Style[
                  Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                   9, ImageMargins -> {{3, 3}, {2, 0}}, 
                   BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                  False], 
                 Style[
                  Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                   9, ImageMargins -> {{3, 3}, {2, 0}}, 
                   BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                  False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                 Opacity[1], 
                 Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                "Connected (1)", "Not connected (1)"}, 
                Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"dummy", 1}],
                 Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
                Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
                DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                  Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                 ImageSizeCache->{111., {5., 10.}}],
                DynamicModuleValues:>{}],
               "SummaryItem"]}], "\[SpanFromLeft]"}
           },
           AutoDelete->False,
           
           BaseStyle->{
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
           GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
        },
        AutoDelete->False,
        BaselinePosition->{1, 1},
        GridBoxAlignment->{"Rows" -> {{Top}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
         {
          PaneBox[
           ButtonBox[
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEBitmaps", "SquarePlusIconMedium"]],
            Appearance->None,
            ButtonFunction:>(Typeset`open$$ = False),
            Evaluator->Automatic,
            Method->"Preemptive"],
           Alignment->{Center, Center},
           
           ImageSize->
            Dynamic[{
             Automatic, 
              3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}]], 
          GraphicsBox[
           {Thickness[0.038461538461538464`], 
            {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
             FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
              3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
              1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
              0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
              25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
              24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
            {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
             JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
              3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
              1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
              0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
              25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
              24.605}, {25.5, 23.5}, {25.5, 2.5}}},
              CurveClosed->{1}]}, 
            {FaceForm[{RGBColor[
             0.45999999999999996`, 0.45999999999999996`, 
              0.45999999999999996`], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
              20.542}, {11.020999999999999`, 20.542}}}]}, 
            {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              15.979000000000001`, 16.541999999999998`}, {10.020999999999999`,
               16.541999999999998`}, {10.020999999999999`, 10.542}, {
              12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
              13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
              15.979000000000001`, 10.542}, {15.979000000000001`, 
              16.541999999999998`}}}]}},
           AspectRatio->Automatic,
           ImageSize->{Automatic, 
             Dynamic[3.5 CurrentValue["FontCapHeight"]]},
           PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
            {
             RowBox[{
              TagBox["\<\"Class: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["\<\"dummy\"\>",
               "SummaryItem"]}], 
             RowBox[{
              TagBox["\<\"ID: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["1",
               "SummaryItem"]}]},
            {
             RowBox[{
              TagBox["\<\"Status: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox[
               DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                 Style[
                  Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                   9, ImageMargins -> {{3, 3}, {2, 0}}, 
                   BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                  False], 
                 Style[
                  Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                   9, ImageMargins -> {{3, 3}, {2, 0}}, 
                   BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                  False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                 Opacity[1], 
                 Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                "Connected (1)", "Not connected (1)"}, 
                Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"dummy", 1}],
                 Devices`DeviceAPI`DeviceDump`ind$$, 
                Devices`DeviceAPI`DeviceDump`indr$$}, 
                DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                  Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
                DynamicModuleValues:>{}],
               "SummaryItem"]}], "\[SpanFromLeft]"},
            {
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"dummy", 1}], 
               Devices`DeviceAPI`DeviceDump`props$$, 
               Devices`DeviceAPI`DeviceDump`vals$$, 
               Devices`DeviceAPI`DeviceDump`reg$$}, 
               
               DynamicBox[ToBoxes[
                Devices`DeviceAPI`DeviceDump`reg$$ = 
                  DeviceFramework`DeviceRegisteredQ[
                   Devices`DeviceAPI`DeviceDump`d$$]; 
                 Devices`DeviceAPI`DeviceDump`props$$ = 
                  DeviceFramework`DeviceExternalProperties[
                   Devices`DeviceAPI`DeviceDump`d$$]; 
                 Devices`DeviceAPI`DeviceDump`vals$$ = 
                  Devices`DeviceAPI`DeviceDump`d$$[
                   Devices`DeviceAPI`DeviceDump`props$$]; Column[
                   Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                    MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"], "\[SpanFromLeft]"}
           },
           AutoDelete->False,
           
           BaseStyle->{
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
           GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
        },
        AutoDelete->False,
        BaselinePosition->{1, 1},
        GridBoxAlignment->{"Rows" -> {{Top}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
       Typeset`open$$],
       ImageSize->Automatic],
      BaselinePosition->Baseline],
     DynamicModuleValues:>{}], "]"}],
   DeviceObject[{"dummy", 1}],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",
 ImageSize->{342, 66},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[17]=",
 CellID->1954146764]
}, Open  ]],

Cell["\<\
The framework keeps track of the parameters used to open the device.\
\>", "MathCaption",
 CellID->612832443],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceFramework`DeviceOpenArguments", "[", "dev", "]"}]], "Input",
 CellLabel->"In[10]:=",
 CellID->543298489],

Cell[BoxData[
 RowBox[{"{", "1", "}"}]], "Output",
 ImageSize->{25, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[10]=",
 CellID->117237579]
}, Open  ]],

Cell["\<\
You can re-open the device without specifying open arguments.\
\>", "MathCaption",
 CellID->181936843],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceOpen", "[", "dev", "]"}]], "Input",
 CellLabel->"In[9]:=",
 CellID->720092550],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"dummy\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (1)", "Not connected (1)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"dummy", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{111., {5., 10.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"dummy\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (1)", "Not connected (1)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"dummy", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"dummy", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"dummy", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{328, 66},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[9]=",
 CellID->1525137005]
}, Open  ]],

Cell["\<\
Devices of this class are automatically deregistered after they are closed.  \
\>", "MathCaption",
 CellID->1169485954],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<dereg\>\"", ",", 
    RowBox[{"\"\<DeregisterOnClose\>\"", "\[Rule]", "True"}]}], "]"}], 
  ";"}]], "Input",
 CellLabel->"In[21]:=",
 CellID->882853713],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceOpen", "[", "\"\<dereg\>\"", "]"}]], "Input",
 CellLabel->"In[22]:=",
 CellID->93814715],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"dereg\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"dereg", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"dereg\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"dereg", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"dereg", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"dereg", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[22]=",
 CellID->1157837268]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceClose", "[", "%", "]"}], ";", 
  RowBox[{"Devices", "[", "\"\<dereg\>\"", "]"}]}]], "Input",
 CellLabel->"In[23]:=",
 CellID->228452575],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 ImageSize->{18, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[23]=",
 CellID->1421637809]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"Singleton\"", "Subsection",
 CellID->1022061240],

Cell[TextData[{
 "The ",
 Cell[BoxData["\"\<Singleton\>\""], "InlineFormula"],
 " option determines how the framework processes the ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", 
   RowBox[{"\"\<\!\(\*
StyleBox[\"class\", \"TI\"]\)\>\"", ",", 
    RowBox[{"{", 
     StyleBox["args\[Ellipsis]", "TI"], "}"}]}], "]"}]], "InlineFormula"],
 " command, thereby setting the creation policy for multiple devices. \
Possible values of the ",
 Cell[BoxData["\"\<Singleton\>\""], "InlineFormula"],
 " option are as follows:"
}], "Text",
 CellID->819982239],

Cell[BoxData[GridBox[{
   {
    ButtonBox["Automatic",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Automatic"], Cell[
    "return a new device for a new set of arguments", "TableText"]},
   {
    ButtonBox["True",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/True"], Cell[
    "always return the same device", "TableText"]},
   {
    ButtonBox["False",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/False"], Cell[
    "always return a new device", "TableText"]},
   {
    StyleBox["crit", "TI"], Cell[TextData[{
     "return the first of the registered devices for which ",
     Cell[BoxData[
      RowBox[{
       StyleBox["crit", "TI"], "[", 
       RowBox[{
        StyleBox["dev", "TI"], ",", 
        RowBox[{"{", 
         StyleBox["args", "TI"], "}"}]}], "]"}]], "InlineFormula"],
     " evaluates to ",
     Cell[BoxData[
      TemplateBox[{Cell[
         TextData["True"]],"paclet:ref/True"},
       "RefLink",
       BaseStyle->"InlineFormula"]], "InlineFormula"],
     " "
    }], "TableText"]}
  }]], "DefinitionBox",
 CellID->1919420326],

Cell["Creation policy for multiple devices in a class.", "Caption",
 CellID->198073848],

Cell[TextData[{
 "The default value ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Automatic"]],"paclet:ref/Automatic"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " is equivalent to the criterion ",
 Cell[BoxData[
  StyleBox["crit", "TI"]], "InlineFormula"],
 " equal to ",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    TemplateBox[{Cell[
       TextData["SameQ"]],"paclet:ref/SameQ"},
     "RefLink",
     BaseStyle->"InlineFormula"], "[", 
    RowBox[{
     RowBox[{
      TemplateBox[{Cell[
         TextData["DeviceOpenArguments"]],"paclet:ref/DeviceOpenArguments"},
       "RefLink",
       BaseStyle->"InlineFormula"], "[", "#1", "]"}], ",", "#2"}], "]"}], 
   "&"}]], "InlineFormula"],
 "."
}], "Text",
 CellID->1581514413],

Cell[TextData[{
 "With ",
 Cell[BoxData[
  RowBox[{"\"\<Singleton\>\"", "\[Rule]", 
   TemplateBox[{Cell[
      TextData["Automatic"]],"paclet:ref/Automatic"},
    "RefLink",
    BaseStyle->"InlineFormula"]}]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " returns a new device only if called with a new set of arguments."
}], "MathCaption",
 CellID->2073729606],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", "\"\<auto\>\"", "]"}], 
  ";"}]], "Input",
 CellLabel->"In[53]:=",
 CellID->1723480008],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceOpen", "[", "\"\<auto\>\"", "]"}]], "Input",
 CellLabel->"In[54]:=",
 CellID->1269063720],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"auto\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"auto", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"auto\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"auto", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"auto", 1}], Devices`DeviceAPI`DeviceDump`props$$,
               Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"auto", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 62},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[54]=",
 CellID->1148248907]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceOpen", "[", 
  RowBox[{"\"\<auto\>\"", ",", "1"}], "]"}]], "Input",
 CellLabel->"In[55]:=",
 CellID->1592441682],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"auto\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (1)", "Not connected (1)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"auto", 2}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{111., {5., 10.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"auto\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (1)", "Not connected (1)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"auto", 2}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"auto", 2}], Devices`DeviceAPI`DeviceDump`props$$,
               Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"auto", 2}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{328, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[55]=",
 CellID->1331328007]
}, Open  ]],

Cell[TextData[{
 "Calling ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " with the same arguments gives the same device.   "
}], "MathCaption",
 CellID->784824769],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceOpen", "[", 
  RowBox[{"\"\<auto\>\"", ",", "1"}], "]"}]], "Input",
 CellLabel->"In[56]:=",
 CellID->1282613186],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"auto\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (1)", "Not connected (1)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"auto", 2}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{111., {5., 10.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"auto\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (1)", "Not connected (1)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"auto", 2}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"auto", 2}], Devices`DeviceAPI`DeviceDump`props$$,
               Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"auto", 2}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{328, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[56]=",
 CellID->997695556]
}, Open  ]],

Cell[TextData[{
 "With ",
 Cell[BoxData[
  RowBox[{"\"\<Singleton\>\"", "\[Rule]", 
   TemplateBox[{Cell[
      TextData["True"]],"paclet:ref/True"},
    "RefLink",
    BaseStyle->"InlineFormula"]}]], "InlineFormula"],
 ", the framework ignores all calls to ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " after the first one and returns the same device even if called with \
different arguments."
}], "MathCaption",
 CellID->417108723],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<single\>\"", ",", 
    RowBox[{"\"\<Singleton\>\"", "\[Rule]", "True"}]}], "]"}], ";"}]], "Input",
 CellLabel->"In[57]:=",
 CellID->959683653],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceOpen", "[", "\"\<single\>\"", "]"}]], "Input",
 CellLabel->"In[58]:=",
 CellID->1800967001],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"single\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"single", 1}],
                Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"single\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"single", 1}],
                Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"single", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"single", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[58]=",
 CellID->716893916]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceOpen", "[", 
  RowBox[{"\"\<single\>\"", ",", "1"}], "]"}]], "Input",
 CellLabel->"In[59]:=",
 CellID->1783209144],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"single\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"single", 1}],
                Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"single\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"single", 1}],
                Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"single", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"single", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[59]=",
 CellID->1452786542]
}, Open  ]],

Cell[TextData[{
 "With ",
 Cell[BoxData[
  RowBox[{"\"\<Singleton\>\"", "\[Rule]", 
   TemplateBox[{Cell[
      TextData["False"]],"paclet:ref/False"},
    "RefLink",
    BaseStyle->"InlineFormula"]}]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " returns a new device even if called with the same arguments."
}], "MathCaption",
 CellID->1738693653],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<multi\>\"", ",", 
    RowBox[{"\"\<Singleton\>\"", "\[Rule]", "False"}]}], "]"}], 
  ";"}]], "Input",
 CellLabel->"In[60]:=",
 CellID->1414241242],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceOpen", "[", "\"\<multi\>\"", "]"}]], "Input",
 CellLabel->"In[61]:=",
 CellID->803549298],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"multi\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"multi", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"multi\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"multi", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"multi", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"multi", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 62},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[61]=",
 CellID->94345004]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceOpen", "[", "\"\<multi\>\"", "]"}]], "Input",
 CellLabel->"In[62]:=",
 CellID->693452443],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"multi\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"multi", 2}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"multi\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"multi", 2}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"multi", 2}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"multi", 2}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 62},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[62]=",
 CellID->813550742]
}, Open  ]],

Cell[TextData[{
 "Importantly, the framework will not typically execute the opening sequence \
of driver functions, including ",
 Cell[BoxData["\"\<OpenFunction\>\""], "InlineFormula"],
 ", if it does not need to open a new device in response to ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ". However, it will execute the opening sequence if the specified criterion ",
 Cell[BoxData[
  StyleBox["crit", "TI"]], "InlineFormula"],
 " returns ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["True"]],"paclet:ref/True"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ", but the arguments ",
 Cell[BoxData[
  StyleBox["args", "TI"]], "InlineFormula"],
 " do not match exactly the arguments with which the device was previously \
open. This lets you reconfigure the same device for a different set of \
arguments."
}], "Text",
 CellID->1107640372],

Cell[TextData[{
 "With this driver, ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " returns a new device for every distinct first argument."
}], "MathCaption",
 CellID->665634953],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<single1\>\"", ",", 
    RowBox[{"\"\<OpenFunction\>\"", ":>", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"StringForm", "[", 
           RowBox[{"\"\<Configuring `` with ``\>\"", ",", "##2"}], "]"}], 
          "]"}], ";", 
         RowBox[{"CreateUUID", "[", "]"}]}], ")"}], "&"}], ")"}]}], ",", 
    RowBox[{"\"\<Singleton\>\"", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"First", "[", 
         RowBox[{"DeviceFramework`DeviceOpenArguments", "[", "#1", "]"}], 
         "]"}], "===", 
        RowBox[{"First", "[", "#2", "]"}]}], "&"}], ")"}]}]}], "]"}], 
  ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->1084337848],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceOpen", "[", 
  RowBox[{"\"\<single1\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<foo\>\"", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->1438167394],

Cell[BoxData[
 InterpretationBox["\<\"Configuring foo with \\!\\(1\\)\"\>",
  StringForm["Configuring `` with ``", "foo", 1],
  Editable->False]], "Print",
 CellLabel->"During evaluation of In[2]:=",
 CellID->1034669928],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"single1\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (foo)", "Not connected (foo)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"single1", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{123., {5., 10.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"single1\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (foo)", "Not connected (foo)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"single1", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"single1", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"single1", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{340, 66},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->1522390137]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceOpen", "[", 
  RowBox[{"\"\<single1\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<bar\>\"", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->939821977],

Cell[BoxData[
 InterpretationBox["\<\"Configuring bar with \\!\\(1\\)\"\>",
  StringForm["Configuring `` with ``", "bar", 1],
  Editable->False]], "Print",
 CellLabel->"During evaluation of In[3]:=",
 CellID->1690862201],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"single1\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (bar)", "Not connected (bar)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"single1", 2}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{122., {5., 10.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"single1\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (bar)", "Not connected (bar)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"single1", 2}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"single1", 2}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"single1", 2}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{339, 66},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->669911456]
}, Open  ]],

Cell["\<\
Reconfigure the first device with a different input argument.\
\>", "MathCaption",
 CellID->1582820232],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceOpen", "[", 
  RowBox[{"\"\<single1\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<foo\>\"", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->1579703835],

Cell[BoxData[
 InterpretationBox["\<\"Configuring foo with \\!\\(2\\)\"\>",
  StringForm["Configuring `` with ``", "foo", 2],
  Editable->False]], "Print",
 CellLabel->"During evaluation of In[4]:=",
 CellID->2092563418],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"single1\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (foo)", "Not connected (foo)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"single1", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{123., {5., 10.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"single1\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (foo)", "Not connected (foo)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"single1", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"single1", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"single1", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{340, 66},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->373679407]
}, Open  ]],

Cell[TextData[{
 "This demo device gives a slightly more robust example of the ",
 Cell[BoxData["\"\<Singleton\>\""], "InlineFormula"],
 " option case."
}], "MathCaption",
 CellID->240346998],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "DeviceFramework`DeviceDriverLoad", "[", "\"\<SingletonDemo\>\"", "]"}], "//",
   "SystemOpen"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->1081837838]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"Properties\"", "Subsection",
 CellID->720023240],

Cell[TextData[{
 "The option ",
 Cell[BoxData[
  RowBox[{"\"\<Properties\>\"", "\[Rule]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<\!\(\*SubscriptBox[
StyleBox[\"property\", \"TI\"], 
StyleBox[\"1\", \"TR\"]]\)\>\"", "\[Rule]", 
      SubscriptBox[
       StyleBox["value", "TI"], 
       StyleBox["1", "TR"]]}], ",", 
     RowBox[{"\"\<\!\(\*SubscriptBox[
StyleBox[\"property\", \"TI\"], 
StyleBox[\"2\", \"TR\"]]\)\>\"", "\[Rule]", 
      SubscriptBox[
       StyleBox["value", "TI"], 
       StyleBox["2", "TR"]]}], ",", "\[Ellipsis]"}], "}"}]}]], 
  "InlineFormula"],
 " specifies the ",
 ButtonBox["class properties",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/DevelopingDeviceDrivers#2011240917"],
 " that typically determine standardized (top-level) properties of a newly \
created device. Standardized property names are usually given as strings. A \
driver can also specify ",
 ButtonBox["native properties",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/DevelopingDeviceDrivers#35275765"],
 "."
}], "Text",
 CellID->360243835]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"GetPropertyFunction\"", "Subsection",
 CellID->1885966802],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<GetPropertyFunction\>\"", "\[Rule]", 
   StyleBox["f", "TI"]}]], "InlineFormula"],
 " specifies that ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", 
   RowBox[{
    StyleBox["dev", "TI"], ",", 
    StyleBox["p", "TI"]}], "]"}]], "InlineFormula"],
 " should be called to query the value of the standardized property ",
 Cell[BoxData[
  StyleBox["p", "TI"]], "InlineFormula"],
 " of the device ",
 Cell[BoxData[
  StyleBox["dev", "TI"]], "InlineFormula"],
 ". The return value will be passed on to the user. The default for ",
 Cell[BoxData["\"\<GetPropertyFunction\>\""], "InlineFormula"],
 " is ",
 Cell[BoxData["DeviceGetProperty"], "InlineFormula"],
 ", which you can call inside your function ",
 Cell[BoxData[
  StyleBox["f", "TI"]], "InlineFormula"],
 ". "
}], "Text",
 CellID->585411494],

Cell["\<\
This driver increments a counter every time a standardized property is read.\
\>", "MathCaption",
 CellID->1160813182],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<get\>\"", ",", 
    RowBox[{"\"\<Properties\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<p\>\"", "\[Rule]", "\"\<x\>\""}], "}"}]}], ",", 
    RowBox[{"\"\<GetPropertyFunction\>\"", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"$counter", "++"}], ";", 
         RowBox[{"DeviceFramework`DeviceGetProperty", "[", "##", "]"}]}], 
        ")"}], "&"}], ")"}]}]}], "]"}], ";"}]], "Input",
 CellLabel->"In[37]:=",
 CellID->875552012],

Cell["Set up the counter and open a device.", "MathCaption",
 CellID->1381042993],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"$counter", " ", "=", "0"}], ";", " ", 
  RowBox[{"Dynamic", "[", "$counter", "]"}]}]], "Input",
 CellLabel->"In[49]:=",
 CellID->1567377440],

Cell[BoxData[
 DynamicBox[ToBoxes[$CellContext`$counter, StandardForm],
  ImageSizeCache->{56., {1., 8.}}]], "Output",
 ImageSize->{60, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[49]=",
 CellID->1273968347]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", "\"\<get\>\"", "]"}]}]], "Input",
 CellLabel->"In[50]:=",
 CellID->844716440],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"get\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"get", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"get\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"get", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"get", 1}], Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"get", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[50]=",
 CellID->1174047439]
}, Open  ]],

Cell["Reading the property value increments the counter.", "MathCaption",
 CellID->199361608],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "[", "\"\<p\>\"", "]"}]], "Input",
 CellLabel->"In[51]:=",
 CellID->1803282790],

Cell[BoxData["\<\"x\"\>"], "Output",
 ImageSize->{11, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[51]=",
 CellID->1135558637]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "[", "\"\<Rules\>\"", "]"}]], "Input",
 CellLabel->"In[52]:=",
 CellID->290860332],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"p\"\>", "\[Rule]", "\<\"x\"\>"}], "}"}]], "Output",
 ImageSize->{49, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[52]=",
 CellID->646841170]
}, Open  ]],

Cell[TextData[{
 "You will typically define a value of ",
 Cell[BoxData["\"\<GetPropertyFunction\>\""], "InlineFormula"],
 " to query a property value that is stored on a device."
}], "Text",
 CellID->159657755]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"SetPropertyFunction\"", "Subsection",
 CellID->470381286],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"\"\<SetPropertyFunction\>\"", "\[Rule]", 
   StyleBox["f", "TI"]}]], "InlineFormula"],
 " specifies that ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", 
   RowBox[{
    StyleBox["dev", "TI"], ",", 
    StyleBox["p", "TI"], ",", 
    StyleBox["val", "TI"]}], "]"}]], "InlineFormula"],
 " should be called to set the standardized property ",
 Cell[BoxData[
  StyleBox["p", "TI"]], "InlineFormula"],
 " on the device ",
 Cell[BoxData[
  StyleBox["dev", "TI"]], "InlineFormula"],
 " to the value ",
 Cell[BoxData[
  StyleBox["val", "TI"]], "InlineFormula"],
 ". The return value of ",
 Cell[BoxData[
  StyleBox["f", "TI"]], "InlineFormula"],
 " is not used. The default for ",
 Cell[BoxData["\"\<SetPropertyFunction\>\""], "InlineFormula"],
 " is ",
 Cell[BoxData["DeviceSetProperty"], "InlineFormula"],
 ", which you can call inside your function\[NonBreakingSpace]",
 Cell[BoxData[
  StyleBox["f", "TI"]], "InlineFormula"],
 ". "
}], "Text",
 CellID->810969195],

Cell[TextData[{
 "Although you will typically use ",
 Cell[BoxData["\"\<SetPropertyFunction\>\""], "InlineFormula"],
 " to change property values on a device, you can also use the same function \
to filter out invalid property values, designate some properties as \
read-only, link standardized properties with native properties, ",
 StyleBox["etc",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellID->349060737],

Cell[TextData[{
 "This driver creates a regular property ",
 Cell[BoxData["\"\<p\>\""], "InlineFormula"],
 " and a read-only property ",
 Cell[BoxData["\"\<r\>\""], "InlineFormula"],
 ". "
}], "MathCaption",
 CellID->760595792],

Cell[BoxData[
 RowBox[{
  RowBox[{"set", "[", 
   RowBox[{"dev_", ",", 
    RowBox[{"p", ":", "\"\<r\>\""}], ",", "_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Message", "[", 
   RowBox[{
    RowBox[{"DeviceObject", "::", "ronly"}], ",", "p", ",", 
    RowBox[{"DeviceFramework`DeviceClass", "[", "dev", "]"}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[87]:=",
 CellID->462948490],

Cell[BoxData[
 RowBox[{
  RowBox[{"set", "[", "args__", "]"}], " ", ":=", " ", 
  RowBox[{"DeviceFramework`DeviceSetProperty", "[", "args", "]"}]}]], "Input",
 CellLabel->"In[88]:=",
 CellID->442018349],

Cell[BoxData[
 RowBox[{
  RowBox[{"pre", "[", "dev_", "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DeviceFramework`DeviceSetProperty", "[", 
     RowBox[{"dev", ",", "\"\<r\>\"", ",", 
      RowBox[{"DeviceFramework`DeviceClassProperties", "[", 
       RowBox[{
        RowBox[{"DeviceFramework`DeviceClass", "[", "dev", "]"}], ",", 
        "\"\<r\>\""}], "]"}]}], "]"}], ";", "\"\<r\>\""}], 
   "\[IndentingNewLine]", ")"}]}]], "Input",
 CellLabel->"In[89]:=",
 CellID->277010609],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<ronly\>\"", ",", 
    RowBox[{"\"\<Properties\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<p\>\"", "\[Rule]", "\"\<x\>\""}], ",", 
       RowBox[{"\"\<r\>\"", "\[Rule]", "\"\<fixed\>\""}]}], "}"}]}], ",", 
    RowBox[{"\"\<SetPropertyFunction\>\"", "\[Rule]", "set"}], ",", 
    RowBox[{"\"\<PreconfigureFunction\>\"", "\[Rule]", "pre"}]}], "]"}], 
  ";"}]], "Input",
 CellLabel->"In[92]:=",
 CellID->856456670],

Cell["Open a device and change the property \"p\".", "MathCaption",
 CellID->1018651300],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", "\"\<ronly\>\"", "]"}]}]], "Input",
 CellLabel->"In[93]:=",
 CellID->732765216],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"ronly\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"ronly", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"ronly\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"ronly", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"ronly", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"ronly", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[93]=",
 CellID->1912962498]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"dev", "[", "\"\<p\>\"", "]"}], "=", "\"\<new\>\""}], ";", 
  RowBox[{"dev", "[", "\"\<p\>\"", "]"}]}]], "Input",
 CellLabel->"In[94]:=",
 CellID->1183024649],

Cell[BoxData["\<\"new\"\>"], "Output",
 ImageSize->{25, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[94]=",
 CellID->1691671817]
}, Open  ]],

Cell["The value of \"r\" cannot be changed.", "MathCaption",
 CellID->1392225686],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"dev", "[", "\"\<r\>\"", "]"}], "=", "\"\<new\>\""}], ";", 
  RowBox[{"dev", "[", "\"\<r\>\"", "]"}]}]], "Input",
 CellLabel->"In[95]:=",
 CellID->155286890],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"DeviceObject", "::", "ronly"}], "MessageName"], ":", 
  " ", "\<\"Property \[NoBreak]\\!\\(\\\"r\\\"\\)\[NoBreak] in \
\[NoBreak]\\!\\(\\\"ronly\\\"\\)\[NoBreak] is read-only. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/DeviceObject\\\", ButtonNote -> \
\\\"DeviceObject::ronly\\\"]\\)\"\>"}]], "Message", "MSG",
 CellLabel->"During evaluation of In[95]:=",
 CellID->714129125],

Cell[BoxData["\<\"fixed\"\>"], "Output",
 ImageSize->{39, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[95]=",
 CellID->82100792]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Advanced Topic: Keeping Top-Level Properties in Sync with the Device\
\>", "Subsubsection",
 CellID->182760886],

Cell["\<\
As a somewhat advanced exercise, let's develop a driver that keeps a \
standardized property in sync with a property that can be independently \
changed on the device. \
\>", "Text",
 CellID->1761196335],

Cell[TextData[{
 "In this case, the \"external\" value is mocked up using the variable ",
 Cell[BoxData["$external"], "InlineFormula"],
 ". In a real-life driver, you would instead call the external property \
setter (getter) to change (get the value of) the property. "
}], "MathCaption",
 CellID->398047499],

Cell[BoxData[
 RowBox[{
  RowBox[{"$external", "=", "0"}], ";"}]], "Input",
 CellLabel->"In[61]:=",
 CellID->726127489],

Cell[TextData[{
 "The ",
 Cell[BoxData["set"], "InlineFormula"],
 " function uses the default handler for top-level accounting. It also \
communicates with the device to set the property value on the device if it is \
open."
}], "MathCaption",
 CellID->841278525],

Cell[BoxData[
 RowBox[{
  RowBox[{"set", "[", 
   RowBox[{"dev_", ",", "p_", ",", "v_"}], "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DeviceFramework`DeviceSetProperty", "[", 
     RowBox[{"dev", ",", "p", ",", "v"}], "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"DeviceOpenQ", "[", "dev", "]"}], ",", 
      RowBox[{"$external", "=", "v"}]}], "]"}]}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellLabel->"In[62]:=",
 CellID->572755288],

Cell[TextData[{
 "For an open device, the ",
 Cell[BoxData["get"], "InlineFormula"],
 " function queries the property value on the device and keeps the value it \
obtains in the top-level interface. If the device is closed, the function \
simply returns the top-level value."
}], "MathCaption",
 CellID->335837827],

Cell[BoxData[{
 RowBox[{
  RowBox[{"get", "[", 
   RowBox[{"dev_", ",", "p_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"DeviceFramework`DeviceSetProperty", "[", 
    RowBox[{"dev", ",", "p", ",", "$external"}], "]"}], "/;", 
   RowBox[{"DeviceOpenQ", "[", "dev", "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"get", "[", "args__", "]"}], ":=", 
  RowBox[{"DeviceFramework`DeviceGetProperty", "[", "args", "]"}]}]}], "Input",
 CellLabel->"In[63]:=",
 CellID->1659695744],

Cell[TextData[{
 "This sets up the driver. ",
 Cell[BoxData["\"\<PreconfigureFunction\>\""], "InlineFormula"],
 " in this case tells the driver to simply skip the configuration of the \
property ",
 Cell[BoxData["\"\<p\>\""], "InlineFormula"],
 ". "
}], "MathCaption",
 CellID->839334073],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<set\>\"", ",", 
    RowBox[{"\"\<Properties\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<p\>\"", "\[Rule]", "\"\<x\>\""}], "}"}]}], ",", 
    RowBox[{"\"\<GetPropertyFunction\>\"", "\[Rule]", "get"}], ",", 
    RowBox[{"\"\<SetPropertyFunction\>\"", "\[Rule]", "set"}], ",", 
    RowBox[{"\"\<PreconfigureFunction\>\"", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{"\"\<p\>\"", "&"}], ")"}]}]}], "]"}], ";"}]], "Input",
 CellLabel->"In[65]:=",
 CellID->1569428651],

Cell[TextData[{
 "Open a device and check its property. The value comes from the variable ",
 Cell[BoxData["$external"], "InlineFormula"],
 " (that is, the value ",
 Cell[BoxData["\"\<x\>\""], "InlineFormula"],
 " is ignored)."
}], "MathCaption",
 CellID->1745293229],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", "\"\<set\>\"", "]"}]}]], "Input",
 CellLabel->"In[66]:=",
 CellID->1993184903],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"set\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"set", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"set\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"set", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"set", 1}], Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"set", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 62},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[66]=",
 CellID->2015171415]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "[", "\"\<p\>\"", "]"}]], "Input",
 CellLabel->"In[67]:=",
 CellID->664165430],

Cell[BoxData["0"], "Output",
 ImageSize->{11, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[67]=",
 CellID->1021375068]
}, Open  ]],

Cell["\<\
Change the property value. The \"external\" variable also changes.\
\>", "MathCaption",
 CellID->1338644473],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"dev", "[", "\"\<p\>\"", "]"}], "=", "1"}], ";"}]], "Input",
 CellLabel->"In[68]:=",
 CellID->1558971739],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"dev", "[", "\"\<p\>\"", "]"}], ",", " ", "$external"}], 
  "}"}]], "Input",
 CellLabel->"In[69]:=",
 CellID->190040326],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1"}], "}"}]], "Output",
 ImageSize->{43, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[69]=",
 CellID->1413977405]
}, Open  ]],

Cell[TextData[{
 "If the \"external\" variable changed outside this session (",
 StyleBox["e.g.",
  FontSlant->"Italic"],
 ", the user pressed a button on the device), the next query of the property \
picks up the new value."
}], "MathCaption",
 CellID->300747026],

Cell[BoxData[
 RowBox[{
  RowBox[{"$external", "=", "2"}], ";"}]], "Input",
 CellLabel->"In[70]:=",
 CellID->1626244591],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "[", "\"\<p\>\"", "]"}]], "Input",
 CellLabel->"In[71]:=",
 CellID->1268465568],

Cell[BoxData["2"], "Output",
 ImageSize->{11, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[71]=",
 CellID->664208133]
}, Open  ]],

Cell["\<\
Close the device and change the external property on the device again.\
\>", "MathCaption",
 CellID->433675366],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceClose", "[", "dev", "]"}], ";"}]], "Input",
 CellLabel->"In[72]:=",
 CellID->222378444],

Cell[BoxData[
 RowBox[{
  RowBox[{"$external", "=", "3"}], ";"}]], "Input",
 CellLabel->"In[73]:=",
 CellID->892962528],

Cell["\<\
Because there's no communication with the device, the reported value of the \
property is a stale one.\
\>", "MathCaption",
 CellID->1405482860],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "[", "\"\<p\>\"", "]"}]], "Input",
 CellLabel->"In[74]:=",
 CellID->1777794667],

Cell[BoxData["2"], "Output",
 ImageSize->{11, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[74]=",
 CellID->726094225]
}, Open  ]],

Cell["\<\
The value is automatically updated when the device is re-opened.\
\>", "MathCaption",
 CellID->579598917],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceOpen", "[", "dev", "]"}]], "Input",
 CellLabel->"In[75]:=",
 CellID->333175227],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"set\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"set", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"set\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"set", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"set", 1}], Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"set", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 62},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[75]=",
 CellID->1463557321]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "[", "\"\<p\>\"", "]"}]], "Input",
 CellLabel->"In[76]:=",
 CellID->909840119],

Cell[BoxData["3"], "Output",
 ImageSize->{11, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[76]=",
 CellID->730201309]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\"NativeProperties\"", "Subsection",
 CellID->35275765],

Cell[TextData[{
 "The option ",
 Cell[BoxData[
  RowBox[{"\"\<NativeProperties\>\"", "\[Rule]", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox[
      StyleBox["property", "TI"], 
      StyleBox["1", "TR"]], ",", 
     SubscriptBox[
      StyleBox["property", "TI"], 
      StyleBox["2", "TR"]], ",", "\[Ellipsis]"}], "}"}]}]], "InlineFormula"],
 " specifies a list of native properties that are typically available on a \
device of a given class. You might want to list native properties when you \
wish to  access your device in a standard way provided by the framework and \
still have an option to work with the device directly. Native property names \
are usually defined by a third-party library outside your control. They can \
be any Wolfram Language expressions."
}], "Text",
 CellID->581861972],

Cell[TextData[{
 "As an example, you might want to set up a driver to use ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceRead"]],"paclet:ref/DeviceRead"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceExecute"]],"paclet:ref/DeviceExecute"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ", and other standard Wolfram Language functions for a device connected \
through a ",
 ButtonBox[".",
  BaseStyle->"Link",
  ButtonData->"paclet:NETLink/tutorial/Overview"],
 StyleBox[ButtonBox["NET/Link",
  BaseStyle->"Link",
  ButtonData->"paclet:NETLink/tutorial/Overview"],
  FontSlant->"Italic"],
 " and at the same time let your users communicate with the device via the ",
 ButtonBox[".",
  BaseStyle->"Link",
  ButtonData->"paclet:NETLink/tutorial/Overview"],
 StyleBox[ButtonBox["NET/Link",
  BaseStyle->"Link",
  ButtonData->"paclet:NETLink/tutorial/Overview"],
  FontSlant->"Italic"],
 " interface directly."
}], "Text",
 CellID->1774030662],

Cell["\<\
This demo device provides a sample implementation of both standardized and \
native properties.\
\>", "MathCaption",
 CellID->1255165876],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "DeviceFramework`DeviceDriverLoad", "[", "\"\<PropertiesDemo\>\"", "]"}], "//",
   "SystemOpen"}]], "Input",
 CellLabel->"In[97]:=",
 CellID->841013451]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
\"StatusL,

lFunction\"\
\>", "Subsection",
 CellID->2046040484],

Cell[RawData["\<\
Cell[TextData[{
 \"By default, the framework uses \",
 Cell[BoxD
}, Open  ]],

ultStatusLabels\"], \"InlineFormula\",
  FormatType->\"StandardForm\"],
 Cell[BoxData[
  RowBox[{\"[\", \"]\"}]], \"InlineFormula\"],
 \" to create status labels for devices opened with \",
 Cell[BoxData[
  RowBox[{
   ButtonBox[\"DeviceOpen\",
    BaseStyle->\"Link\"], \"[\", 
   StyleBox[\"class\", \"TI\"], \"]\"}]], \"InlineFormula\"],
 \" and \",
 Cell[BoxData[\"DeviceDefaultStatusLabels\"],

Cell[CellGroupData[{

atType->\"StandardForm\"],
 Cell[BoxData[
  RowBox[{\"[\", 
   StyleBox[\"p\", \"TI\"], \"]\"}]], \"InlineFormula\"],
 \" for devices opened with a parameter \",
 Cell[BoxData[
  StyleBox[\"p\", \"TI\"]], \"InlineFormula\"],
 \" in \",
 Cell[BoxData[
  RowBox[{
   ButtonBox[\"DeviceOpen\",
    BaseStyle->\"Link\"], \"[\", 
   RowBox[{
    StyleBox[\"class\", \"TI\"], \",\", 
    RowBox[{\"{\", 
     RowBox[{
      StyleB,

\"p\", \"TI\"], \",\", \"\\[Ellipsis]\"}], \"}\"}]}], \"]\"}]], 
  \"InlineFormula\"],
 \". You can use the option \",
 Cell[BoxData[
  RowBox[{\"\\\"\\<StatusLabelFunction\\>\\\"\", \"\\[Rule]\", 
   StyleBox[\"f\", \"TI\"]}]], \"InlineFormula\"],
 \" to create your own labels. The function \",
 Cell[BoxData[
  RowBox[{
   StyleBox[\"f\", \"TI\"], \"[\", 
   RowBox[{\"{\", 
    StyleBox[\"args\", \"TI\"], \"}\"}], \"]\"}]], \"InlineFormula\"],
 \" will be called at the device preparation stage with arguments \",
 Cell[BoxData[
  StyleBox[\"args\", \"TI\"]], \"InlineFormula\"],
 \" supplied in \",
 Cell[BoxData[
  RowBox[{
   ButtonBox[\"DeviceOpen\",
    BaseStyle->\"Link\"], \"[\", 
   RowBox[{\"\\\"\\<\\!\\(\\*
StyleBox[\\\"class\\\", \\\"TI\\\"]\\)\\>\\\"\", \",\", 
    RowBox[{\"{\", 
     StyleBox[\"args\\[Ellipsis]\", \"TI\"], \"}\"}]}], \"]\"}]], \
\"InlineFormula\"],
 \". It must return a string to replace the label for an open device or a \
list \\
of two strings \",
 Cell[BoxData[
  RowBox[{\"{\", 
   RowBox[{
    StyleBox[\"olbl\", \"TI\"], \",\", 
    StyleBox[\"clbl\", \"TI\"]}], \"}\"}]], \"InlineFormula\"],
 \" to replace both the label \",
 Cell[BoxData[
  StyleBox[\"olbl\", \"TI\"]], \"InlineFormula\"],
 \" for an open device and the label \",
 Cell[BoxData[
  StyleBox[\"clbl\", \"TI\"]], \"InlineFormula\"],
 \" for a closed device.\"
}], \"Text\",
 CellChangeTimes->{{3.605542030821065*^9, 3.605542043696718*^9}, {
   3.6114146399511166`*^9, 3.6114146439581165`*^9}, {3.6115000311856127`*^9, 
   3.6115000337205133`*^9}, {3.614531028340783*^9, 3.614531036439069*^9}, {
   3.614531325691965*^9, 3.614531338614085*^9}, 3.61453157666625*^9, {
   3.614533946641582*^9, 3.614534029669668*^9}, {3.6145340942036343`*^9, 
   3.6145341074265747`*^9}, {3.614534385363923*^9, 3.614534385369124*^9}, 
   3.61453444141822*^9, {3.6145345378661003`*^9, 3.6145345493632593`*^9}, {
   3.614536530534438*^9, 3.614536547966447*^9}, {3.6145375014569817`*^9, 
   3.6145375482162237`*^9}, {3.614537596110942*^9, 3.614537732425713*^9}, {
   3.614537766359453*^9, 3.6145378637132*^9}, {3.614537897465363*^9, 
   3.614537906159563*^9}, {3.6145379760637693`*^9, 3.6145380784731607`*^9}, {
   3.614538125744172*^9, 3.614538251562648*^9}, {3.614538572347974*^9, 
   3.6145386046833344`*^9}, {3.6145386630043287`*^9, 
   3.6145387163945723`*^9}, {3.614538764003523*^9, 3.614538784521368*^9}, {
   3.614539228876515*^9, 3.614539277811458*^9}, {3.6145393128020277`*^9, 
   3.6145395640591927`*^9}, {3.614539609925187*^9, 3.614539610796036*^9}, {
   3.61454233648667*^9, 3.614542336880271*^9}},
 CellID->146775177]\
\>"], "Text",
 CellID->146775177],

Cell["This driver implements custom status labels.", "MathCaption",
 CellID->1959552213],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<status\>\"", ",", 
    RowBox[{"\"\<StatusLabelFunction\>\"", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<Last opened \>\"", "<>", 
          RowBox[{"DateString", "[", "]"}]}], ",", "\"\<Idle\>\""}], "}"}], 
       "&"}], ")"}]}]}], "]"}], ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->730315174],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", "\"\<status\>\"", "]"}]}]], "Input",
 CellLabel->"In[2]:=",
 CellID->140378249],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
iYmJiemy+n+6klbF
    "], {{0, 55}, {411, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{411, 55},
  PlotRange->{{0, 411}, {0, 55}}]], "Output",
 ImageSize->{415, 55},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->434389852]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceClose", "[", "dev", "]"}], ";", " ", "dev"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->760620998],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"status\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Last opened Wed 16 Jul 2014 18:31:37", "Idle"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"status", 1}],
                Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{34., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"status\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Last opened Wed 16 Jul 2014 18:31:37", "Idle"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"status", 1}],
                Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"status", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"status", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{290, 62},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->880298753]
}, Open  ]],

Cell[TextData[{
 "To construct more sophisticated labels, call ",
 Cell[BoxData["DeviceStatusLabels"], "InlineFormula"],
 " in ",
 Cell[BoxData["\"\<PreconfigureFunction\>\""], "InlineFormula"],
 "."
}], "Text",
 CellID->908456048]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Device Framework Functions", "Section",
 CellID->617176298],

Cell[TextData[{
 "In addition to ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceClassRegister"]],
    "paclet:tutorial/DevelopingDeviceDrivers#939564002"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ", the framework provides functions for working with driver files, \
extracting both user-visible and internal information about device objects, \
accessing class preferences, and other utilities."
}], "Text",
 CellID->1792144871],

Cell[BoxData[GridBox[{
   {
    RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
     RowBox[{
      StyleBox["class", "TI"], ",", "\[Ellipsis]"}], "]"}], "\[SpanFromLeft]"},
   {"", Cell["register the specified class", "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceClassClear", "[", 
     StyleBox["class", "TI"], "]"}], "\[SpanFromLeft]"},
   {"", Cell["clear definitions for the class", "TableText"]}
  }]], "DefinitionBox",
 CellID->1443390889],

Cell["Adding and removing a driver class.", "Caption",
 CellID->780524395],

Cell[TextData[{
 "Internally, ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceClassRegister"]],
    "paclet:tutorial/DevelopingDeviceDrivers#939564002"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " calls ",
 Cell[BoxData["DeviceClassClear"], "InlineFormula"],
 " and effectively removes all existing definitions for the specified class \
before creating any new ones, so you can safely call ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceClassRegister"]],
    "paclet:tutorial/DevelopingDeviceDrivers#939564002"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " multiple times when developing your driver."
}], "Text",
 CellID->1095394911],

Cell[CellGroupData[{

Cell["Working with Driver Files", "Subsection",
 CellID->1958266969],

Cell[BoxData[GridBox[{
   {
    RowBox[{"DeviceFramework`FindDeviceDrivers", "[", 
     StyleBox["form", "TI"], "]"}], "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "give a list of drivers for classes whose names match the string pattern \
",
     Cell[BoxData[
      StyleBox["form", "TI"]], "InlineFormula"],
     "\.10"
    }], "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceDriverLoad", "[", 
     StyleBox["class", "TI"], "]"}], "\[SpanFromLeft]"},
   {"", Cell[
    "discover and load a driver for the specified class", "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceDriverFile", "[", 
     StyleBox[
      RowBox[{"dev", " ", "|", " ", "class"}], "TI"], "]"}], 
    "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "give a path to the currently registered driver for the device ",
     Cell[BoxData[
      StyleBox["dev", "TI"]], "InlineFormula"],
     " or class ",
     Cell[BoxData[
      StyleBox["class", "TI"]], "InlineFormula"],
     " "
    }], "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceDriverPaclet", "[", 
     StyleBox[
      RowBox[{"dev", " ", "|", " ", "class"}], "TI"], "]"}], 
    "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "give a paclet object for the currently loaded paclet driver for the \
device ",
     Cell[BoxData[
      StyleBox["dev", "TI"]], "InlineFormula"],
     " or class ",
     Cell[BoxData[
      StyleBox["class", "TI"]], "InlineFormula"]
    }], "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceDriverVersion", "[", 
     StyleBox[
      RowBox[{"dev", " ", "|", " ", "class"}], "TI"], "]"}], 
    "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "return the version number of the currently loaded driver for the device \
",
     Cell[BoxData[
      StyleBox["dev", "TI"]], "InlineFormula"],
     " or class ",
     Cell[BoxData[
      StyleBox["class", "TI"]], "InlineFormula"]
    }], "TableText"]}
  }]], "DefinitionBox",
 CellID->902997426],

Cell["Working with driver files.", "Caption",
 CellID->1410799575],

Cell[TextData[{
 Cell[BoxData["FindDeviceDrivers"], "InlineFormula"],
 " returns a list of triplets in the form ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"\"\<\!\(\*
StyleBox[
RowBox[{
RowBox[{\"path\", \"/\", \"to\"}], \"/\", \"driver\"}], \"TI\"]\)\>\"", ",", 
    StyleBox["class", "TI"], ",", 
    StyleBox["version", "TI"]}], "}"}]], "InlineFormula"],
 ". You can use this information to inspect a driver file without loading it \
in your Wolfram Language session, compare different driver versions, or load \
a prior version of the driver instead of the most recent version, which is \
automatically loaded by ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ". "
}], "Text",
 CellID->246987326],

Cell["\<\
This opens all available driver files for a class in your system editor.\
\>", "MathCaption",
 CellID->30098431],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceFramework`FindDeviceDrivers", "[", "\"\<RandomSignalDemo\>\"",
   "]"}]], "Input",
 CellLabel->"In[19]:=",
 CellID->1205672772],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"\<\"/Applications/Mathematica10.app/SystemFiles/Devices/\
DeviceDrivers/Demos/RandomSignalDemo.m\"\>", ",", "\<\"RandomSignalDemo\"\>", 
    ",", "0.001`"}], "}"}], "}"}]], "Output",
 ImageSize->{522, 33},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[19]=",
 CellID->86585912]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"SystemOpen", "/@", 
   RowBox[{"First", "/@", "%"}]}], ";"}]], "Input",
 CellLabel->"In[20]:=",
 CellID->1402993965],

Cell[TextData[{
 "For already loaded drivers, you can find out exactly which file is loaded \
using ",
 Cell[BoxData["DeviceDriverFile"], "InlineFormula"],
 ". This can be useful if you have multiple implementations of your driver \
and want to make sure that the correct version is loaded by the framework; or \
to reload the driver after you have edited it; or to simply learn finer \
points of the implementation of a driver. "
}], "Text",
 CellID->1426339035],

Cell["Open a demo driver and locate the driver file. ", "MathCaption",
 CellID->120209784],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", "\"\<PropertiesDemo\>\"", "]"}]}]], "Input",
 CellLabel->"In[31]:=",
 CellID->1731211508],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"PropertiesDemo\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"PropertiesDemo", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"PropertiesDemo\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"PropertiesDemo", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"PropertiesDemo", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"PropertiesDemo", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{344, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[31]=",
 CellID->1916312297]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceFramework`DeviceDriverFile", "[", "%", "]"}]], "Input",
 CellLabel->"In[32]:=",
 CellID->622962121],

Cell[BoxData["\<\"/Applications/Mathematica10.app/SystemFiles/Devices/\
DeviceDrivers/Demos/PropertiesDemo.m\"\>"], "Output",
 ImageSize->{508, 33},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[32]=",
 CellID->1648521620]
}, Open  ]],

Cell["\<\
Execute the following command to open the driver file as a notebook in your \
Wolfram Language session.\
\>", "MathCaption",
 CellID->1224742888],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NotebookOpen", "[", "%", "]"}]], "Input",
 CellLabel->"In[33]:=",
 CellID->273549399],

Cell[BoxData[
 TemplateBox[{FrontEndObject[
    LinkObject["vp6yn_shm", 3, 1]],189,
   "FrontEndObject[LinkObject[\"vp6yn_shm\", 3, 1]]","189",
   "\"PropertiesDemo.m\"",
   "\"/Applications/Mathematica10.app/SystemFiles/Devices/DeviceDrivers/Demos/\
PropertiesDemo.m\""},
  "NotebookObject"]], "Output",
 ImageSize->{253, 33},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[33]=",
 CellID->2016337393]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Accessing User-Visible Information about a Device", "Subsection",
 CellID->258574061],

Cell[BoxData[GridBox[{
   {
    RowBox[{"DeviceFramework`DeviceClass", "[", 
     StyleBox["dev", "TI"], "]"}], Cell[TextData[{
     "return the class of the device ",
     Cell[BoxData[
      StyleBox["dev", "TI"]], "InlineFormula"]
    }], "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceID", "[", 
     StyleBox["dev", "TI"], "]"}], Cell[TextData[{
     "return the ID of the device ",
     Cell[BoxData[
      StyleBox["dev", "TI"]], "InlineFormula"]
    }], "TableText"]},
   {
    RowBox[{
     RowBox[{"DeviceFramework`DeviceStatusLabels", "[", 
      StyleBox["dev", "TI"], "]"}], ",", 
     RowBox[{
      RowBox[{"DeviceFramework`DeviceStatusLabels", "[", 
       StyleBox["dev", "TI"], "]"}], "=", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["olbl", "TI"], ",", 
        StyleBox["clbl", "TI"]}], "}"}]}]}], "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "get and set status labels for the open and closed state of the device ",
     Cell[BoxData[
      StyleBox["dev", "TI"]], "InlineFormula"]
    }], "TableText"]}
  }]], "DefinitionBox",
 CellID->1189463968],

Cell["Accessing user-visible information about a device object. ", "Caption",
 CellID->395640253],

Cell[TextData[{
 "You can change status labels at any time during device operation. The new \
labels will be displayed the next time the front end creates a UI for your \
device object. Therefore, most frequently, you will create custom status \
labels in ",
 Cell[BoxData["\"\<PreconfigureFunction\>\""], "InlineFormula"],
 " before the device is presented to the user for the first time."
}], "Text",
 CellID->2133838645],

Cell["Change the built-in status labels for a demo device. ", "MathCaption",
 CellID->1115879082],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", "\"\<RandomSignalDemo\>\"", "]"}]}]], "Input",
 CellLabel->"In[112]:=",
 CellID->975154460],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[{{}, {{}, {}, 
            {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
             0.019444444444444445`], AbsoluteThickness[1.6], 
             LineBox[CompressedData["
1:eJxTTMoPSmViYGDQAGIQDQEf7PN82J8l8D20hwo4OHhOc93i9hbK53C4wHVO
mGn2SShfwCHD62nkZaeXUL6Ig8GZRo2NEtuhfAmHLTMiPz458xTKl3GYdt2B
eduFJ1C+gsOLeQ/8MudcgPKVHN7d2xMqHPQCyldxKJhmVpcY9wjKV3N4oiTm
uDjiJpSv4cCwzEzKZ1kalK/lwLHoxq/+v2+gfB2HI8/9frD8vA/l6zlUzbr1
/64VzH4Dh4ApZ5fczd0H5Rs6rMh36zr94jSUb+Rw5b5m1J5Xr6F8Y4d/yd0t
N57DzDdx+HbzxAmJKY+hfFOHuMTzJWaRz6F8Mwc5i9PNM6Jg6s0dEjqaV27z
2QvlWziE/YjxcYqH+dfS4cpsvwtV+2HhZeXwwbonZk4QLLytHfwEl1hk6cLU
2zg0VMnVFkb1Q/m2Dgn858/sP7wJyrdzsHBy1uEJPQbl2zusKN5gn81z3h4W
vSK+BRKOPg8g/AYHhzOi236qXIOZ7+iwYaK9dW/xK6i8o8O3tcuYJpfC4sPJ
IeGJsPH+mBNQeSeHXQVnLMQ3w8LD2YHj5FUrzz3Q9NHg7LDn/ItbW45fhMq7
OFwp7OR9y//GHgA4xrqb
              "]]}}, {}},
          AspectRatio->1,
          Axes->{False, False},
          AxesLabel->{None, None},
          AxesOrigin->{0, 0},
          DisplayFunction->Identity,
          Frame->{{True, True}, {True, True}},
          FrameLabel->{{None, None}, {None, None}},
          FrameTicks->{{None, None}, {None, None}},
          GridLines->{None, None},
          GridLinesStyle->Directive[
            GrayLevel[0.5, 0.4]],
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          Method->{},
          PlotRange->{{0., 40.}, {0, 0.9148808821794674}},
          PlotRangeClipping->True,
          PlotRangePadding->{{
             Scaled[0.02], 
             Scaled[0.02]}, {
             Scaled[0.02], 
             Scaled[0.05]}},
          Ticks->{Automatic, Automatic}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"RandomSignalDemo\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"RandomSignalDemo", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[{{}, {{}, {}, 
            {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
             0.019444444444444445`], AbsoluteThickness[1.6], 
             LineBox[CompressedData["
1:eJxTTMoPSmViYGDQAGIQDQEf7PN82J8l8D20hwo4OHhOc93i9hbK53C4wHVO
mGn2SShfwCHD62nkZaeXUL6Ig8GZRo2NEtuhfAmHLTMiPz458xTKl3GYdt2B
eduFJ1C+gsOLeQ/8MudcgPKVHN7d2xMqHPQCyldxKJhmVpcY9wjKV3N4oiTm
uDjiJpSv4cCwzEzKZ1kalK/lwLHoxq/+v2+gfB2HI8/9frD8vA/l6zlUzbr1
/64VzH4Dh4ApZ5fczd0H5Rs6rMh36zr94jSUb+Rw5b5m1J5Xr6F8Y4d/yd0t
N57DzDdx+HbzxAmJKY+hfFOHuMTzJWaRz6F8Mwc5i9PNM6Jg6s0dEjqaV27z
2QvlWziE/YjxcYqH+dfS4cpsvwtV+2HhZeXwwbonZk4QLLytHfwEl1hk6cLU
2zg0VMnVFkb1Q/m2Dgn858/sP7wJyrdzsHBy1uEJPQbl2zusKN5gn81z3h4W
vSK+BRKOPg8g/AYHhzOi236qXIOZ7+iwYaK9dW/xK6i8o8O3tcuYJpfC4sPJ
IeGJsPH+mBNQeSeHXQVnLMQ3w8LD2YHj5FUrzz3Q9NHg7LDn/ItbW45fhMq7
OFwp7OR9y//GHgA4xrqb
              "]]}}, {}},
          AspectRatio->1,
          Axes->{False, False},
          AxesLabel->{None, None},
          AxesOrigin->{0, 0},
          DisplayFunction->Identity,
          Frame->{{True, True}, {True, True}},
          FrameLabel->{{None, None}, {None, None}},
          FrameTicks->{{None, None}, {None, None}},
          GridLines->{None, None},
          GridLinesStyle->Directive[
            GrayLevel[0.5, 0.4]],
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          Method->{},
          PlotRange->{{0., 40.}, {0, 0.9148808821794674}},
          PlotRangeClipping->True,
          PlotRangePadding->{{
             Scaled[0.02], 
             Scaled[0.02]}, {
             Scaled[0.02], 
             Scaled[0.05]}},
          Ticks->{Automatic, Automatic}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"RandomSignalDemo\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"RandomSignalDemo", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 1, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 1}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{67., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"RandomSignalDemo", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$ = {"BufferLength"}, 
              Devices`DeviceAPI`DeviceDump`vals$$ = {5}, 
              Devices`DeviceAPI`DeviceDump`reg$$ = True}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm],
               ImageSizeCache->{93., {10., 15.}}],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"RandomSignalDemo", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{368, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[112]=",
 CellID->612694055]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeviceFramework`DeviceStatusLabels", "[", "dev", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"\"\<open\>\"", ",", "\"\<closed\>\""}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[109]:=",
 CellID->2014819927],

Cell[CellGroupData[{

Cell[BoxData["dev"], "Input",
 CellLabel->"In[110]:=",
 CellID->1512592291],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[{{}, {{}, {}, 
            {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
             0.019444444444444445`], AbsoluteThickness[1.6], 
             LineBox[CompressedData["
1:eJxTTMoPSmViYGDQAGIQDQEf7B3KTh+pOLTCHirgkJH87rDSy0tQPoeDR9Ws
h13C56F8AYeoGRvmHT3yCsoXcXgRmi8iU/wMypdw+KG14pXMLZh6GQcZYz9t
8cUweQUHr5iedBbtt1C+kgOPi6v4jQfXoXwVB5+r/b3VZ2DmqzlEHZuvJW/0
BMrXcLi048zPTn6YvJbDAzW1GnO/TVC+joPK7v/zVbdchfL1HDziLygVSb6E
8g0cjgQsTyoSg9lv6LCj7miVDyPMvUYOG5j3PpfnOQDlGzs4zGyp7NsHkzdx
OKDGqZaz9yKUb+oQYDHpwL6Q91C+mUPLrl6tssL7UL65w5sLG/o4s15D+RYO
C3ZrbvZJvQflWzqoWPA2MwbA3GPlUGC54e7Jnt1QvrVDyYSAHR2LYebZOMTc
XX2w5cIVKN/WwWNxTd57M5h/7Rz+OEwJOXT1DpRv77Dk17WmKROeQ/kODkd0
HcXmvoaGR4ODwwrJ+J3Gny9A5R0dWpY5HK9iewGVd3SwqLzPPP3MXai8k8Me
NV/n0nRo+mhwcmg7PYXTwfgRVN7ZwSXyzXb1OKh7GpwdGGR+yJQ8OgWVd3Fw
yUhbcnHeA3sA64a1bA==
              "]]}}, {}},
          AspectRatio->1,
          Axes->{False, False},
          AxesLabel->{None, None},
          AxesOrigin->{0, 0},
          DisplayFunction->Identity,
          Frame->{{True, True}, {True, True}},
          FrameLabel->{{None, None}, {None, None}},
          FrameTicks->{{None, None}, {None, None}},
          GridLines->{None, None},
          GridLinesStyle->Directive[
            GrayLevel[0.5, 0.4]],
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          Method->{},
          PlotRange->{{0., 40.}, {0, 0.9790948640018176}},
          PlotRangeClipping->True,
          PlotRangePadding->{{
             Scaled[0.02], 
             Scaled[0.02]}, {
             Scaled[0.02], 
             Scaled[0.05]}},
          Ticks->{Automatic, Automatic}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"RandomSignalDemo\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "open", "closed"}, Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"RandomSignalDemo", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{49., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[{{}, {{}, {}, 
            {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
             0.019444444444444445`], AbsoluteThickness[1.6], 
             LineBox[CompressedData["
1:eJxTTMoPSmViYGDQAGIQDQEf7B3KTh+pOLTCHirgkJH87rDSy0tQPoeDR9Ws
h13C56F8AYeoGRvmHT3yCsoXcXgRmi8iU/wMypdw+KG14pXMLZh6GQcZYz9t
8cUweQUHr5iedBbtt1C+kgOPi6v4jQfXoXwVB5+r/b3VZ2DmqzlEHZuvJW/0
BMrXcLi048zPTn6YvJbDAzW1GnO/TVC+joPK7v/zVbdchfL1HDziLygVSb6E
8g0cjgQsTyoSg9lv6LCj7miVDyPMvUYOG5j3PpfnOQDlGzs4zGyp7NsHkzdx
OKDGqZaz9yKUb+oQYDHpwL6Q91C+mUPLrl6tssL7UL65w5sLG/o4s15D+RYO
C3ZrbvZJvQflWzqoWPA2MwbA3GPlUGC54e7Jnt1QvrVDyYSAHR2LYebZOMTc
XX2w5cIVKN/WwWNxTd57M5h/7Rz+OEwJOXT1DpRv77Dk17WmKROeQ/kODkd0
HcXmvoaGR4ODwwrJ+J3Gny9A5R0dWpY5HK9iewGVd3SwqLzPPP3MXai8k8Me
NV/n0nRo+mhwcmg7PYXTwfgRVN7ZwSXyzXb1OKh7GpwdGGR+yJQ8OgWVd3Fw
yUhbcnHeA3sA64a1bA==
              "]]}}, {}},
          AspectRatio->1,
          Axes->{False, False},
          AxesLabel->{None, None},
          AxesOrigin->{0, 0},
          DisplayFunction->Identity,
          Frame->{{True, True}, {True, True}},
          FrameLabel->{{None, None}, {None, None}},
          FrameTicks->{{None, None}, {None, None}},
          GridLines->{None, None},
          GridLinesStyle->Directive[
            GrayLevel[0.5, 0.4]],
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          Method->{},
          PlotRange->{{0., 40.}, {0, 0.9790948640018176}},
          PlotRangeClipping->True,
          PlotRangePadding->{{
             Scaled[0.02], 
             Scaled[0.02]}, {
             Scaled[0.02], 
             Scaled[0.05]}},
          Ticks->{Automatic, Automatic}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"RandomSignalDemo\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "open", "closed"}, Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"RandomSignalDemo", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"RandomSignalDemo", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"RandomSignalDemo", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{369, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[110]=",
 CellID->604531316]
}, Open  ]],

Cell[BoxData[
 RowBox[{"DeviceClose", "[", "dev", "]"}]], "Input",
 CellLabel->"In[111]:=",
 CellID->1747068987]
}, Closed]],

Cell[CellGroupData[{

Cell["Accessing Internal Information About a Device", "Subsection",
 CellID->1494825346],

Cell[BoxData[GridBox[{
   {
    RowBox[{"DeviceFramework`DeviceInitObject", "[", 
     StyleBox["dev", "TI"], "]"}], "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "return the initialization object for the device ",
     Cell[BoxData[
      StyleBox["dev", "TI"]], "InlineFormula"]
    }], "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceManagerHandle", "[", 
     StyleBox["dev", "TI"], "]"}], "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "return the handle to the initialization object for the device ",
     Cell[BoxData[
      StyleBox["dev", "TI"]], "InlineFormula"]
    }], "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceHandle", "[", 
     StyleBox["dev", "TI"], "]"}], Cell[TextData[{
     "return the handle to the device ",
     Cell[BoxData[
      StyleBox["dev", "TI"]], "InlineFormula"]
    }], "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceObjectFromHandle", "[", 
     StyleBox["h", "TI"], "]"}], "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "return the device object for the handle ",
     Cell[BoxData[
      StyleBox["h", "TI"]], "InlineFormula"]
    }], "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceOpenArguments", "[", 
     StyleBox["dev", "TI"], "]"}], "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "return the arguments with which the device ",
     Cell[BoxData[
      StyleBox["dev", "TI"]], "InlineFormula"],
     " was opened"
    }], "TableText"]},
   {
    RowBox[{
     RowBox[{"DeviceFramework`DeviceDriverOption", "[", 
      RowBox[{
       StyleBox["class", "TI"], ",", 
       StyleBox[
        RowBox[{"\"\<\>", "opt", "\"\<\>"}], "TI"]}], "]"}], ",", 
     RowBox[{
      RowBox[{"DeviceFramework`DeviceDriverOption", "[", 
       RowBox[{
        StyleBox["class", "TI"], ",", 
        StyleBox[
         RowBox[{"\"\<\>", "opt", "\"\<\>"}], "TI"]}], "]"}], "=", 
      StyleBox["val", "TI"]}]}], "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "get and set the value of a device driver option ",
     Cell[BoxData["\"\<\!\(\*
StyleBox[\"opt\", \"TI\"]\)\>\""], "InlineFormula"],
     " for the specified class"
    }], "TableText"]}
  }]], "DefinitionBox",
 CellID->558985090],

Cell["Accessing internal objects kept by the framework. ", "Caption",
 CellID->19090],

Cell[TextData[{
 "Although ",
 Cell[BoxData["DeviceDriverOption"], "InlineFormula"],
 " can be called at any time, it is particularly useful for calling the \
parent's functions in a derived class."
}], "Text",
 CellID->1421252782],

Cell[TextData[{
 "This driver is based on the ",
 Cell[BoxData["\"\<RandomSignalDemo\>\""], "InlineFormula"],
 " and calls the parent's ",
 Cell[BoxData["\"\<ReadFunction\>\""], "InlineFormula"],
 " inside its own."
}], "MathCaption",
 CellID->534901493],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<rw\>\"", ",", "\"\<RandomSignalDemo\>\"", ",", 
    RowBox[{"\"\<ReadFunction\>\"", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"$randomTotal", "+=", 
         RowBox[{
          RowBox[{
           RowBox[{"DeviceFramework`DeviceDriverOption", "[", 
            RowBox[{"\"\<RandomSignalDemo\>\"", ",", "\"\<ReadFunction\>\""}],
             "]"}], "[", "Null", "]"}], "-", ".5"}]}], ")"}], "&"}], 
      ")"}]}]}], "]"}], ";"}]], "Input",
 CellLabel->"In[74]:=",
 CellID->722846509],

Cell["\<\
Reading from the device gives a list of accumulated random values, whereas \
reading from the parent gives independent values.\
\>", "MathCaption",
 CellID->2063451131],

Cell[BoxData[
 RowBox[{
  RowBox[{"$randomTotal", "=", "0"}], ";"}]], "Input",
 CellLabel->"In[84]:=",
 CellID->566285684],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{"DeviceReadList", "[", 
   RowBox[{"\"\<rw\>\"", ",", "200"}], "]"}], "]"}]], "Input",
 CellLabel->"In[85]:=",
 CellID->709743314],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1: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
      "]]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{0., 200.}, {-0.8084139577270888, 3.6000805054502494`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 ImageSize->{240, 145},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[85]=",
 CellID->677637140]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{"DeviceReadList", "[", 
   RowBox[{"\"\<RandomSignalDemo\>\"", ",", "200"}], "]"}], "]"}]], "Input",
 CellLabel->"In[86]:=",
 CellID->1283950604],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJw1Vgs4lPka/5Iue6JcOl3OYqdWklCEpOJnkmwpd7kMxpgxIyrUsXWO2q9O
Sa0Wu5bU9ERKDiVdtkStjyR1bIskFTVdRXLZjrOttVrn6f3P83jm+Xm/d97b
7/293yzZZl+FFsdx9aN////++Ol3gfrdIUn2Axf6BzwSS+fEJdwgPBGOHkHc
3tzrhPWQtWVG6cwtjwlPhSZVUzL45CHhGXDrbB3ojmsjbIQ4B+15T0q7CYuw
UPdpVb7qHuHZUNstvX7E4TVhU2gczfm/1xwnbAbNLsuO+OelhM0ht8rYtUO/
k7AFkpWxzbUBfYQt0e5otDNxrIawNbhe8Zd94xWEF6L+b1VvFtuw520gzpiR
unvnc8K2MOKmzBXPayK8CKketuvyf7lJ2A6a4cx86YVrhO3Bl2bMMfj+R8IO
0M5or4vXfUJ4MUol9ZPkO94SdoSOSbNFlf9Twktw2zb/0f1DDDsh5Z7zWVsl
68dSLDvxtnVwdjPhZWh0OJCbn1RPeDmCMqdIxtW0EnbG+cxD40bA+uOCtGin
Sf4BLB/Aba7VlOEn9z9iHjBtz/SaWs7m5wruYPKVb3PyyO6KbZ9X15R3MX8x
6rjwkvk3KT9+FBctXJI/+wXZVyCot0l19HkL2VeAN3uTskctkN0NcdaXj2+L
oXp5N3DfWVTeMd5L9pXoTx/OTmwsI/tKOBdmyd9O6yW7O+p/uFR5P5/6ybuD
vzGy1mAol+yr0Op6u8l+Hj3Pr4JB3QejDxtYPzzg8Vn12cjDxE/eAwtdwmvG
ZNwi+xfYlvSHWetq6if/BUYevXVPsWb1rUbFk8DFF/qJX/xqcM8uWZyITyf7
GmjNCeGObWb5rRmt5yKXVnGF7J4INK4ot8Irsntid0nUdBtvVt9aiFT3K0Wf
NJJ9LaSWm66KPUrIvg782Akjzqmsv+vQnbivK/grxmcvFH1/a0NP/0uye8Ep
otjv4kzGJ2+U31uZ8eA95QdvnN94ZeoaP+I/P2rXqZyTlUH1C97Im2it/LSd
+MD5oMiiL0F9hfgIH/Ab7F91ZP1M/j4Qc559jQLtu+CD+MlpNulriW+cLw5b
nXEYNKR84QtnldNt3pDF90V8yoKnF85TfYIvNHphx/7orCB/P2CrQbpu9mXy
9wNvcNNi/MRz5O+H1BszM765S3om+KH+7APD/TpMb/xx8Qw33BBO+cAfRfqF
J6/lk57x/jDljO07sogvgj9w8r3t9plMHwJg6jl+X/4Omg8CUFw/LStJyvgc
gDTL5ZdczUk/hAAcDtBVGQew/Q+E4Hrk4OVTpG8IRLv+T31Wd6hffCDKhq0r
N7ZQvkIg5M21Eyb83EX+68FtKftV67Pt5L8ejfq+840zr5L/emj2/sWwpYD6
I4w+X1BtVnummPyDkDZtks/RnLvkH4Rhkzqlw0XG5yC0JA15S36lfReCoLY4
WbVqP+NPMLy3+jpgBukhgsE9rOg/JzpG/sHIq3vQ1+vG6g9GW2/twX/eonly
IXDezZfGzOoh/xDUzKm9eSSH6UkILOW1W6ak0r4JIVCP7XSVbGT6GIpkR619
v/TQviAU2nuLU+/GdJB/KCSNhXojvox/oeCr589w5E6RvwSyEL1bh9zfkL8E
kg2x43I82D5K0LItXDyGo/kKEgwtTV7kGUrPc2EwyHG5m+vH9icMWw0bZs2+
xvoXBrtsPX9+BeNfGDxKU8sKCun3uXCoY1Qvs2wY/8LBGy4INhhk8cMhjHg/
fl5JeiyE40WL3Y7Y7EfkH4HGzutHlNrUH4zizaYdWWvoHvARqP/qJ7VJE81X
iIAqcdA+eDa731Jwovkyg3+kfMQiKUx/K+na3szqkcL8W8V3i57SfKVSTDy6
1707gu2nFFr/827OSaZ686TQixvo97Vg+UoB4xxto+vEH40Um5IMqy5rMX2L
RPlVwaWvg+YlioRTrH2jfi/Tg0gcP5C60qmH+CCNBOatzW2aS3Y+EjrOkekj
xdTfvEgIVcq61eyeC5HwXi0I5/5N+WkiEd5go44PYvovg3NCPNf2X6pHJIOO
ubuXXQnbBxniFYsPN3gRf6QyqBsGnhYkUD28DI7SOwNd+8meJ0PcqJ4Ol7H4
MsjU6uj2XMpfI8NUk6Na66Yz/kSB23DK9rdgep8RRaHC7F3tvR8ZH6PAy402
xmwn/kmjYOoybrLua1Z/FESnQ4dFj4sofhSSg5ospyQxvYpC2sOpf33TSvun
iYJOWNnJM6wfnBye7yd3mTTSPorkyKqcUDh/iPFJjtNxGdZfl7P4cqybvGzM
6zCmT3LUlzgnJPnSPPPk4Dct6rY6wO6FHLITsQk9Ela/HGVvnPaP/ED3iFPA
6NPpxV3tlJ9IgbyrLwz0KghDgROv0sQTeMJSBXb7mZgVOJBe8AoMHb/50vkx
i69AlqXY5LUh23cF1INfB4qiCGsU2CPoGS8uYPoVPcqPZ2OqOdJ7UTTqCg+O
uTGZ+oNo+OdWl92ppHqk0bDcNPDeoofd2+jR972gbu09Zyl+NPRcqj0HEphe
RWPipgK9CG+apyYaGcvf8WJd9v6rRKv6gn/iVuqHSIlDH3q+WTOT+Awl2rS3
nY5FA8VXQmT+yXXX3+n9hFciq1d5fstJ2p88JXDQbIFhPts/JQLLs5vFuqz/
StR8iBKPc2P3Q4WhSzvvn28ju0iFtKOLFNr6zyi+Chm/r/I61XmB4qvALbFL
+dczxj8VRLkfdqV/TvcpT4XyttAVWwvYvR79fZuiXUvdaF4aFerFX4aN9aF8
uRj0e+c8z1z5H5c/AXaP0b0=
      "]]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{0., 200.}, {0, 0.9978112284255538}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 ImageSize->{240, 152},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[86]=",
 CellID->941631939]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData["DeviceDriverOption"], "InlineFormula"],
 " also lets you dynamically change the value of the driver function during \
operation of the device."
}], "Text",
 CellID->942658522],

Cell[TextData[{
 "Originally, a device of this class reads off the sine of the parameter \
supplied to ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceRead"]],"paclet:ref/DeviceRead"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 "."
}], "MathCaption",
 CellID->1221805082],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<f\>\"", ",", 
    RowBox[{"\"\<ReadFunction\>\"", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Sin", "[", "#2", "]"}], "&"}], ")"}]}]}], "]"}], 
  ";"}]], "Input",
 CellLabel->"In[32]:=",
 CellID->639380560],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"DeviceRead", "[", 
     RowBox[{"\"\<f\>\"", ",", "i"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "0", ",", "20", ",", ".1"}], "}"}]}], "]"}], 
  "]"}]], "Input",
 CellLabel->"In[37]:=",
 CellID->60902332],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxVlnlUk2cWxuOCgsUCWiuCYFhElE1BCa48REAUKvu+JSEJoRZl6jaD1gaP
g1gOViuOSlUiRxxsLWJlQEAkghjZZFEWC0gURVZBKuJC60wP9/1jck5Ozi/P
ud993+97nvu9JqIdfpKpHA6n6n/fv34nPyPOnP//wLomtSb3aBH9r4mbTevN
PsZXEetiZXHxybq+JuLPsC3Wqm/NYBuxPkY0PHf15j4mXogwl+z5aXpPibko
WuAet/3cM2JT1P1ZVp7+uofYHC45kaen6fURW+Clttb3AUP9xJZwirHxqjw0
SLwMlYEGWRsfDBFbw9O48t3e5pfEtpj2xLWrLmWYeDlS461/TBxgvAKVfLUq
aYKxPQpO27UWljB2wMi80qTypYxXItjJYNF8D3b9VXDPb+x/o8/6O+LD1wPO
cZkDxDxotv70yKGL7ccJpnYhNo0dL4hX43RjxZj43HPiNcirrp991aKbeC1K
/qkomTigJl4H7X+bm68IaydeD+XzSLOvE5qJN+DBco+WG5n3iZ0R3lwQ76Rb
TgzY6p4+qLMle5LlgL1N72pe9y9lk7oLTmkXVk9dcWeS5S7Y5fVRtyqsgXQ+
FomKD6zd2UI6H68aRza6+HWQvhEuhraDX75Wk74RCuXgx6D0btJdcf/6Ihvb
qT2kuyLXuKOziNdLuhtK7z1N9LfrJ90NbXMauka7B0h3x+LvpqxZ6ztEujuG
Ld1WJO98SfomyKFaP7RpmPRNKB6MnOtbS8zxgN8gTyf6I9M98HG9dka6mumb
cXHAdA8SmL4ZDmfUY0lX2fW3oMi0baG7gvXfglbz4l/5boOke4I352bA8AW2
fk8kaNif2l/M9ueF4LxZW6tOsP17IX/sX/ODHJ6R/gUUqsTNvMwnpH+B6q6j
qlk3O0nfCsPST8Snh1pJ3wplVt53r540ku6NiA8OrQt8VaR7w6juVnuI239I
98EB55ryy7zjk88fPrBetsrOqqWU/OCDdTV3MftIzSQrffCDVp+d58gD8o8v
JlJWXdTpe0T1vtDS689Iy+yiel+UGbQZph+kvCt9oTkrvlxzBvO3H1JjxE8K
/Mn/8INOVffiYgnlQ+6HzbuMOu46Un6UfnizVGMfr5zl3R/LcyeS9adT/uAP
nbe6v9i/I5b7IyTg5cScTMqr0h92hXJrvdcsvwG4HL2m2X+cGAHYV2+paMoh
lgcgNn9zeJAWqw+ArUPf+B4DlvdAeAut9p56TOtBIM6M29R3hdB65YGYeBTd
tjKN9qMMhM21/GBbOct7EMYv2Dp/wqP7gSB0NlXzLxbS/ZIHQc4zexahSXlX
BuG4nbajheA3qg/G/EeZRwy/ekj1wdj2Y7NRzuFaqg+Gj/X9Wxs6yqg+GE9d
XHOKo85QfQgSl1xMN1h/fdIPCIFl4TzNYJ+75JcQ7LxwLTdZTH5ShmDa9utq
8S7yGycUCQXcC64e5EeEws/797HzMubXUKh7Apemc8jPylB4ShvOREvI75ww
2Dk2PnxyjPKAMGSm7RhO+4blJQzzNo7c2GtBeVKGoXWxtZ/gMOWNE45lbVla
t89SHhGONMOdgocxLK/hkB2yMDn3G7EyHAMnbPcMsLxzIqCj0Pk9+gExIvBt
9u6UrwJZfQTkV8sF/ofp+soIbPHm5JhtY/0j0fRmx6b8abQ+RKI90CHrbABb
fyTeXlFIrES0P2UkNEPLD4WvYPuPQrfO8n0qFc1DRCFb0jqeYcXuXxSSRoss
Z6honiqjkOg9cHDNEM1bTjTclDVLqttoHiMa5i0NBw/ZV1J9NErqTWr//j6P
6qOReD8Os3gX6PkL8EoVFFU2+/YkcwXoqLhtZZRVR34SwO/hqdDgMfKXQIAZ
lUke05+R/+QCNHS5y167kz8VAqQ8ql/iOsryLsD0WvUxo3jyt1qAz8f5Kstr
zP9C5IWYGmfcoHxwhbD+oD+AA5QfCNHxuKQ2/Q/Kl0CI6l35/Nv2LN9CFOXc
+sdVA8qnQgi3qP32n15neRViCr83N/g9sVqID99uONU8zPIvQlacpDbrBDFX
hPGZNmY/97B5IsL13fO0LvfT+1wgwpl3WfomWbQeuQhHUo/mhOvSehUiOKz0
kkasZnkXQRgm1Gszof2qRegtv/83y3p23omBblpIzoZNdL+4MViYEDG+xITm
J2LQ8iL7B3sxzVdBDHjH+Ee2SGn+ymOQary1Mjm+mvrHIPv4Ja9bJ0uofwwW
zNyzg+Mtp/4xSMiY8tmqw4XkHzGk6vSm2dvvTTJXjLfcaM2p8U3kJzHm/iy6
0r6zbZIFYhw+Eh2/dN1j8pcYnf4PdxxrJ78qxJCJk/KjtrG8i/Fi4MXs0bvk
d7UYqQf55/m97P0ngXVRS1pnFeWFK0FSnur9qJTlSYKy/rkeohLKm0ACqxT+
lTsVlEe5BM9bbj3b/Q3lVSFBwaBiPKOH5V2CxaUZoxZ/EqslsNfuyeisYPmX
Qn7Wf2aAEzFXCpeUV6bDEWyeSPHUUX+h2oH1l+KO6R/3jJV0/pBLcUnPTFek
QetXSGFhPFf2uSbLuxRvpl1J9qt7Tv2lWKz1LqI6jJ1/YvGhpF2uLKDzETcW
B0by/Afr26l/LHwaxh44DDRT/1hI+3XXNZ+tp/6x0JiStE06p4L6x0LlYOx5
M+Iy9Y9FSabjJU7jZXr+sag/NGZpY1dB/pOhbOxTDc2ievKfDMKLapuut3R+
hAznnZZcmdFJ50uBDEZbBV++vkl5l8vg1WxocVJA51OFDObmOVHZTZR3pQyh
guG8bu1e6i/DOUVy0jktdn6Pw/6QjO9LKyg/3Dio10WOtTkOOf8XKfwaCg==

      "]]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{0., 201.}, {-0.9999902065507035, 0.9995736030415051}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 ImageSize->{240, 136},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[37]=",
 CellID->129285429]
}, Open  ]],

Cell["This changes the driver to read off a sawtooth wave.", "MathCaption",
 CellID->1794238086],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeviceFramework`DeviceDriverOption", "[", 
    RowBox[{"\"\<f\>\"", ",", "\"\<ReadFunction\>\""}], "]"}], "=", 
   RowBox[{
    RowBox[{"Mod", "[", 
     RowBox[{"#2", ",", "5"}], "]"}], "&"}]}], ";"}]], "Input",
 CellLabel->"In[40]:=",
 CellID->794140228],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"DeviceRead", "[", 
     RowBox[{"\"\<f\>\"", ",", "i"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "0", ",", "20", ",", ".1"}], "}"}]}], "]"}], 
  "]"}]], "Input",
 CellLabel->"In[41]:=",
 CellID->503945891],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJxd1klrFEEYxvE2bnGPy8GDh1ZERESiiRrXvDFxSTQmmWQme1Kz9MzkpB+h
PoYGD/01vNU1oCJ48tYgCIIHRRFFETPm/0K/3RCKp6vq6aTpH5WTtSelpCuK
oo3Nn864dX0ZjOwl688710vud5M3yD3S39e53pGPMf+efFy2xox8gvUfyLG0
mp3rI/kU+z+RT8vrV53rM/mM2N/zLOu/ks/R/418nv3fyRd43g9yL30/yRfp
+0W+RN9vch99f8j99P0lXxZ9b1vDFdZrvkr/NvIA+7vI13jedvJ1xh2MN+jT
fJO+neRb9O0i36ZvN3mQsZtR6CN7oW8P80P07WV+iL59zN9h3M/8HfrI0TB9
B5gfpu8g8yP0HWJ+hPs9jHdZT/Z36df5e/J/e99h5u/xPHJ0n/EI8/fpI0cP
6NP5B/w+R5kfpY/sR7mv15iEvA8/Jqnx8VAk78M/ZF59PKIPH/6RDBgf49LO
+/Dj7Fcfj+Vt3od/TJ/6mJAXeR9+ouBjkv34kEmehw8/SR8+wiR96mPK+pAp
+vDhp+jDR5jS98dYkjd5H1KyPnyJ/V1bOZQKPqYZ8SDT9JH9tPURpulTHzPW
h8xwXz3MyKu8jzDD368+yvThQ8rWhy+zDg+hTJ/6qNCHD6nQhw9fsT5ChX36
/c9KM+9DZvn71css+/EQZgs+5hj5/mWO56uHOfrIYa7gY976kHnuc/nNvJ7z
Eebxoj4WrA9ZsD78An34CLpefSzK07wPWbQ+/KL1ERbpUx9LrMeHLOEPH37J
+ghL1ke0TB8+ZJk+fPhl+vARlq2PaMX6kBV9f7z/FdaTwwrfi54fq9aHrFof
fpV1eAir9On54ejDR+ysD3HWh3PsUx+OPnLqrI/grI/MFc6PKiMe4ip9ZKla
H65a8FG1PlLt4/sPup6cVa2PqGZ9xDXrQ2qs4/t3tYKPmvWR1qyPULM+Mu3T
q259xHXrQ+rWh6sXfNTpw0datz5C3frI6oXzo2F9xA368CEN68M1pNf4aFgf
aYPn4SNoHz6yhvURJfThI06sD0now4dL9P3x/hPrI03kWd5HSKyPLMGjnh9N
RjzETetDmvThwzWtD9+kDx+p9ul50bQ+Mu3T86NlfcQt+vAhLdbhwbWsD9+i
Dx9py/oI2oePTPv0+29bH3Gbfj1P2taHa+NR/99q06Pff9v6CNpHztqF82ON
PnK8xv0o+gcRJBBE
      "]]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{0., 201.}, {0, 4.900000000000002}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 ImageSize->{240, 159},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[41]=",
 CellID->1816722090]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["The Default Property Handlers ", "Subsection",
 CellID->118403969],

Cell["\<\
When defining a custom property handler for your class, it is often \
convenient to call the default handler at some point so that your handler \
would extend the built-in one rather than recreate it from scratch.\
\>", "Text",
 CellID->395098347],

Cell[BoxData[GridBox[{
   {
    RowBox[{"DeviceFramework`DeviceGetProperty", "[", 
     RowBox[{
      StyleBox["dev", "TI"], ",", 
      StyleBox["prop", "TI"]}], "]"}], "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "execute the default handler for ",
     Cell[BoxData["\"\<GetPropertyFunction\>\""], "InlineFormula"]
    }], "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceSetProperty", "[", 
     RowBox[{
      StyleBox["dev", "TI"], ",", 
      StyleBox["prop", "TI"], ",", 
      StyleBox["val", "TI"]}], "]"}], "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "execute the default handler for ",
     Cell[BoxData["\"\<SetPropertyFunction\>\""], "InlineFormula"]
    }], "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceDefaultStatusLabels", "[", "]"}], 
    "\[SpanFromLeft]"},
   {"", Cell[
    "give a list of the default open and closed status labels", "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceDefaultStatusLabels", "[", 
     StyleBox["p", "TI"], "]"}], "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "give the default status labels based on the parameter ",
     Cell[BoxData[
      StyleBox["p", "TI"]], "InlineFormula"],
     " "
    }], "TableText"]}
  }]], "DefinitionBox",
 CellID->1411388259],

Cell["Using the default property handlers.", "Caption",
 CellID->98104251]
}, Closed]],

Cell[CellGroupData[{

Cell["Class Properties", "Subsection",
 CellID->2011240917],

Cell[TextData[{
 "When the framework needs to assign standardized properties in a particular \
instance of ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceObject"]],"paclet:ref/DeviceObject"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ", it takes the values from ",
 StyleBox["class properties",
  FontSlant->"Italic"],
 ". Class properties are specified by the ",
 Cell[BoxData["\"\<Properties\>\""], "InlineFormula"],
 " options of ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceClassRegister"]],"paclet:ref/DeviceClassRegister"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " and can be accessed at any time after the driver is loaded."
}], "Text",
 CellID->552691651],

Cell[BoxData[GridBox[{
   {
    RowBox[{"DeviceFramework`DeviceClassProperties", "[", 
     StyleBox["class", "TI"], "]"}], "\[SpanFromLeft]"},
   {"", Cell["\<\
return a list of available properties for the specified class\
\>", "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceClassProperties", "[", 
     RowBox[{
      StyleBox["class", "TI"], ",", 
      StyleBox["prop", "TI"]}], "]"}], "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "return the value of the a property ",
     Cell[BoxData[
      StyleBox["prop", "TI"]], "InlineFormula"],
     " for the specified class"
    }], "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceClassProperties", "[", 
     RowBox[{
      StyleBox["class", "TI"], ",", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox[
         StyleBox["p", "TI"], 
         StyleBox["1", "TR"]], ",", 
        SubscriptBox[
         StyleBox["p", "TI"], 
         StyleBox["2", "TR"]], ",", "\[Ellipsis]"}], "}"}]}], "]"}], 
    "\[SpanFromLeft]"},
   {"", Cell["return the values of multiple properties", "TableText"]},
   {
    RowBox[{
     RowBox[{
      RowBox[{"DeviceFramework`DeviceClassProperties", "[", 
       RowBox[{
        StyleBox["class", "TI"], ",", 
        StyleBox["prop", "TI"]}], "]"}], "=", 
      StyleBox["val", "TI"]}], ",", 
     RowBox[{
      RowBox[{"DeviceFramework`DeviceClassProperties", "[", 
       RowBox[{
        StyleBox["class", "TI"], ",", 
        RowBox[{"{", 
         RowBox[{
          SubscriptBox[
           StyleBox["p", "TI"], 
           StyleBox["1", "TR"]], ",", 
          SubscriptBox[
           StyleBox["p", "TI"], 
           StyleBox["2", "TR"]], ",", "\[Ellipsis]"}], "}"}]}], "]"}], "=", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox[
         StyleBox["v", "TI"], 
         StyleBox["1", "TR"]], ",", 
        SubscriptBox[
         StyleBox["v", "TI"], 
         StyleBox["2", "TR"]], ",", "\[Ellipsis]"}], "}"}]}]}], 
    "\[SpanFromLeft]"},
   {"", Cell["set the values of the the specified properties", "TableText"]}
  }]], "DefinitionBox",
 CellID->1177032993],

Cell["Accessing class properties. ", "Caption",
 CellID->331706967],

Cell["\<\
Class properties are available even before any device objects are created for \
the class. \
\>", "MathCaption",
 CellID->1274915335],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "DeviceFramework`DeviceDriverLoad", "[", "\"\<PropertiesDemo\>\"", "]"}], 
  ";"}]], "Input",
 CellLabel->"In[118]:=",
 CellID->1448203388],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceFramework`DeviceClassProperties", "[", 
  "\"\<PropertiesDemo\>\"", "]"}]], "Input",
 CellLabel->"In[119]:=",
 CellID->2057689226],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"P1\"\>", ",", "\<\"P2\"\>", ",", "\<\"X\"\>"}], 
  "}"}]], "Output",
 ImageSize->{75, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[119]=",
 CellID->1742640817]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceFramework`DeviceClassProperties", "[", 
  RowBox[{"\"\<PropertiesDemo\>\"", ",", "\"\<P1\>\""}], "]"}]], "Input",
 CellLabel->"In[122]:=",
 CellID->1878566159],

Cell[BoxData["\<\"p1\"\>"], "Output",
 ImageSize->{18, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[122]=",
 CellID->756856119]
}, Open  ]],

Cell["Changing device properties does not alter class properties.", \
"MathCaption",
 CellID->1182233533],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev1", "=", 
  RowBox[{"DeviceOpen", "[", 
   RowBox[{"\"\<PropertiesDemo\>\"", ",", "1"}], "]"}]}]], "Input",
 CellLabel->"In[129]:=",
 CellID->2066652910],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"PropertiesDemo\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (1)", "Not connected (1)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"PropertiesDemo", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{111., {5., 10.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"PropertiesDemo\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (1)", "Not connected (1)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"PropertiesDemo", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"PropertiesDemo", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"PropertiesDemo", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{344, 66},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[129]=",
 CellID->2112428815]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"dev1", "[", "\"\<P1\>\"", "]"}], "=", "\"\<newP1\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[130]:=",
 CellID->2146411916],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceFramework`DeviceClassProperties", "[", 
  RowBox[{"\"\<PropertiesDemo\>\"", ",", "\"\<P1\>\""}], "]"}]], "Input",
 CellLabel->"In[127]:=",
 CellID->935150852],

Cell[BoxData["\<\"p1\"\>"], "Output",
 ImageSize->{18, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[127]=",
 CellID->1370365149]
}, Open  ]],

Cell["\<\
Conversely, changing class properties does not reset properties of the \
existing devices, but it does alter properties of new devices in the class.\
\>", "MathCaption",
 CellID->1400755070],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeviceFramework`DeviceClassProperties", "[", 
    RowBox[{"\"\<PropertiesDemo\>\"", ",", "\"\<P1\>\""}], "]"}], "=", 
   "\"\<classP1\>\""}], ";"}]], "Input",
 CellLabel->"In[132]:=",
 CellID->1391441501],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev1", "[", "\"\<P1\>\"", "]"}]], "Input",
 CellLabel->"In[133]:=",
 CellID->799180110],

Cell[BoxData["\<\"newP1\"\>"], "Output",
 ImageSize->{39, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[133]=",
 CellID->1457380432]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev2", "=", 
  RowBox[{"DeviceOpen", "[", 
   RowBox[{"\"\<PropertiesDemo\>\"", ",", "2"}], "]"}]}]], "Input",
 CellLabel->"In[134]:=",
 CellID->2141926589],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"PropertiesDemo\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (2)", "Not connected (2)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"PropertiesDemo", 2}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{111., {5., 10.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"PropertiesDemo\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (2)", "Not connected (2)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"PropertiesDemo", 2}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"PropertiesDemo", 2}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"PropertiesDemo", 2}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{344, 66},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[134]=",
 CellID->1091806662]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev2", "[", "\"\<P1\>\"", "]"}]], "Input",
 CellLabel->"In[135]:=",
 CellID->1894288266],

Cell[BoxData["\<\"classP1\"\>"], "Output",
 ImageSize->{53, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[135]=",
 CellID->857819887]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Class Preferences", "Subsection",
 CellID->1385585226],

Cell[TextData[{
 StyleBox["Class preferences",
  FontSlant->"Italic"],
 ", assessed through ",
 Cell[BoxData["DeviceClassPreferences"], "InlineFormula"],
 ", is a more flexible storage for a class, which is persistent between \
Wolfram Language sessions. Preferences are independent of the device driver, \
so you can call ",
 Cell[BoxData["DeviceClassPreferences"], "InlineFormula"],
 " before, after, or without ever loading the driver; and that call does not \
load the driver."
}], "Text",
 CellID->846557753],

Cell[BoxData[GridBox[{
   {
    RowBox[{"DeviceFramework`DeviceClassPreferences", "[", 
     StyleBox["class", "TI"], "]"}], "\[SpanFromLeft]"},
   {"", Cell["\<\
return an association of available preferences for the specified class\
\>", "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceClassPreferences", "[", 
     RowBox[{
      StyleBox["class", "TI"], ",", 
      StyleBox["pref", "TI"]}], "]"}], "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "return the value of the preference ",
     Cell[BoxData[
      StyleBox["pref", "TI"]], "InlineFormula"],
     " for the specified class"
    }], "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceClassPreferences", "[", 
     RowBox[{
      StyleBox["class", "TI"], ",", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox[
         StyleBox["p", "TI"], 
         StyleBox["1", "TR"]], ",", 
        SubscriptBox[
         StyleBox["p", "TI"], 
         StyleBox["2", "TR"]], ",", "\[Ellipsis]"}], "}"}]}], "]"}], 
    "\[SpanFromLeft]"},
   {"", Cell["return the values of multiple preferences", "TableText"]},
   {
    RowBox[{
     RowBox[{
      RowBox[{"DeviceFramework`DeviceClassPreferences", "[", 
       RowBox[{
        StyleBox["class", "TI"], ",", 
        StyleBox["pref", "TI"]}], "]"}], "=", 
      StyleBox["val", "TI"]}], ",", 
     RowBox[{
      RowBox[{"DeviceFramework`DeviceClassPreferences", "[", 
       RowBox[{
        StyleBox["class", "TI"], ",", 
        RowBox[{"{", 
         RowBox[{
          SubscriptBox[
           StyleBox["p", "TI"], 
           StyleBox["1", "TR"]], ",", 
          SubscriptBox[
           StyleBox["p", "TI"], 
           StyleBox["2", "TR"]], ",", "\[Ellipsis]"}], "}"}]}], "]"}], "=", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox[
         StyleBox["v", "TI"], 
         StyleBox["1", "TR"]], ",", 
        SubscriptBox[
         StyleBox["v", "TI"], 
         StyleBox["2", "TR"]], ",", "\[Ellipsis]"}], "}"}]}]}], 
    "\[SpanFromLeft]"},
   {"", Cell["set the values of the specified preferences", "TableText"]},
   {
    RowBox[{
     RowBox[{"DeviceFramework`DeviceClassPreferences", "[", 
      StyleBox["class", "TI"], "]"}], "=", 
     StyleBox["assoc", "TI"]}], "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "assign the class preferences to ",
     Cell[BoxData[
      StyleBox["assoc", "TI"]], "InlineFormula"]
    }], "TableText"]},
   {
    RowBox[{
     RowBox[{
      RowBox[{"DeviceFramework`DeviceClassPreferences", "[", 
       StyleBox["class", "TI"], "]"}], 
      StyleBox[
       RowBox[{"=", 
        StyleBox[".", "TI"]}]]}], ",", 
     RowBox[{
      RowBox[{"DeviceFramework`DeviceClassPreferences", "[", 
       RowBox[{
        StyleBox["class", "TI"], ",", 
        StyleBox["pref", "TI"]}], "]"}], 
      StyleBox[
       RowBox[{"=", 
        StyleBox[".", "TI"]}]]}], ",", 
     RowBox[{
      RowBox[{"DeviceFramework`DeviceClassPreferences", "[", 
       RowBox[{
        StyleBox["class", "TI"], ",", 
        RowBox[{"{", 
         RowBox[{
          SubscriptBox[
           StyleBox["p", "TI"], 
           StyleBox["1", "TR"]], ",", 
          SubscriptBox[
           StyleBox["p", "TI"], 
           StyleBox["2", "TR"]], ",", "\[Ellipsis]"}], "}"}]}], "]"}], 
      "=."}]}], "\[SpanFromLeft]"},
   {"", Cell[
    "clear class preferences or remove the specified keys ", "TableText"]}
  }]], "DefinitionBox",
 CellID->462132275],

Cell["Accessing a set of class preferences. ", "Caption",
 CellID->218918767],

Cell[TextData[{
 "The association of class preferences can contain arbitrary key-value pairs. \
They are always checked internally at the outset of ",
 Cell[BoxData["DeviceClassRegister"], "InlineFormula"],
 ". If the preferences happen to contain keys corresponding to options of ",
 Cell[BoxData["DeviceClassRegister"], "InlineFormula"],
 ", their values take precedence over options specified in the driver."
}], "Text",
 CellID->1016993296],

Cell[TextData[{
 "Save the ",
 Cell[BoxData["\"\<Properties\>\""], "InlineFormula"],
 " preferences for a class."
}], "MathCaption",
 CellID->783979399],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassPreferences", "[", 
   RowBox[{"\"\<prefs\>\"", ",", "\"\<Properties\>\""}], "]"}], "=", 
  RowBox[{"{", 
   RowBox[{"\"\<a\>\"", "\[Rule]", "1"}], "}"}]}]], "Input",
 CellLabel->"In[1]:=",
 CellID->1529584648],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", "\[Rule]", "1"}], "}"}]], "Output",
 ImageSize->{49, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[1]=",
 CellID->24866333]
}, Open  ]],

Cell[TextData[{
 "When a driver is being created, the value from its preferences is used \
instead of the value prescribed by the ",
 Cell[BoxData["DeviceClassRegister"], "InlineFormula"],
 " statement, which, in this case, calls for simply copying properties from \
the parent class."
}], "MathCaption",
 CellID->1667771204],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<prefs\>\"", ",", "\"\<PropertiesDemo\>\""}], "]"}], 
  ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->1274064984],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", "\"\<prefs\>\"", "]"}]}]], "Input",
 CellLabel->"In[3]:=",
 CellID->650741851],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"prefs\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"prefs", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"prefs\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"prefs", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"prefs", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"prefs", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->1316631213]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "[", "\"\<Properties\>\"", "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->1573525378],

Cell[BoxData[
 RowBox[{"{", "\<\"a\"\>", "}"}]], "Output",
 ImageSize->{25, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->949298203]
}, Open  ]],

Cell[BoxData[
 RowBox[{"DeviceClose", "[", "dev", "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->1363650644],

Cell["Clear preferences and reevaluate the class definition.", "MathCaption",
 CellID->484797544],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "DeviceFramework`DeviceClassPreferences", "[", "\"\<prefs\>\"", "]"}], 
  "=."}]], "Input",
 CellLabel->"In[6]:=",
 CellID->439365290],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<prefs\>\"", ",", "\"\<PropertiesDemo\>\""}], "]"}], 
  ";"}]], "Input",
 CellLabel->"In[7]:=",
 CellID->589720170],

Cell["\<\
In the absence of preferences, this class's properties are derived from the \
parent class, as requested.\
\>", "MathCaption",
 CellID->930892924],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", "\"\<prefs\>\"", "]"}]}]], "Input",
 CellLabel->"In[8]:=",
 CellID->474775464],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"prefs\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"prefs", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"prefs\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"prefs", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"prefs", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"prefs", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{311, 64},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[8]=",
 CellID->1198884258]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "[", "\"\<Properties\>\"", "]"}]], "Input",
 CellLabel->"In[9]:=",
 CellID->857287178],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"P1\"\>", ",", "\<\"P2\"\>", 
   ",", "\<\"X\"\>"}], "}"}]], "Output",
 ImageSize->{93, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[9]=",
 CellID->1956148052]
}, Open  ]],

Cell["\<\
You can set and query device class preferences at any time during a Wolfram \
Language session. In particular, preferences are useful for storing data \
needed for device discovery or for simply setting a flag indicating that \
third-party software required by your driver has been installed on the user's \
machine. \
\>", "Text",
 CellID->87280912],

Cell["\<\
Devices of this class are not discoverable unless a flag is set in the class \
preferences.\
\>", "MathCaption",
 CellID->198957083],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<f\>\"", ",", 
    RowBox[{"\"\<FindFunction\>\"", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"Lookup", "[", 
          RowBox[{
           RowBox[{
           "DeviceFramework`DeviceClassPreferences", "[", "\"\<f\>\"", "]"}], 
           ",", "\"\<installed\>\"", ",", "False"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"{", "}"}], "}"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], "&"}], ")"}]}]}], "]"}], ";"}]], "Input",
 CellLabel->"In[11]:=",
 CellID->239655602],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindDevices", "[", "\"\<f\>\"", "]"}]], "Input",
 CellLabel->"In[12]:=",
 CellID->1359864689],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 ImageSize->{18, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[12]=",
 CellID->1724856649]
}, Open  ]],

Cell["After setting the flag, a device can be found.", "MathCaption",
 CellID->783948890],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeviceFramework`DeviceClassPreferences", "[", 
    RowBox[{"\"\<f\>\"", ",", "\"\<installed\>\""}], "]"}], "=", "True"}], 
  ";"}]], "Input",
 CellLabel->"In[13]:=",
 CellID->1016819885],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindDevices", "[", "\"\<f\>\"", "]"}]], "Input",
 CellLabel->"In[14]:=",
 CellID->16944369],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   RowBox[{
    TagBox["DeviceObject",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False}, 
     PanelBox[
      PaneSelectorBox[{False->GridBox[{
         {
          PaneBox[
           ButtonBox[
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEBitmaps", "SquarePlusIconMedium"],
             ImageSizeCache->{12., {0., 12.}}],
            Appearance->None,
            ButtonFunction:>(Typeset`open$$ = True),
            Evaluator->Automatic,
            Method->"Preemptive"],
           Alignment->{Center, Center},
           
           ImageSize->
            Dynamic[{
             Automatic, 
              3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}]], 
          GraphicsBox[
           {Thickness[0.038461538461538464`], 
            {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
             FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
              3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
              1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
              0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
              25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
              24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
            {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
             JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
              3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
              1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
              0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
              25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
              24.605}, {25.5, 23.5}, {25.5, 2.5}}},
              CurveClosed->{1}]}, 
            {FaceForm[{RGBColor[
             0.45999999999999996`, 0.45999999999999996`, 
              0.45999999999999996`], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
              20.542}, {11.020999999999999`, 20.542}}}]}, 
            {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              15.979000000000001`, 16.541999999999998`}, {10.020999999999999`,
               16.541999999999998`}, {10.020999999999999`, 10.542}, {
              12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
              13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
              15.979000000000001`, 10.542}, {15.979000000000001`, 
              16.541999999999998`}}}]}},
           AspectRatio->Automatic,
           ImageSize->{Automatic, 
             Dynamic[3.5 CurrentValue["FontCapHeight"]]},
           PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
            {
             RowBox[{
              TagBox["\<\"Class: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["\<\"f\"\>",
               "SummaryItem"]}], 
             RowBox[{
              TagBox["\<\"ID: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["1",
               "SummaryItem"]}]},
            {
             RowBox[{
              TagBox["\<\"Status: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox[
               DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                 Style[
                  Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                   9, ImageMargins -> {{3, 3}, {2, 0}}, 
                   BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                  False], 
                 Style[
                  Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                   9, ImageMargins -> {{3, 3}, {2, 0}}, 
                   BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                  False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                 Opacity[1], 
                 Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                "Connected", "Not connected"}, 
                Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"f", 1}], 
                Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
                Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
                DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                  Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                 ImageSizeCache->{94., {5., 9.}}],
                DynamicModuleValues:>{}],
               "SummaryItem"]}], "\[SpanFromLeft]"}
           },
           AutoDelete->False,
           
           BaseStyle->{
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
           GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
        },
        AutoDelete->False,
        BaselinePosition->{1, 1},
        GridBoxAlignment->{"Rows" -> {{Top}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
         {
          PaneBox[
           ButtonBox[
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEBitmaps", "SquarePlusIconMedium"]],
            Appearance->None,
            ButtonFunction:>(Typeset`open$$ = False),
            Evaluator->Automatic,
            Method->"Preemptive"],
           Alignment->{Center, Center},
           
           ImageSize->
            Dynamic[{
             Automatic, 
              3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}]], 
          GraphicsBox[
           {Thickness[0.038461538461538464`], 
            {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
             FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
              3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
              1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
              0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
              25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
              24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
            {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
             JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
              3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
              1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
              0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
              25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
              24.605}, {25.5, 23.5}, {25.5, 2.5}}},
              CurveClosed->{1}]}, 
            {FaceForm[{RGBColor[
             0.45999999999999996`, 0.45999999999999996`, 
              0.45999999999999996`], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
              20.542}, {11.020999999999999`, 20.542}}}]}, 
            {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
              1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
              15.979000000000001`, 16.541999999999998`}, {10.020999999999999`,
               16.541999999999998`}, {10.020999999999999`, 10.542}, {
              12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
              13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
              15.979000000000001`, 10.542}, {15.979000000000001`, 
              16.541999999999998`}}}]}},
           AspectRatio->Automatic,
           ImageSize->{Automatic, 
             Dynamic[3.5 CurrentValue["FontCapHeight"]]},
           PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
            {
             RowBox[{
              TagBox["\<\"Class: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["\<\"f\"\>",
               "SummaryItem"]}], 
             RowBox[{
              TagBox["\<\"ID: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox["1",
               "SummaryItem"]}]},
            {
             RowBox[{
              TagBox["\<\"Status: \"\>",
               "SummaryItemAnnotation"], "\[InvisibleSpace]", 
              TagBox[
               DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                 Style[
                  Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                   9, ImageMargins -> {{3, 3}, {2, 0}}, 
                   BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                  False], 
                 Style[
                  Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                   9, ImageMargins -> {{3, 3}, {2, 0}}, 
                   BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                  False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                 Opacity[1], 
                 Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                "Connected", "Not connected"}, 
                Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"f", 1}], 
                Devices`DeviceAPI`DeviceDump`ind$$, 
                Devices`DeviceAPI`DeviceDump`indr$$}, 
                DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                  Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
                DynamicModuleValues:>{}],
               "SummaryItem"]}], "\[SpanFromLeft]"},
            {
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"f", 1}], Devices`DeviceAPI`DeviceDump`props$$, 
               Devices`DeviceAPI`DeviceDump`vals$$, 
               Devices`DeviceAPI`DeviceDump`reg$$}, 
               
               DynamicBox[ToBoxes[
                Devices`DeviceAPI`DeviceDump`reg$$ = 
                  DeviceFramework`DeviceRegisteredQ[
                   Devices`DeviceAPI`DeviceDump`d$$]; 
                 Devices`DeviceAPI`DeviceDump`props$$ = 
                  DeviceFramework`DeviceExternalProperties[
                   Devices`DeviceAPI`DeviceDump`d$$]; 
                 Devices`DeviceAPI`DeviceDump`vals$$ = 
                  Devices`DeviceAPI`DeviceDump`d$$[
                   Devices`DeviceAPI`DeviceDump`props$$]; Column[
                   Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                    MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"], "\[SpanFromLeft]"}
           },
           AutoDelete->False,
           
           BaseStyle->{
            ShowStringCharacters -> False, NumberMarks -> False, 
             PrintPrecision -> 3, ShowSyntaxStyles -> False},
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
           GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
        },
        AutoDelete->False,
        BaselinePosition->{1, 1},
        GridBoxAlignment->{"Rows" -> {{Top}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
       Typeset`open$$],
       ImageSize->Automatic],
      BaselinePosition->Baseline],
     DynamicModuleValues:>{}], "]"}],
   DeviceObject[{"f", 1}],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",
 ImageSize->{325, 62},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[14]=",
 CellID->1316168379]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Determining Device State", "Subsection",
 CellID->218225314],

Cell[TextData[{
 "In addition to top-level functions ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceClose"]],"paclet:ref/DeviceClose"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Devices"]],"paclet:ref/Devices"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ", and ",
 Cell[BoxData["DeviceOpenQ"], "InlineFormula"],
 ", which, respectively, open, close, test, and give a list of all devices \
registered in a current session\[LongDash]whether open or \
closed\[LongDash]the framework provides several complementing functions for \
analogous, but less common operations."
}], "Text",
 CellID->378661383],

Cell[BoxData[GridBox[{
   {
    RowBox[{"DeviceFramework`OpenDevices", "[", "]"}], Cell[
    "list of currently open devices", "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceRegisteredQ", "[", 
     StyleBox["dev", "TI"], "]"}], "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "test whether the device ",
     Cell[BoxData[
      StyleBox["dev", "TI"]], "InlineFormula"],
     " is registered in the current Wolfram Langauage session"
    }], "TableText"]},
   {
    RowBox[{"DeviceFramework`DeviceDeregister", "[", 
     StyleBox["dev", "TI"], "]"}], "\[SpanFromLeft]"},
   {"", Cell[TextData[{
     "deregister and completely remove the device ",
     Cell[BoxData[
      StyleBox["dev", "TI"]], "InlineFormula"],
     " from the current session"
    }], "TableText"]}
  }]], "DefinitionBox",
 CellID->529879798],

Cell["Testing and changing the device state.", "Caption",
 CellID->75080877],

Cell[TextData[{
 Cell[BoxData["DeviceDeregister"], "InlineFormula"],
 " also closes a device if it is open. This function can be useful for \
cleaning slate when developing a driver."
}], "Text",
 CellID->18486029],

Cell["\<\
Create a convenience palette to deregister all devices in the current session.\
\>", "MathCaption",
 CellID->1633462499],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Button", "[", 
   RowBox[{"\"\<DeregisterAll\>\"", ",", 
    RowBox[{"DeviceFramework`DeviceDeregister", "[", 
     RowBox[{"Devices", "[", "]"}], "]"}]}], "]"}], "//", 
  "CreatePalette"}]], "Input",
 CellLabel->"In[25]:=",
 CellID->173277445],

Cell[BoxData[
 TemplateBox[{FrontEndObject[
    LinkObject["mdngv_shm", 3, 1]],491,
   "FrontEndObject[LinkObject[\"mdngv_shm\", 3, 1]]","491","\"Untitled-47\""},
  "NotebookObjectUnsaved"]], "Output",
 ImageSize->{215, 33},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[25]=",
 CellID->1413811212]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Inheritance", "Section",
 CellID->699998962],

Cell[TextData[{
 "The ",
 "Device Framework",
 " supports \"inheritance\". ",
 Cell[BoxData[
  RowBox[{"DeviceClassRegister", "[", 
   RowBox[{"\"\<\!\(\*
StyleBox[\"class\", \"TI\"]\)\>\"", ",", "\"\<\!\(\*
StyleBox[\"parent\", \"TI\"]\)\>\"", ",", 
    StyleBox["opts", "TI"]}], "]"}]], "InlineFormula"],
 " creates a class that is derived from the parent. The explicitly specified \
options override the ones of the parent. All other options are inherited from \
the parent. With no options, an alias to the parent is created. Note that the \
parent can be a string or ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["None"]],"paclet:ref/None"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " (the default)."
}], "Text",
 CellID->967136068],

Cell[TextData[{
 "Example: consider the device driver for the demo device ",
 Cell[BoxData["\"\<MyPropertiesDemo\>\""], "InlineFormula"],
 ":"
}], "Text",
 CellID->468578399],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<MyPropertiesDemo\>\"", ",", " ", 
    RowBox[{"\"\<Properties\>\"", " ", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<P1\>\"", "\[Rule]", "\"\<p1\>\""}], ",", " ", 
       RowBox[{"\"\<P2\>\"", " ", "\[Rule]", " ", "\"\<p2\>\""}], ",", " ", 
       RowBox[{"\"\<X\>\"", " ", "\[Rule]", " ", "\"\<x\>\""}]}], "}"}]}]}], 
   "]"}], ";"}]], "Input",
 CellLabel->"In[7]:=",
 CellID->574618444],

Cell[TextData[{
 Cell[BoxData["\"\<MyPropertiesDemo\>\""], "InlineFormula"],
 " has ",
 Cell[BoxData["\"\<Properties\>\""], "InlineFormula"],
 " but no ",
 Cell[BoxData["\"\<NativeProperties\>\""], "InlineFormula"],
 ". Next, create a demo device that inherits the properties of ",
 Cell[BoxData["\"\<MyPropertiesDemo\>\""], "InlineFormula"],
 " and adds its own ",
 ButtonBox["native properties",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/DevelopingDeviceDrivers#35275765"],
 ":"
}], "Text",
 CellID->378227749],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{
   "\"\<MyPropertiesDemoInherited\>\"", ",", "\"\<MyPropertiesDemo\>\"", ",", 
    RowBox[{"\"\<NativeProperties\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<N1\>\"", ",", "\"\<N2\>\""}], "}"}]}]}], "]"}], 
  ";"}]], "Input",
 CellLabel->"In[8]:=",
 CellID->322182323],

Cell[TextData[{
 Cell[BoxData["\"\<MyPropertiesDemo\>\""], "InlineFormula"],
 " has ",
 Cell[BoxData["\"\<Properties\>\""], "InlineFormula"],
 " that can be queried, but lacks ",
 Cell[BoxData["\"\<NativeProperties\>\""], "InlineFormula"],
 ":"
}], "Text",
 CellID->1112028574],

Cell[BoxData[
 RowBox[{
  RowBox[{"mypropDemo", " ", "=", " ", 
   RowBox[{"DeviceOpen", "[", "\"\<MyPropertiesDemo\>\"", "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[9]:=",
 CellID->314063377],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mypropDemo", "[", "\"\<Properties\>\"", "]"}]], "Input",
 CellLabel->"In[10]:=",
 CellID->2095856560],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"P1\"\>", ",", "\<\"P2\"\>", ",", "\<\"X\"\>"}], 
  "}"}]], "Output",
 ImageSize->{75, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[10]=",
 CellID->2034425826]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mypropDemo", "[", "\"\<NativeProperties\>\"", "]"}]], "Input",
 CellLabel->"In[11]:=",
 CellID->360230048],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 ImageSize->{18, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[11]=",
 CellID->630015843]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData["\"\<MyPropertiesDemoInherited\>\""], "InlineFormula"],
 " has both ",
 Cell[BoxData["\"\<Properties\>\""], "InlineFormula"],
 " (inherited from ",
 Cell[BoxData["\"\<MyPropertiesDemo\>\""], "InlineFormula"],
 ") and ",
 Cell[BoxData["\"\<NativeProperties\>\""], "InlineFormula"],
 ":"
}], "Text",
 CellID->1581893591],

Cell[BoxData[
 RowBox[{
  RowBox[{"mypropDemoInh", " ", "=", " ", 
   RowBox[{"DeviceOpen", "[", "\"\<MyPropertiesDemoInherited\>\"", "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[12]:=",
 CellID->1038034077],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mypropDemoInh", "[", "\"\<Properties\>\"", "]"}]], "Input",
 CellLabel->"In[13]:=",
 CellID->81583911],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"P1\"\>", ",", "\<\"P2\"\>", ",", "\<\"X\"\>", 
   ",", "\<\"NativeProperties\"\>"}], "}"}]], "Output",
 ImageSize->{198, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[13]=",
 CellID->1086225391]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mypropDemoInh", "[", "\"\<NativeProperties\>\"", "]"}]], "Input",
 CellLabel->"In[14]:=",
 CellID->431663390],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"N1\"\>", ",", "\<\"N2\"\>"}], "}"}]], "Output",
 ImageSize->{57, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[14]=",
 CellID->766836164]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Developing Device Driver Paclets", "Section",
 CellID->1883152198],

Cell["\<\
The Device Framework automatically loads device drivers from the Wolfram \
paclet servers as if the driver resided locally on your computer. Therefore, \
whenever you want your drivers to be widely available, you will want to \
distribute them as paclets.\
\>", "Text",
 CellID->604342426],

Cell[TextData[{
 "To create a device driver paclet, include a special file ",
 StyleBox["PacletInfo.m", "InlineCode"],
 " in the root device driver directory, parallel to the device driver file. \
By convention, the name of a driver paclet is the driver class name preceded \
with \"",
 StyleBox["DeviceDriver_", "InlineCode"],
 "\"; for instance, \"",
 StyleBox["DeviceDriver_MyDevice", "InlineCode"],
 "\". Include other supporting files and directories to the root driver \
directory as needed."
}], "Text",
 CellID->1732987119],

Cell["\<\
As an example, the device driver for this device, is distributed as a paclet: \
\>", "Text",
 CellID->1103501707],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceOpen", "[", "\"\<DocumentationDemo\>\"", "]"}]], "Input",
 CellLabel->"In[12]:=",
 CellID->884414057],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"DocumentationDemo\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"DocumentationDemo", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 2}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{94., {5., 9.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[
            0.45999999999999996`, 0.45999999999999996`, 0.45999999999999996`],
             Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
             20.542}, {11.020999999999999`, 20.542}}}]}, 
           {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.979000000000001`,
              16.541999999999998`}, {10.020999999999999`, 
             16.541999999999998`}, {10.020999999999999`, 10.542}, {
             12.020999999999999`, 10.542}, {12.020999999999999`, 0.5}, {
             13.979000000000001`, 0.5}, {13.979000000000001`, 10.542}, {
             15.979000000000001`, 10.542}, {15.979000000000001`, 
             16.541999999999998`}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"DocumentationDemo\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["1",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected", "Not connected"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = 
               DeviceObject[{"DocumentationDemo", 1}], 
               Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"DocumentationDemo", 1}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`MakeSummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}, 
                    StandardForm]}, 
                   MapThread[BoxForm`MakeSummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}, StandardForm]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"DocumentationDemo", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{374, 62},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[12]=",
 CellID->1612735112]
}, Open  ]],

Cell["\<\
To inspect the contents of the paclet, execute the following command:\
\>", "Text",
 CellID->1360385757],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeviceFramework`DeviceDriverFile", "[", "%", "]"}], "//", 
   "DirectoryName"}], "//", "SystemOpen"}]], "Input",
 CellLabel->"In[13]:=",
 CellID->1964585524]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", "Section",
 CellID->647897357],

Cell[CellGroupData[{

Cell["RandomNumberDemo: a Demo Device", "Subsection",
 CellID->1468788809],

Cell[TextData[{
 Cell[BoxData["\"\<RandomNumberDemo\>\""], "InlineFormula"],
 " is a virtual device that outputs a random real number in ",
 Cell[BoxData[
  RowBox[{"[", 
   RowBox[{"0", ",", "1"}], "]"}]], "InlineFormula"],
 " when a read operation is performed. This \"device\" does not need to be \
opened, and one can simply start with the ",
 Cell[BoxData["\"\<ReadFunction\>\""], "InlineFormula"],
 " whose implementation is the Wolfram Language",
 StyleBox[" ",
  FontSlant->"Italic"],
 "pseudorandom number generation function ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["RandomReal"]],"paclet:ref/RandomReal"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ". Similarly, an ",
 Cell[BoxData[
  StyleBox["n", "TI"]], "InlineFormula"],
 "-element buffer read can be simulated via the generation of a random vector."
}], "Text",
 CellID->608990598],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeviceFramework`DeviceClassRegister", "[", 
   RowBox[{"\"\<RandomNumberDemo\>\"", ",", "\n", "  \t", 
    RowBox[{"\"\<ReadFunction\>\"", " ", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"RandomReal", "[", "]"}], " ", "&"}], ")"}]}], ",", "\n", 
    "  \t", 
    RowBox[{"\"\<ReadBufferFunction\>\"", " ", "\[Rule]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"RandomReal", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", "#2"}], 
          "]"}], " ", "&"}], ")"}], "\n", "     \t", 
       "\"\<DriverVersion\>\""}], "\[Rule]", "0.001"}]}]}], "\n", "  ", "]"}],
   ";"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->397918984],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceRead", "[", "\"\<RandomSignalDemo\>\"", "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->560287330],

Cell[BoxData["0.835049914387723`"], "Output",
 ImageSize->{53, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->33363215]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceReadBuffer", "[", 
  RowBox[{"\"\<RandomSignalDemo\>\"", ",", " ", "15"}], "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->242322638],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.5579706273362106`", ",", 
   RowBox[{"-", "0.17446504955321318`"}], ",", 
   RowBox[{"-", "0.6839685305858452`"}], ",", 
   RowBox[{"-", "0.10321458478011625`"}], ",", "0.2630054594265898`", ",", 
   "0.5562124655805021`", ",", "0.052196679227612286`", ",", 
   RowBox[{"-", "0.952447575565551`"}], ",", "0.6378585398679784`", ",", 
   RowBox[{"-", "0.0207428953592923`"}], ",", 
   RowBox[{"-", "0.08515325362091275`"}], ",", 
   RowBox[{"-", "0.4337208916551343`"}], ",", "0.8526193496206478`", ",", 
   RowBox[{"-", "0.9531021861524227`"}], ",", "0.3911797556040182`"}], 
  "}"}]], "Output",
 ImageSize->{582, 33},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[5]=",
 CellID->1087582154]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tinker Forge Weather Station", "Subsection",
 CellID->1759942661],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Tinker Forge Weather Station"]],
    "https://www.tinkerforge.com/en/shop/kits/starter-kit-weather-station.\
html"},
   "WebLink",
   BaseStyle->{"Text"}]]],
 " comprises a set of four ambiance sensors (temperature, pressure, humidity, \
and illuminance) controlled by a 32-bit ARM micro-controller. The device \
comes with an attached 20\[Times]4 character LCD screen on which strings may \
be displayed. Each of the three sensors (barometer, humidity, and \
illuminance) and the LCD screen are treated as a subdevice or \"bricklet\" \
sharing a single platform and making up the entire device. A write command \
from a user would be interpreted as a request to display characters on the \
LCD screen. The device is connectable to a computer via a mini USB cable."
}], "Text",
 CellID->2064033296],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvHdUFmm69rvXOd8656y997SSc85BskRBcs4555xzFESQYEJBJEkQEJEk
SMaIIhgIilm71Y4z3T1xT+puu9vr3PW8L2r3zKxv9jnfWt8/g+v2qaq30lt1
/577up4qUIjN8k38P/7t3/4t7/+h/3xjimxyc2NK/P4HzdiW5CfE/p800Uhx
i4JbiH/9/OvnXz//+vnXz79+/vXzr59//fyv/XnzTwR++Kc2/ed/fvhZ/M9P
8R8f7+f7+uEn2/3Dr/TfPud/vJ/3z+PN2/hH1+W/993/9/28O8e/f53enf9/
9zr+/f18x493x/zJNfwnEu1/msY/Od7fXv9/mPpb8Zri+/dPmc73R1rw47e0
8vd4/3r8QP999wNv9a3N2D5/eG/n70+/PYcf8P2bb/AjvqVp3jV5/fqbd9eF
jsPivVz79s23+O771+wYXHxHB/mev683P/6Vpr5l8Ya1373Nz9f0/9Y2W+f4
/Xvn+rb9gd+++YF/fq95x3393U8+//YH/GR/r99eDLDj/oC/sPgO3+AvP77m
rfPmZ/eGvgvvnL/Dj2/435t/Qd98/yN993c3i74yXtPBuGVcfPMt77q/u3/c
Of717XV6Tffp+++//7s3+w3t4Icf3s95bv3v366y9R25+8dWY9fzz+yaclf+
e/7yN29z7Lu31/rtdaSN6Rv89ND8c3//O/1kBS636JoBf+LFj39my77n39Vv
+Nebrfvda36C0TG/+5F3Jj+829Vrlhs/vT+v+Wf5mp3XDyzn3vDzZYvHrXz+
lv77+fZ485oX3HlyB6N7xG7Kj/zlb7b2RedM93Xrmm7lybdvfsoHuxfvM8dO
nrah/f345q/86/4Xij/Rx3+geS5+//b6vHnzB/z44x9p+s/suv3lm1+z9bnt
vvvxT/z8+wufr61r+5efMMLl9xZDr/lX4S/fv/vO3Dm/P791/rzpN/ivv/7l
Jyx9y/+Mu1d/pm3/9ANvmlvOpeObt+u9puVc/MDOiPsWf3nDX4/b9vUf3373
7/An/lrvgsvHH/k5ybuP39F2P7z9Ltz0a3aUP9PUn6j9PbuG3+G3+ObNb9ky
3v55++L2+T27lrxl3L5fv/k9rf8H/vZ/ou/yR9Bd5f97dxxuv9/gCzraV9T+
gX2nb9g1+DPF79kx2XFpmvf5n1j7LbXfsnP6L9ov75y2+o3vuXvD/05crn73
w5/fy1X+deDyjf99//D6R16OcvlI/QC++S2t8ivKK8qX15Qvf6XvxvWtrP9+
x87r169Zf7rVP3Ltj2/5+IHlDpfLLJ+/+yvrj9/vUr7n58w3BLaniwWcbI3g
YG0EVwdzuLtYw8VhFxztzOFA4WhvDjc3G3h42MPF1Rau7o7w9PWEh7cXnNxc
4ejuAGcvR5hbmUJVTQkyMhKQkBSFiPB2CAtug7ioACQkBCAnJwYNLVmYmGnD
2t4QNo4GsLLZAQtzZZibysPEQBZGetIw0pfBTgM5mBop0meqCA91QHFxDOJj
vGBtpQcTY3Xo6MpDXU0aqiqS0FSTh5aaIrQ0lKGqqsCOLyYuCikZaSipqsHA
2Axuvv6ITU1HXEYmvENCYeXkjPDEJJwaGcXg1Az6zp3HwMQUeoZGcaKnD3WN
TWho70DHwGn6bAit/d04NTqI8Utz6D13Do09PahvacO+w8040T2K5q4RWDl7
wtjODgMLC7j16mOM31jHrY++xuNf/hEPvvgKbYPdMLU3gamdPhx9LeESZAcH
n13wCbNGYJQtAiJ307mZwyd8F0IT7BGV4sYiIcsPMWleSC8MQc6ecMRmuCEi
2QFRqfYIjNkFZ199eIaY0bwLUvJ9EZ7gBBefnbB21oONiz6cPI3hHWyFkDgH
+s7OCEl0QniKM+KyPZFSEoC82jik7Q1HamkYiusz0Dl8ApNLw+g5fxhlx+KQ
3xCOvIZo5BxJRmZ9ItJqQ5FcFYDkff4s4iq8EFfpydqYPW6ILHJBSK4d/FN2
wzPODObuqjB3UYGluzqs3LVg4ayBnbaq2GEqCyVtSZjbWsLcxg5GFqbQ1N0B
FRUVKClRqKpDWVUF2uoq0KLccdSSRpyVBmKsVRFmoQB/Q1nYqYnCREEMBvJi
MFSQxE5VeRioyEFTXgqqcjJQU1KAorwc5OXkWSgqKkOFckKV27eKGpSVlaEo
KwtleVnWykpJQkpSArKy0uzYGpqa8HE3goerIXFhBE9XE3i6W8LDfTeFNdwp
XGna288J/kHu8Av0IDbc4ejmBFMLc+zQ1Ya5hSFcXHbD2tKIclQBOlpKsNip
g10UJnpq0NdUhL6WAkz0VWBnpUvH2QkXJyPYWmtjl4UK7G2UiU1lWJrKECPi
xAaFvgTMjKRht1sNzvY6iI10hre7GQz15KCtKUXHIS7UJYgNaWgTH3qaxIGO
Jh1bAxrqqux7Gew0hqWtLTz8AxEYHYOgmFh4h4XB3tMTRtbW8AoPR/vZsxi6
eAEDszMYmr+E/qlZnOgbxr6GFuxtOIqG7pNoPt2NrMp8ZFTkomtiAGcuzqJ3
ZoamZ9A9cQE1zb042HYGNt7BMHX1wpmrN7Hw6CUahy+grKkH83efYuWjD1HV
Wg8dG21aRw/uxINfiiuCUt0QnuaCyHQHBCdawyfSFP6UUzE5jkgp9aAgLsp9
6fiBKKqPoHPwQ0iKFYKSzBGSag6/OGMEJ1shtcwbJQcj2bo+Ueaw89aGjac2
dlM+7nJRh4OfPnxjzBGYZI2gZBsEp9kiItsRsSUuSKoiBis9kLjXBzkHY9A2
1oipjRG0z9YirykMOScCkN0SjKwW2n9TBJIafBF30B2xdbxIOuqNxGOeiD9M
bFQ7IKDEEp7ZRnBO0oFDjCasw9VgHaoGuzBN2AapwdxDEYaOstDaJQpFfXEY
WprB2NoJhtZ20DYyhqrGDspddSgoq1E+y1Kui8FFVwb7/YwwX+KNpf1+WChz
w2yBGwZSHHA42BzFLgaIM1WCL/FmpywMc7ntMJEVhKki5ZKSJHTlxaElQ/2z
tAQ0ZKWgTqEmIwllYkGVWNBQIKYUFaFGrTLNK8pR0LQS8eXvqY/wYDOEh+yC
t5cJcWEKX387hIR5ICTcG/4h7nDzcYStkyV2WZvBdJcx9ckG0NLVgaamOnYZ
6cHX3hL+Ttbwozae+MmKCERakC8S/egaejgi1Hk3IqgGJQe5UlAf5mYBLxt9
uFnrwNVGA24OGrDfrQwLY1kYG0hCfwf1B7pSsDJVhY2lJlzsjajVhbG+KnS0
FYkDBejtUMIOYk+H+hcdYkJTVRla6mowMjKArZ0tXNw94ezhAb/wCPhHRcEl
MAhmTtx9sIa2mRlcQ0PRNTmO3vnz6JyewKnZeZyauUD5MYuD3YMoO9qM+q6T
aBvvR1B6JHZ570beoVKcnB7GqfkZdEwtoHduEZ0T8yg80ABb/yAYu3mhdfoy
rn38GwyvPIVXUj4qWjvRvXAeKVUp0HNQhxnlri/lZ1xFMJIqw5BYFoqYfH8E
Uk3wiLaAb4IlInNdkEBsxBZ5IGNvEArro1B6OBF5NdFIKw9EZJYTfCjfnYMN
aV03pFUGIbUihO3DMcgYDoE7YR9gBEvPHSxs/A3gEmEO7yRbBGY4ICTPBRG0
76gyd8TXuCHzmA/yj0ei8Hgyjp87jpFbo2iaqkfByTiknwhEensgMk9GIO1k
OJLbApHQ4oOEJj+KAMQ2+lB4I6bBA6G1TvAmPlyydsIp3QBOqfpwSNCFXcwO
WIdpwcxHBQZOpCFclWDtrwW7ADO4hwZgt5sftM2tIK+lB3kVTSgqq/P6ellx
WFFf2Bhni439/viwyhWPKqzwqHwXHpXZYj3PCncLbHAr2wpXqL+YSTTBuThT
9EeZoCXIAAe8dXE4yASVXobIsdNEPPXHoYZy8NOWghNxtEteGPryktBWIA7l
5KBCmkNZSgpK1HL1RFFOFpEhJkiNt0dqAmmOMHvSM65ISApBTHwofAO9mH4y
2W0CLYMdVP+0GBc6+nrQN9oJExMTmBvpw950J1ytLBDk6oD4QB/Ekf4Kc3NE
uJs9Cz87C/jYmMPfgePCCFaGajDRVoCpLqer5GFurABzE2Wmq7Q1iWkVEaip
iBMH8jA21KC6oQ5DfS2Y7tSlaW3o6mrScj3oamsQS1QrdLSgp0WxQxtmlPsu
pPs8fH1JW3jCPSAQ1sSJkbUNNI2NoWlqysIuwB9Hz/Sh58IkOmbOoWt6Bj2z
l9EzcwWtxEjpsUZUNDfi6FA7fJIDoWSmBpdYLxw804ZeTmdduoae+atoGRtC
Ynke8eMOUy832t9V3PzlH3Dt1e9R0T4Am8BgRBSmwIlqhpaNDEy9VVle5h6N
RubBaGSQvkksD0N4nheCs1wQVeSJ1Ep/pO0LQFK5D+JLvZFUFkgRjIx9lMMH
E5G8JwgeUZbY7Uf9C9WckEy61jkuCEyzQ2CqI2PAN8UenglWxOhuFj5pVDfy
XRBd4Yvk+mCkHQ5HVmMY0qnvz2zyRnZjCHIbE9Ey046JuzM4NnkA+W3xyGwL
QWZnKDK7YpHRHYXULjqXDmKj2Q/xx6ltDUB8iz/jJPygGwL32RMjVvAttkJA
qQ2886ieZJJuTzKFQ6Q+7EL04BFPNbLInXRdJGlNV9KdTnRPzKGsawBVLQOo
qWtDVZn0DfX7fjvlcS7fHU/2OmEzXRtPcjTxNFcTz3L18VGOIT4rMMaLbH3c
T9HGaoIW1onJzRwzxs5KtgVu5NjiarYdLmTZYj7LEQu5rpjPdsV4mgN64x1Q
6GmOWIed8DJQg6US1RtZEZgpSWC3hhxsdZSQEe+MouxAFGaHEicBSEwMQ1pG
EsKiImFN/a2uiSl0jE1Y6NN3MDK1gP5OU2jrGEJDW5exokU6a4f+DhgZ65O/
MILRTspdymN9vR2kd1RI8ylASZlqlwoxqSwJGaqZMnKikFeUgBzpRwUFCfpM
moWsnDikpEWplYK8ggwUlOQpFKGkogx1DS3SjppQVtOElrYem1ZRUmZ1TGeH
DvT09OjYJlTnbGDr6AIbZ1cYWuyChpERxU6oU8vdBy7sqZ4cHzmLU6SXui/O
oHN+Gidn5tFFjLSSF0mtLEdUYToO9h+nvj8Tmtb0XXbrIK2uEG2zo+ghXdYw
dBpZNXmwD7aBiYsJrAOdUdPZhrnNp3j4u9eYXH2AdNqPQ6gz1RYt6NpLwSFC
C3Hlzsg6EIqi44mI3xuC6LIARJUQCxU+tP8g+ozqAemIhApvRBWT36B7GkBa
wjfRnqa9kLI3jLUOYSZwjDAk/hwRt8edtL8TtZ6kl7yQTP1tHumh7MZwpB8O
RuohqgHHQpF9IhJ57VHI74xBQXckKvrDWew7nYzq3lz0Xj6FiXtTODJag5KT
KWy9fOIitycJOb0JyDoVgfSuAKS2+SOJGEkhPrg27qgXog+7I6zGCUF7bRFU
YYPQvXYILSMtUkzTRdTmU5tnj7hSV2KddNu+KARF+sLe1Rk6psbkR7Qhq6gC
GWkFpnF0KT8S7DUxmeuMu1kmeJKiji8KtfEqRwMfZevgY9JxT5M18DRRHU+S
1PFRui4+zjPCZyXm+KzMEp+U7sazwl34sMQaH5bZ48MKB3xE1/55mRPu5Vnj
RsYuXMq2xWSaJQZjjNEVoovOMAMMkMYdoxo/QRo0PswBBenBKMyMQmSoNzw9
3eDu4QU7Z3cYmu+GlqEZ6UJzaBuYQF3XCOo6+tDSMYDmDn2oaelCVUcXKrrU
Ul1R0daCoqYGVKgv50JBVRUKxAcX8uShZZXlIa0kC2llGQo5yFDIksaUomvB
tbJKcpAgXShJGlBWSYmFuDStr6gEaTlFSJDHkpCmkFOAvJI6caYMOfJfCpxW
JH5U1VShRt5DjR2fdKyWNrQNjeiciCNdPWjs3Alt4luNGNrt6Y0jfafQPTtN
fT6fj6kJdM1METeDCM1MhmOIN3Lqi1F6fC+s/GyhYqpOuZ2JtukhnJgYRmZt
CekYK9j47iQdYwpDB2P4J8eiffw8Vj/9DdY+/RrdU+fgHO5Euptqr6Uw3GJ1
kHOY6kOtD3HhTn26EwLzqf8vcULifk9kHPRFSq0Hoks5HUSeJMUCYXSfOEZ8
EmwQRH6l6HAq8uoS4RhuDM9EY2TUe7N9xlc4IbnGHakHiKF6T+QeJ23WEY7c
9mDkdYQQD+Eo6YtCcT8vSgciUX42EqV94SjvicM+4qPvWj/jo25wH/JPJJL/
iEFOaxyyT6Yit4uO2xOL3O4wZHUEIaONfDrVnvgGd8Qcotp0wBlRtY4IqyIW
Kjk+bBCx1x5hpeR3Su0RvYc8zx4XJJLfSaogT5/vCb8gJ1jtNoM6aQF5NWW6
r6qQk+Pxoa0gihQHbcwXuOJpgQU+TNMkJtSIA1W8ytLHiwwDfEzth2naeEG1
5YsCQ3xVao4vy8zx20or/FeNA36/357X1trjdzWO+E21PX5ZsRsf5ZngXpou
HuYaURjjXvZObGQaYTXLCBvZpixWM40RF+yCvJRwZCdFwd3ZnrwvMSyvSrmp
SVpQB6IyKhCTV4O4nDJEpORYbnK5KiYpDUkZeYhJy7Hlolzeyiqxz8VpmZik
DMSlZClkeNOU5xK0XJS2E5aUhAi1QuLiEOaC5kXJO4lISdC0GIQlJNhnXAiK
idFybn1JCEmI8z6jVkBUlH0mLL4VtD7NC9LybUJC7HMJbuxCTZ31S8raOlAz
MIS2iTl0LaxgYueIY/0D6JtbYFy0TYyi/8IUaavTONLfhtCMGDhwfqk8DeXH
K8knpMDC0xrBGdFoPNuJw6fb4BUXQHrfivROGHzj3eAY6kJM+SMiKw8nz13E
jeef4tzSFcSXJMDMQ4O0lioxYUPayhfpdZRXVe6I3ucE/0JzJB9wQU6jJ4pb
fZB7jHwb3cOgLFM4RWpR3TAlL+JG3mQ301UlR1JQ01FAmsoJEQW7qWZYITjP
GI5RKnCOU0MA9aFRFZZIa3BG5nE35Hb4oOgUaYRTAVQL/CjH/VDQG4CC/hAU
9UWipD8OpaeSUdGXj76l0zi3McH4KGjJQPHJHNSf24+j003YP7Ifxb1pKOqJ
QfEp0nrdIUhrckfCYQdE11ojqs4asfW2xAlxUWOF8KpdCNm7C+F7yX9W2iKh
lnzVflfE0neOIZa5MQIvX+pfrExgaKLPH7/SIO+hCnnyAKrSQkiw08YU9Q1P
qAZ9SprqaZoqnqZq4EGyDp5R/j6jnH6Za4LPi3bh81Ir/KrcEl9W7savq2xY
/K7GnpiwxdeV1viSvMvnpRZ4VWiKV/nGeFlItabU9G372ypb/LJsF31ujhf5
pliJUUMs5UBOUjgyEiLg6mgHNVUtiEtQzkvIQ1RKCQJichCUkKWQxjYRUZaz
opKUt8JCEBajfBWTgoCIJAshMWmIiMtASFQCgiLirBWiVlCE8leM8l9Mki3n
5rl2u5AoCzZP+xIQEcE2YeG/CUFxURYCosJ0PiLUCtK5CLFgyyi207bb+dv/
QpA+FxWBmKwM5FTVWB3h+FDXM4D2TjPomlvC1MYBjT39GJi/gs7JKbSNDqF9
7Az58iqklGXAOYRyPcgRRVQ/yo7sQdHBMgQmhSK5JAPHyIMUHS6He5QX0vYk
4khPHcIzI2Hp5UBcZcI7NpU89z5ibR4nz4+Tt4iGW4wV/DIskFDlhGzSIntO
xrD+PZH63OTDzshp9kD2MRfyye7kkz1IYzmRTtcmH6tMoQ6XMEPY+uuRJzdh
XoRpk1TyGPGGxJEx7CNUoOssBDM/afiSHo+h3Eg84IisVk8U9PgTA8EoGSAe
+oNQfDoYRdz0QAQxEo/igXSqJZmoPFuK3ptnMHpvEgeGa7Gnk7Tk5WZc++oG
7n/3EsP3z6PqbAlxkYCCTtJupLEymskvNbog+SjVv6OOSGhwQMxhW0QdtEHU
AWuEVlkSN7aIJf4TycMnHvJE0hEvpB7zQ1KlH0Ii3WBra0n6XBsyivKUe9KQ
EJeGtCQ3ziSOcEsNjGW7MD30JEMPDxJVKFSxGU99fzLxkq5HPkQfn1LOf1Fi
ymrHV5WW+PU+K9b+pmo3frPXAl9X0PJyM1rHGJ8VGeHzQmP8iqa/KN6JTwsM
2DxXezgvw+3zVZYhNuM0EOJD1zHKBwlR/nB2sCZNr8pymctfAcr9bZS720W5
EMEHwgLUClIuU/4JfgABmuf665/kObc+TQsIUV6LcMspdwWFiCcR/rwI7zNh
3vQ2Acpvtr4Ym98uKMwPIRbbBAQYi1xsp+Nxx9wutI2OzwvunH5B9eIXQoKs
/YDiP2kbjhNRaWnIc3xoarNQJ43FjSHqmVnAZLc9jp7sw+DcIrrPz6F1aBD1
HccZAxYuZjC00YNbmBNyK7NQUFuI3KoCJBSkILk4DZXH92NPQzlyqgtwtLcV
w1cXqC/MhIbZLuxr60PH5DLqT82htnuc9FkDipr2U03IJJ3hiszGQOSfDEX5
mQTkd0VQXrkjp8Wb+lZ76vcNSG8ZsdqRfcAdfincOJQWTByVYGyvAmsvfYQk
udJ5BMI/1gG23sRGqjUi8h1gFaABdSth6DhIwDZCm+oHsdEUiCLyDqX9sex4
e/hRNpSI8pEUlA2nouBMBopGclE2UoDKsb3oWR1kHBwYr0d5Xyl6bvbh5h/u
4v7rzzC4OUMMlVMNSUVxXyxyOojT9gDSWv4sMsi3p7R4Ie6YG2Lpe8U0kk6k
WpjUzBvvSjzuj0T6/snUL6Q0hyG2MhDOvnbsWYGWoQGUNLUgp6hO+koZMjLc
eJI4PAwV0Z/mjNs5NriXooN7xMdmvDIexu3AozgtvCRP8lmmGr7M1cZXBbr4
dZE+fldiiN+WGuDrYn38usQAXxYb4Fe0nIsviIXPCmlZ0U58tccUvyo2JV6M
WT3h/P5arBpWqK95EL8Dm7Fa8PMwR3QI6cYwT+LDCurqqhDj8yEkTnVBVJyx
ISBOuSxC+Sm6nZYLUp5uo3VomuvPub6b40OUFwJcv055KihKOU15u12Ql+NC
IjxutthhXAhSTRKkOkN8CPLnBQRF+NPEiQDxyK3P7YdjRYjOQXA7tm3/gPa7
jWkpjgmuZnAtN/8LWm/7z/jg/Ii6Do8PfeLD2NIWh1t70Du+gJ7xWXSdO4e2
4T6klWXBOcgFli7m8Ax3wb6j5Tje14S8ynykU+2IzU1AamkG6tsPoGWoEz1T
UxhYuIawjHwokEfbc+I0xm6/xKWnf0LXwjoSymvRMX8ebXMnkU1+vLQ/BZWU
myVn4pHTxfMGua3+8M42hJ6rIHZ6isI2TBnB2RYIz7UireYAx0BDGForsudq
nuGW8I2xgYPfTriHm5N284FfmjV22EpD2VwY2vbS2OmthLAyZxR3x2PvYBr2
DqfTMTNYW0Ft5VgW9p3Lxd5zOSiltmyyABUTRaia2ou+jbMYfnAO9RO1qDhT
hgPn69B8tR2t1wZQN96Eot480mdJzLPnkw/J6QpFTk8Qa7O6ApFCnMS3eiOO
OOHa5JPEBPmU2OO+bKwruS2EGAohVkIQXh4AB39n7LSwhIaBAeTVNUm7K0OK
tLok1Q8FSVFYqUugOcYWN3IccDfNAJvkxTdjlfE8XhPPKJc/SVbBLzNU8HW2
Or7K1cDXuVr4Kk+LeNHEp+RVPs3SpFqgQaGFV+TpX2Xr4kWOLl7l6bOxr0/z
TZg+e5JuQOztwNUgeVygGrwWoYnNmB0I9idtGEb+kPSEs8MuaGqpUI0TY/nL
aXqm5ynfBcWFGR/bRXh8cC0XgsTOdta3C7NpHi+CvNpCn/P6e1qPlgmK8PKc
CyGujnAcCHB8iLMQFBCDAAVvGbEmQOtQfeGmuVZgO01zfAnQ8bYRJ8QOq098
LriWO5dtxCPHp7i0JBsj2PLr7/NhZGmD2uMd6J++jI6xSRw/M4SOc6OklVpR
dKAcSUWp1E8n4kBnPX3WhJicWATEByI8LQopJemoaq5DU38P+mauYOjyHcTm
74Gs7k7EldbixNgirr38K3ou3sWe1n6cmD6PoxPtOHS+HvsnSlA1mYuSkVQU
no5D1Wgy9pAH8Kf7pG79C+i5CMPESxpmnrJwDtMhPuwQnEw8+OoRH4owtuNq
iQLsfHcgk/rfkmNxcI8zg6KxAHQdZeEab4qgAjvkt0SiZiwDVSNpqD6Xgf3j
mag6z4vqySxUjecQH1nYO0W8TNOyqWwcnCunGnEaow+HiYtyVA3lo3IoD1Xn
ylAzUUPb7EPpYCby+6OR3xtB5x+OnFPBSCdPk9bpj5ROH+KBOOggb9Xuxdqk
Tl/Et/kg9oQnUk7Sup1hSGsLpvoRjJjqYOqLPNi9UNHThyz1ZZKcjyU9LyEh
CUVpcRjICqLSzwTXcpyxmWWOB6k7cD9OCS/j1PGKvNbHSRSpqvgsXf1tfJJB
n6Wq43mKGp4mq7NxrycpGnicqk2hgwcpunicRjoqwxBPUg3xKMUAG7E7cCtC
A4v+CrjiK4+NKC08TTJASJAtQkPtERToDAcHC2hpkxcnvytE+keEPIEQ00RC
LPe5urBNSODt9HZhynVO+/8dPrYzPgR/ygetJ8DlLuW3IMtzfrytF7zgTYu8
/YyL7QLCLNhn1G7bJshath9BHjNcK8gxwuqMIMQkJaCgrML4UOX8B19f6Zqa
w8BiN/Y1nsDpuUvonJjB0f6zaDx9hjx7P450nyROTqC+8zD2NVUhriCWtM0u
mDgZIyw1EpWNNSg5VI3C2ho0dJMeWVhGfEEplPR3IrvmEJqGZ9A6cR3VHaM4
2D+BlskJFLbsx97+faib2Ev5WYyCgRSWn/sph2spf1MOecMiWBlOcbpwjdWD
gaMUNHeJwMRBEY7+BnAONIKpA3mMXZLQMhWFpbsKMvf5oao9Fe7x5thBdcMh
0hAJNT6MjcrBZKpV8dg3msZ4qJvJRf1sHmtrp3MYHxWjqdg7kULMpKF+Og/H
5vdhZHMQ5zZHcHi8EnXDBeQ3soizQtSc20v1h7zYIHmVwQQWxQMxKCBGsnqD
GR9pPQEsUk+9i3TiJ6M3BBldVGtORSDzZBgyWrnn8eFIqY8gjehM/ZUl1PT0
2DijnDxpK2lZSBIfClJi0JLcjhRrTVzKdsX9PBs8zDDgjeXGqeLjeHWqISp4
lqDK4mk8b/p5ohqekEd5SOs8oGX34yho3QcJWjStjfU4TcYD52Hux+owLbUW
qY7b4apYCVbC9QB5bEZr4jn5m8BAO/j728DL04Z8kjm0d6gTu6R3hMUgKiHF
vAjnC7Y8CTe95b85TSUkKv539RXHDMcO8w1CPDbe+hFuH0I8DjjtxTHE9fdb
wTji8pzVAWG2zTauVvB9DNd+wHgQYfVEiHFGxxDk6gst5/ggvSXO+FAiPnhj
zmq6OtAyMsIOU1PoWFhgz9FGnJyYRM/sBXROLaDr/ALVkFmcODtGXn0EzcPd
KD9aAYdgOxg7GWK3rxX12bk4PtRFPv4wwlLSkV60h3xMFyLTU6Czyxj7ThzB
/vZWhGbmI7/+OFpGZzCzvoG6vmby40WoPLMHVcNF5JOpBo0XYN/ZHNRQHhZ1
JCCkyAERJa6ILHKFY6gRNEypD9URgp6lAsydNLHTThlGtnLUysDOTx2xBQ4o
PZEAr5RdcIkj314XiLLuJOwfyUI91ahKqlH7x4m/6Wxig7iYpWMRG1ytqOJq
CNWS/efScWQqH60L+9Fz5QTmNhcwtTGPptFDaBzdj/qhQmKlDIcm9mP/cDn5
mCyUnk5n41j5XYkoJj+TezqCGAlFdh8x0E+89Iex4Kbz+qKYluTGyLhxrzLy
9lUDxONgNkqbM+Dq7w5DqueqO4gNJTlIUd8sTvkjRn2vLOkUdfEP4LNDAuOp
TtjIs8cm9fmPkjTxMFIJH8ao4X6EKu5GqmKD2jXSpesRSpTb5B8iiYkoRdyl
2IhUwL1wZRZ3w1R464Wpse0eRKrhcYwmW87FapAClv1ksB6ugqcJ2ggMcIY3
eSQ3dytY2+5kfEhyY6nEhxj5cxFufEpIlLVCIhKMA2Ex+lxUiqbFeXzwvTbX
CnKsCAvz+RDh5TPz4+/7c1G2f67l6hFXa7aCaTNWf/g6ic/aln5i++f0FOU/
x44QxwTHBvHCtcJ8PjhOJOh7yCspQpV7/sHnQ3OLD3NzlB45wp6bd88s4MTo
JHtufnJiAa2jU+iamkbzyADS9uXC1M2MwgSReVGo6zqKjvFB1La3wzU4DEGx
8ex9xuj0JGjs1EH18WPomphASFou8uuOYmLlPtZ+9TXOrV5F7dkGlHQXo6Q3
h+ms6olCVI4SIyP55KPJ+x8IQcxeP8SU+dGxvGHutgNKuqKMDzvy4m4hpvCJ
NoNPrBkCEizIe7giqtQN5n4acI41Zs8CK0+nUj3KxJGZAhym4OrCwZl8Vje4
mlE5RoyMF6F+qhSHpolt0lGdCwdx9nonzt0cwfXHq7i4sYTOc13onDyBnoUT
GLl5CjMPxjG2MYS2+WOo6i9DWXs+yk6Sd+lNIa8eg8KeKBTwI+9UJOkvmu6L
Rl5XJNWxJJR0Us05mYTDZ4swsNiIseUOnDhzAI5ejjAwMYGatiYUVBQhJyMJ
GUkxSJPfVZIRg5Lof8BSYRt6Y3bjRqYNVpP12LjSnSBZ3A/h5flqmDpuhSpj
OUgRt0IUWP5zub4RSnyEKWE9VAHrIfIs1oLlWKzTuvdCVdj0feJmg7a7S+tz
8yt+UmzbD6nehAQHwsnZGv6ks9y9LGBopA0ZWRkIU33ggqsh3JgUN07L8cEx
wD1n4Bhh41T8eY4Jro4wz8KNs1J+sucR/JrB8bHlz7fmWV0Q5LGwpde44E0L
Mz62ag+rJ0I8D7NVW3g+ho4jxKsXXAi95UOYdKIk5BS5+qHD9JWaji7TV1rG
JtCke1JyqAG9sxfRdm4aJ4aJiclLjI928uudxEfj0ACS9xbAOsAVoblxKD9e
x8aAW0bOoKG3l/gIhomNDaqONCAiORWq+kYoO3gcUysPUXq4CwX17bj8+Avc
/+M3mH26jqrBBuwZIH01UYF9VDvqLxIj04U4QLp/D/WnOW1JKOvKQtrBGARl
uZEH2QG5HQLQtpCCtfcO2PjokCc3hWuEMbyiLNg7Gh6J5lAhHeaRbIbcxlDs
7U7EIfLdlZSTteTFG2YLUT2ahWpisH6ilM6hDE3ThzC6PoAzS32YXB3HpXsX
cPneFVx/eBPLT+7h8sYdXLp9g9plrD5fx8Ynm7j76QMsP72N2Tsz6J05hYZT
B1F5vBC1J8m7nIzDvpNUG1oiUNQSjOwmPxR3haOgPQz5bWGM2wrSgYcH92Bs
qQfXHkzj8h263mc74ODqCJNdu6C2QxfyysqQJs/I6gd5XRkxQSiIfgADiX9H
a/guTEYb40aEFjbC1XEngPI/SINyWgM3g5Sw5C/Pgpu+FaTMC8r5VeLjNuU6
Vxfej7VARRbrIUrEhCJuE283A2SwEiDJ4laQFG4HSyMqOh4OTrbwC7aGT6AV
TC30IC0vzdjgasbf8CHC8xgcHxwbvHkxfs0QfsvH9n+SDzaOK7w1L8SWcfsU
2PrsH/AhwOeD8xtCwjw2tnjhfSZM5869y6JE9YM3vss9B9EwMIK2iSlpeFMU
1R5Ez3nSVufmyIMsoGf6Ijom5oiXSTScHkBWTTUSygqQXVuJ/R2N2HviMI70
duLkKGmvgQHE5+ZC38IENh4O0Lc0h6yGFtLKqil/riO/tg31PeO49cXvsPrr
32Du+V3GR81oDY5eqsehhTLSPQUoHUohvZPH+vWKMzmoGypGeXsmMg9EwTXS
Avq28tC3lmO+Q4fCwV8frqHGbOzKO3Y3djorwYy8SEyxM0qPR6LgEHng/Z5I
rnZHUXMYjhKHx2f2ouYMcThYjv6r7ZjfnMLKR9dx68PbuPNsnRjYxPrzR7j9
eBOLq3dwbX0VG8+f4d6Hz/Hg1QtsPHuEm/fXcfX2EiYunkffWB96hjtxeqID
zb1lONKRiYYe0nTEQHV7AkqaIlDQGIbMg0HsfZn8I7E43L8HAxdO4srGDC7d
XMC56VFU11fDxt6Ova+koKYJKTkFVvPFxUUhKyUBVQVpyAp/AH2pbTgesRsL
abtxM3oHbgdSzvupER9aWA9Ww3KAAq75yuG6nxybXqG834otVrhtbnHzgfK8
8JdjcZtY4eZX/GWx5CvJYtlf4i0jsYlJsHOyRmCkA8LinLHbwQxSxAfHhIj4
Oz44v8ExwctzEd6zvvf4EODrqq0xL56nF+X7+7/Ph8B7z0a48aztfK+9Nb/l
47mxgi0fzk1vfcbz48J838/bL9uPoBDTbty5yyuq8t6D0dblPSPUNyR9Zcbe
M8mvrsUp4uLk8Czazp5H5whpLWKlf/oCDnR0kJaJIk9si7Q9BWgZ6qU+sw2H
OtvQQmw0nTqNkro68pe2UDdRgZyuAlRNtLH3eCPOLl5DWlU9msencfc3f8Ti
y+cY37yGmsEjODBax7zvkfPEB8fEYCLKBuKRfzICe3qSSZdTP99PvLSkwT9+
N2x9tLGTGNGjGmLrpYW4HHcEJdrCJcgETn5G7B327D3+dD556B4tx/6jcfCL
2gnHAE1EZNjiQFcmOs5XkWbcj1MzjVgkNu48v4Y7T25g/dkdLK5dw1WKjWf3
cf/VE6zcW8Pa4/t48eVnePX1L3Hv+WMsr63g0tIVzC/O4ezEAJpJYza01qG1
5xAONBWj7lgeTo+TllzsxuytPpyea8ShU6WoaMomj5dFfUo1+qY6MLc8ieur
i5i7NIdR8n3lFftgbW0HIxNzdo/kldWofsiSrqfcoxoiISoEKeHt0CU+qnyN
cSnHEffSTKgeqGEtlKsdmqSzlFhuX/eRptyWZtNc3AyQ+wehwGLFX57F1vSS
L28f17ylGCMr/tKsniRkZMDFzwVJecHILIuAe5Azey+Kez+De/4hKinJ6gHn
ybln5T/hQ0Tsrab6/8oHl+dCQnweBPkMCP03+BDe8jhbzx35nHGeifiWUVCG
oroWlKhvV9baQR5EH5o7jVnk7tvPeOgZn2ecdJPOajs7ju7xcRzu6kRoSiLk
tdSw034XEgrTyavX42hPN6sdLWdGqb9sRXJpOhxDHKFlqQcNC33qJ3vI324g
vbYOjWPncPHZE8yTZulaOIuanhrqwytR20deuTcTJS1h5BdikNcWQJrKG/lN
Icg7FILMqkD2ux4eoTux20UN5naKcCR9FZ5kj5zyYATGWMPKSRs2rroIibVF
R18Z5q40Y+3BWVxebkNuqR+cPLUQkWKLQdJSQ/ONGJxvwezNs1QjrmL9yTJu
rF7G5Pw5yvdBDFDOX7x+GRuP7mH94V2srN+kuINNqiePPnyMWxsruHrtAiZn
RtHacRQV+8h77M1C7aFS1BwkjVhfhPHZ01h9tIinn63h2sYcTo21on3wGM7O
9WJ+ZZZqxkVcu7WExRtLuHjpCq5cXcaBg0eJD1sYGppAWVUL0rKKEOc8L+WV
OOWRDOWetKgglIT/HVEmsphItcajPCs8jNfDw1g9xghXF3h9vzTz1T9ng1v2
0+UKPwmuprzj491+ODZuBcoirTQfYanh2N9eiPrOIsRkhUFZR5X3jhOdI/fe
kwCfDy7fOL3EaRyOD05zve85fsoH7xmgsKjY27wV/BkfjJH3+ODGnwR/xgfn
I4QZE8LvTb/Phyh/fODdM/ytae585RRVoMD9vpimFvMfGvoGvDEsY2PkVVej
e2qeNNU0+YpJtFE+Nw8OsndNGgdOIau6GEa2ppDXVYH2Ln3s9nVF2bEjaBoe
ZBrs6MAQG6sqO3YUntExUKOaVHD4OPqvLCO1+gDiyirRMT2NU5fPI6suH5k1
iawu1HdRS9onrmgXUvc7IKnanrSIF3IP+cE/wRSWrkrY7aqK3c4qcPfTh1+o
CbIK/ZBTHIDMfH/4hlnB2csY8Rm+GJ48hqs3+zAx04TxmaM4Tyzs2R8NG2cN
4sgKU1dPYvHuKC6tn8PltWniYwmrD27h6vJlDI8Po/dMDzpPd2B0cphx8OGn
z3D77k3Wx9+9v4pPPn+Bh083cO36BZweOIn6Q+WorMpD04kajE30YOzcafT0
tmOJ9set9/TD+1hcuYSxqWHaxxSWV6/jwbMH2Hx4H3dIty3duImrdH2uXF5C
RXk1zM0soKdjCCVldfZckBsTEiUdzz3/kJWWgSRpefFf/F+wVfgFeqK49wZ3
YTNpBxuXXQlS4Wkj8tPL1OffpD7/FuU1a/n6acVXhhf8urJVN7hY9uO8uCJt
q8DY4IJjg9sn8yjkS7L270FSRRraJo+gbeogcmszoWWyAwJSYthG5yYizfcc
ouJ/w4ew6M/42PIc/wwfIqLvMfD/gw+uhvH54I2fvXuvizsvBe73KNXV2TMQ
LV1dqOvqQNvAgL3PkF5cjM7JCcr1cRwbHGC/D5VfV4XY/AyEpUXDI8Iblh67
Sf8bQM2E6s9OTeZFmsaGcHxsAs1jU2gZnkTv9BVkVx+CqvFuhGQV49jZCZQ2
tcEvNRUt54dQfmIfHIMtEV/ghaoT0TjcGY6aJg9kce/u5RiSd7BC4UF/lBwJ
RkC8OYxtZKFnLA57N03EJjshLsUZFftjUNeQjj3V8QiNdUJSVgDOTjZj8lIX
WrrKkZrjh5hEV2QXBCM+zRMWdhoIS3DC2MVOXFwdQ+fwcTR2H8b0tWncJD6W
127jJnmNiZkxjJw/S7VkAjfXl/H5L1/h/sN1TM2M4/baMh4+Wsf1pYsYHe1D
d08TurobMTTUgctXx7C+fhm3bi7i2uIFfPTyCX755Sf4/IuXuHvvDpZXlnD3
7hoWFy+zuHTpEmZnZ3F+8jzGqT739/cjOjoapsZm0Od+70NFC7JySuzdKxHO
+1Jw73FIiotB7Bf/Nyxl/gNdUSZYTjXBaqwGViPUmBdnnpr44OJ9Pm76yTI+
uHYruNzfqhPXvGVYXPeWx6KXNAtOW3EMcWxshCqzsa+sA2Xk5dJxYuoA2ucO
Ys+JUuhYGWK7pCiPDxkJ9v4f9/yD50V4fIhyfIhJ/A0fHA9cbNWIn/PBe1fk
pzqJa7m83+LjfQbe11c/347Hh+jbd1W2NNyWdhOhayuroAglVRWoaqizd981
d2iT3jWGwU4jpORmoW34DHpmuLGrMRzqaqH6mYSddqZQN1SBmoEiDK13wMrN
FPb+NrD2tmFjWCenxnBiYhSdU3Pom7yE0Qsr5EWaIKdtAL+ENNR2dmH/yVbE
lWbiyJmjiCoIgHOoIYoO+uJodygaT/miocMZ+xvtEV+4C9F51sis9EZRXQhy
KwIRl+4CDz9jZOUHoLA0DBm5fpT/Pijfn4C9NamITvbEvoNZuHJ7DGML7Siv
TUNMqjdyCsNZRMS5wNbVAJnF4bh4+xxjI60okb0jM35lEmvUn68/foxHH32E
FfIWXC25eG0BUwvncW3pMovhkdOYmj6HudkJnO7vQltbA3p7mzE/M4zlG9NY
ujaBCxeoRsyPsdrx8aun+Pyzj1j78MEaHtxfwwbptNGRMzjRTH7lSB2ONtTj
eDP1w+2NqDtUCU8vZ5ibmzI+lBTVyJvLQIR7Lk19npSkLOTlFSEhJg6J7f8O
O2UBDCZZ40aKMW5FqbHneFz/zuNBksXtQCmsBcjijr8MC256LUAetyk4Prg6
ssXGOyZkcNVTClc8JGlekjF0J1iOje9uhMtTXS9DXGUyDo/uQ9NULaq7qqBv
a4ztVD+4GsLxsV3sHR+8/BN6ywdj4H8VH/waIfTf4ENYhBe8cSwhiHDP8IV5
Y75ixLe8vBzUNZSho6vJfmfL1MwI7h5OLPZVl+MM6Yoz0yPoGenHqZFeNHYc
QXxqBGwdTWBgQtsZysLIQgVewXaITg1GXUstekizc1x1jY6hb3QS5y9eQ9Wh
Rja+m1xURHXgIIJT42Dr70S5HwGn4F2IyXFBLdWO+uZANLT54OAxZ+SUmiI+
1xoBcZYISbJDXKY7iqtiKfczkZodhLbOKnT316K1q5LmA5meyi2NZnl/auQY
5pcGMXv1NEqrU5GWE4qG5hLkF8fCxd0MljY6KN2XTjWmE9UN5Sin+3z+yhTz
4MuUu9dvreHW3bvYIL+xdPsa5q/Mor2nFT19J3Hp6jzVh3nSVBcxMtyPzpMn
0NJyFKdJh81ODWJhbhAT4z0YPNuGyekzWLl5ierMHdwh77184wpuUdy/ewsr
xNmprlYUFmYgMzMBBcVpqK4pxuFje1FRlQt3LzuYme2EgZ4++5sJ3DuJ4sSD
GOUJNzYvJSXD+JDc/h9wVhfFuQwHrFD94J51c16Ce57BPQfhuGBsBMtgI5CW
82ODhQLWOZ/BryVb9WMruHmublz1lCA+xIkP3rjuWqgs1sPkkH+8FvHVGag+
vQftFxpQ3rYHxk7mEJKVwDZxyjViRFiK97sVnMbixkyFRETejg9tMcC9676l
m7j3UrbeQ+SWs/6dcpnrF7j85uW16LvxJ05rCfPf+RUS/sl4Fvf+rjD3nFFE
+O34LjcvwH+PRIiN6QoSX8QGV9fIzwkJbqNl26gPEoOivBRsrc2QFBuGAzWl
mBjtxdLVKVynfvTG4jTukG+8tbyA5euzNH8e1xdGMDXUjvbGPajZk4ScVF9k
JnkhOz0Ae/cko/lELQbOdGKI+tczQwPo6enBsaZGZOVkY4eBHsr2V6L+eAOC
48NhasdpJROExAegoj4Hh5qLcKQpBwcPU64UeCAswoz93ZLgWEfSQq5IzQvD
oePlONBYjv0HijA514+p+T4MjlH/nxMMr6DdCE/wwL6GPAzNdaFnqBHHTlQi
pyAGScmB6O6uQ2d7HTzcdsHCUhfhkd5IzaDPMmLJo1zCp19/jBefvyQffp98
wG3Mzl0gTXUTm082cIn8ed9gH87Pnsf9p/fxIeklzn/MLUyi/3QnTrQeRSvV
kO6eZtJGLcRKG6snCxfHsHGftNSDGzg/NUDLWjEzM4IbyxdIU02io+MYXTOu
btRh775cZObFoLI+F+U1WfAKcITZrp3Q19dnfy9ERkaGPTeXlhBjY7wy5D/E
KddkBH8BB2UhjCQ74HaKCdYj1NmzvVu+PF3FjTWxZ34cL1Q3bvtJUytHLa9+
3OF7EZ7GkuP5jrdjV7Jse44Lblz3ZiDVoWApYkMWdyPkUNx8CHEVGSjvLkTr
/GHsbd0LM1criMhJYZso9cOSIux3lrbeHRHl3s3iP58QFZd6q2mE+Uz8nA82
fsU9xxAQZHxw+f/Btu2MDwlJKXywXeAn778L8YOnmYR4XAgK8N5zFxVibLD3
2gW2U63gngGKQJT/t4S4vykkLrKdrq8w9LTV4OFqg/amesyfP41N4uD55nW8
fHwTHz+5hVcPb+Czp7fw8sESPtpcxLO1S3h2Zx4vVufwcnUGz26M4cHVAWxe
PoW1i11YnunA1ekOXJrswSXKg4XJQdrvGXQ016B6bw5ysqLh5W1HOZCPqgOl
1N8nICYlgjyENSrrijF/eRjzF87i7GAzBgeO4hzl9uBgA64sjeLy8gT56jM4
PdKJ8dmzWLh0HpOkY2aI1YHhNvScbkBRWRLC4twRFu9OWikSpXVZSC+IQlSs
N7x9bRAV4YGqvRk4cbQCpUUpcHOxhLa2IkzMdLC/vhwvP3+Ohy8ekPe+g7V7
d3Hl6nVcunIZq/dWyT9vMk4uLPJ4efLiCR493cTaxk3cun2d1ZIzZ0+hpnYv
8gsysa+qmNWUYaq3cxdGcWuNfMjaIobH+tDYdIix1E91qK//JDq7jlPbjq5T
TXQepcgqTKC6mUh9QRR8QpzZs4VdNpbQM9Cn89WEBdV3Q11t9vuDGsSMJOWc
tMB/wkp2O/pjrLCaZs74uBukyGoE01iBsuw5BldLOA31Ey7481v6asX3HRvc
NmvcM3WK1RAZfs2QJV0li81IedyPUkBF23FEl6ah4HgWjp+vI329B5buthCX
l8EHIoJ8PnjvjXDBaXqWs8LC7/l1Hh9bY1Jb08wDcL8bxffiXM3kPNeWNmL6
SXjr90beeXde8N+L5zSbCO8ZoLCIAOk6rl5xzwwFiA9ijvoWCY4JcUH2t36C
fJzRdGgvrs6P4PG9q3iycRWfPF3BL5/fwSePl/Fy8wo+2riEj9Yu4Blx8PHG
BXx67wI+Xic27kzj5e1JvFqdwCd3zuHV7SG8vDXI4qNbZ/F05SweL4/iAeXz
45U5PKH1H68OY+lCMxYXmnFloRVLiz24SJ55aqoV56fb0dvXgMXrtM2jq1gl
/m6Rdv+Q2PzNF4/w26+e4uvffogvf/MRnn50Fyu3F7Fy6xqef/iQ/O5jLF6b
pTrVhZGJbrR01COjIBr+YU7wCXVAcLQnQqK94B/iCFs7Q8ZHPvXN+ytzcZj4
DA/1gJGRBumtNIxOnWH148SpFhw+fghj0+Pseca1m9ew/mCV1Q9uzIrTWdx4
E+dFxidHMDY+hDvrK1gnrcR5kv4BrlYeRldvG6srSzdJRz1aw12Km+tLuHp9
gfqAKRbT5O+HR89g9NxZTF+YZONZPYOdOHW2C72j3eg404bmnkac6DyOmsN1
qDtSj7LyIuyrKEBFSS7iIkNgaqRP91YEUqSvLGQ/QGe4Be6kW+JutDZxoYw7
gbxngUvkM7iWy/ebfvIsbvvK44Yn8eBFbHjLsXnGBjHCscKtyz07597Juh+h
zN7VehCthIcxvHgUq8CiuqMVscRH7qE0HBvaj9LDJdjtYQcJBVls5+oH9c8i
Ejw+mBcXE+W/087jY8sPb+mo96cF+M8sOD64+sEF8xo0LyomztjZeh/r7Xgv
/3kf8xWiQowHMXHOd2yn7X/BWmHiQZhaTkOpyEvAykQXWYnhGDrVzOrE07vX
GBcvHi7xmHi4iE8fXsNnlKNcfPXkOr5+egOf37+El+vT+OzeDD7fnGXtp+tT
LDg+Pr4zjBc3B/DsZh/FaXx0ZwivNsaJpRmqM1Rjbo8TZwN4eqsLT++cwqsH
I3hE8w9Wh/BgfQy3l85gg/zx5toUHhJ/D9cv4PH6FTy7u4RXj27jixd38avP
n+Kzzx7h0cN15msfb67jxbNH+PTlM6bjR4e6SAcNYmZuANW1BQgOd0FwhCtK
K9IxONKG7t7D2LM3DS0nqjDQfwwjg62YmzpN083UZx/D4o0ZrFGNnKBa1NBO
+oj2N39jHsvrN3Bj7TrxcZv00S0s37pKPv0irq9cwvzFSfas48KVafbcY8uz
c2NaHCNnhvowM38elxcXMHNxigXn7bkxsOnZSYyMDaG9ux1HyZfnFuUhv6yQ
9GE6ohNjEJUci+iUOITGRSAwMhjewQFw9/eBs7sbdltbwNnOEi52FvB2tUdC
TASU5OQgse0/YSr9AZqCzLCYYo6NREP2/GM9TION8d7gOKGWvWdCfmLJm7yF
lwyuuUlhyUOaMXLLR47Fsg9vvPcdH6qMj4dRqsSDCp7G894D5oUS6jo6kVSW
jfz6TDQPkkY8UgZ7TydIkq8VZGNTW5qKn/viovz320UYH1v+W5j/Lvzb6bd+
W4TVjK0x2y3fsTXNvcPL3mXhvA3HDN9f896nEmAhJMTxIEDeTQiy0uLQVFOA
k70lMlKiMNjVhNXFKdJJy3i6vogna1cYE1y9+OzZMl7dv8ric2KFY4PVi40F
YuECXt2dwWf3Z/Hp5iRerJ3Dk5URPLxxlrXPbg/jQ8rzFxtce5a012nWvrw7
ipfEyLPbY3i0dBbPV4iZVVp/+QyeEA8Prw8SL6O0zzk8vXmOatQ0q1Mv7l3G
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
a3LVDg30D6IVOqk5zRmNKY5oiLdDY4wl6sLNUB1qhFJfHRSz1hR6PUO+50Pk
uj5Cjqs6slwfItPlnsw77aUJ6CxPlutKRa7/M4QuErpJsaaoCK9bCvGCPBEQ
88TFvNMX5Mvbxky8qU3Gy8pYOadJ6MNYnt90bzMUhFrz3LmjgzVT1Mua8nx0
DI5IHSy4UU+/XlFcxDgqQ0tTFwbpKV+9oucW46uMceFtRcy3dnWjta0TXdTR
/dRjoub8+vff8PM/fsbPoiX+gX/jh19/wW///jfe//orCsrLZf9qYloWgiNi
qJmi4OTuDe+QMHj6+yMiOhxRob4oTqC3Sw1Ga0oAQiyf4ciOtTh2YDu2i7mk
27fg9KG98LWzgKuRFrws9BHE/B/A/O/jYgYnK114OjIunUxZC2wRzfwcS22R
GOVLXRGBHHIkj7GXlhSGxNgghPM5gQBf1m9qJgfqWk/qOTs7E+jpPYaZmR4e
PryJK1dO4eSJ3Th0cAt271qLrZuWQ3ndIqxZOQ8rl83C0iVfYfa3n+PrudMx
46uJmPalEr6YNQV/+3Yapn89ERNnjMfkLydiytdTMG32NEwlphDT583AV0tn
Y9a6Bfhy4zzsVjuGguF61IwwZ5ST5zlp0m/JXB/phsJIO+SFmiEvyAypXkaI
czNCqrcNYlzNkczfm86al04OZ/vboCLaldfeDTXpIajLjsNgSw3ejfRgSNyj
lP6lNi8JtcwJDckBaBc1UMylZp6oSGdsJAeytlCThbuiKCEYldRxNQUZKEiL
RVVuquzrqc+LRaSrEcLsnyHS6QmivTQQ5cVYDtFBqu9j5IdqoiRSG9UxhmhI
NEV9vAkakyzRmmxNn2KO9mRLdCSboZ37xRhjUwzrRrQhasP1UR3G94XqoS5S
Dw1RfC7WEF3FUegU/WMF4RLdJdFyLulobQrjPkviVWuO5IKA0E5CR0kNRe68
bs7Bi5oUdOcGojrWAcWB5sj2NUSCsxZCLR/JNtFFC6msa0WhVsjhufOwN0FK
puIek7HhAagpTEV6bAjyksUYXBE66D+Hegbp5bvQJfoJG2rkXIzGulI5P0P0
G4u5GIOdjYo5W/3NGOhqQktjOVqZuxtqi+X4RCg1vJe3i1yzoHL+FO7dv40b
qldw/ooKtu3agrv3VXHrxjkkUO80MifXRTC3RFqjJs4JTkb3cfHMfjhR2+/b
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
sW6yID4MGSHuqMmPQZATtZ/lU+pfE6Q6GeH5zYtYu2Sh1EmTlYQnFp6A/pf8
mDlhDGYqUU8pzcbUcYv+CyJWpwpM+Biz3DdxLON1zHxingKfLZCYNHYJubEc
U8euwLRxK/H5WAWmEWLflDHL5fOTBMYJrOAxV2LK+FU8/spP8S4xdjHjepEC
Y+dLTBa8+TP+9H3+zA+h2ZTGfvZJW00a9//i6f2rSAh1w6Obp3FkF/MKc8vZ
w3uxY/0a1o7ZWLlwPjatXYztm5Zjy6qlWPntt9iwcCFU9u3BinlfYd2yOdi9
eQk2r56Nk3tWQl1lF3wMVFHEmi/G9lKd1BBtfkX2QQZon4PXk7PwfXYBkYa3
kGBxFwnkTpr9HaQ53JaaR+if6gDBFw3Jmyo//U9+tcxPF8WejyRKmf8Fytwf
oMLjKUpdH6HI8SHyHe6iwPEeClkjyj3vo9yHr/O6jxLv+4r3+DyQbb6LGtKt
byDR/KIc/xYQY3wtkaay7YyzRJcYE2fbG28p55EI3oi2M8IEleRwqvl1hOqc
ge2NbeTcZtatzWy3w+3eQUTqX5F1sJYefTDNA91JbnhVEIZB+vqh/FAMkCdi
nq3QV3WM9bZkD9kPMMDnxRp70Qcs/I+YZziUx5qS60+N5i77uUW/QRv50shj
tqe5syY5yzky4hhiLmeM1V3JGTFOb6t5HTs3rpbjVqLvXVlZmXV/q1zPsWXL
Jtl/r3rhHL34YaieP4gEfxvEOxoh2sYIVYmRcDMzwPrVyxX9RPTHU6inJiuJ
2PkLY/h/MH3sRExlrE/5bBlj+f8j6z2jskyXdOH1re/HzN5tIAmmzna3GRPB
rJgwBxQkSEZyzlnJOeecM0iUqKioBMkCirm7d+84Z8/eM2tmzjrrrO/6quoV
e885P2o9z/u88KJQ113XVXdV3eSz5N+rlchvyXc16KpOr9VW7BRTXb7jo+0i
TkM+voLeX6lNfq4jtlpJhzBBtkJbbPVy+gyypa9TV/r1a/men60i/Kit2EG+
rinGWFNToqvyDkWsUNFU2FLsUP4HHK3YKnGL+ZXq8hX0uazZFdpflbiV6sp/
RoivHdprsuBHXPT0wZ04tGcTzh3dK/t+Wtu2YI/mJmjv3ghtwoGu5jac0N2L
g9u2Y9c330Drhy9x0/QcjC7p4diRPdIXYGpwDtWZsbhfk4qhqjDMNofJftxE
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
nCfmmMfx7kVLtsQZwQjpkpeNirkrXCvJmv4uxSQ+V7qmKAehfu44d+yA9IHo
H9RCgJsV/NyMEeJngzA/H6REx0Fr62boaW+H6VkdxHqb4tLhHdiwWlnw8RXp
kC9WrSR/5/0Q0iQqaz7Wl2+i+60UPzTxOa3hbFx3slZ1uzznPRLm/ArbIs/Y
mO+sVqXYoLpVfF1dmX2efF95I8WJ76UWXXnZ1wpb/iXhg/XC14SNb+Tnaih/
AzWVz6X+XVWJbR3ZWrI1ClNW1BOrKauLqSqp0WsVhSkpS1+JisoyrFjxG8KS
qux5Kn/2G4ohv4Hejs9xvzhQZnnMVQdisTYM7+oj8Zbw8romEC+rPDBP3Gq+
htZSWv/HC30wU0rYKaW4UhVO+jFdZmpyr/hUcxwel/vL3J3Ffj4jPk/ODHxD
fs8zY3uJs/A8jpGSAMzUhGOsNFD4U1t2MN4tTOLl5COUhlsg1UYXubZayLTR
lpwV53UbQi6iK8qAtLSp6Op78cYYiDMUHcH6gfEwnmUp2JikGMHXJWNsDGdY
4VGaOQaTTXE/yUSM7x+mmONRqgXuESfsT3JBZ4wDyryv4pbhXtgf/g5W+77C
zUMb4Hd+J6JuHEKFryF6KU5yHpfrhMcLKM7kBUvMERxwDoyw86w4XO5nKhT4
UPA17pMl3tSYh9HqbIzW5eNZYxle9DZjrKUaz9qqMNZYjFe9tfj9w2b8eL8G
b3sotnSXE78qoFidR7ouRfCR6W6M8Bv6iDQ/hWQHA5QTdupjPdCbFSxaaLGJ
a5GTJH6MNyVjoDIVNy4cw8UTh3HygLb0mLvbmMDS4Axu+1ojN9EFcaE3kZue
jqbqFhzffwC7N36FKPdrCL15GiYntfAD4YM5FeuOr+l+jcoKyfGuVl1DWPmW
4shG0iObCBdbxNbTms7P1qh+T5rjO7INn4x9Wl3pa0XvxUry7Y89TGpcR7tk
SurSb6JO96vJx9k0aK1fraJOP3uV2GplNVrryadX0pVMXXqk+PWSqX3sn1rq
pVKSXkO1FcvEuAaR9z1WKv8TlFYtwzLSHMuWf0bxSEXqaAyPbIHbRU1EGO9B
qvV+lHmeRUe4Gfkg71+74lWFK97WeGKuyg+vGsPxrikYr+p9CTs+eFnjR7gJ
kvP7eH+b/XikwEN8n/tgP4y243//2y+YnxqW82ZejXTL7ESuK+HeCe634Bg0
Smve/NyknEc8VHlLfHYqlzRzmglqQy6RPvdBodth0Q85dtpIsdiOFLPtyLTa
iTKXfWjw1cPd2+fRG3kR92Kv4FGSIZ6mGos9Trku+alHKTfwMPWGYOQfjfO+
jJOZMuKVxcFis+WhMr/nWaG/1AL3xJPfOJ9BlMl+uBynOKPzBaz3f4uAC3uQ
43iesGuBgVQvDOUEy345G+NmokiBn5HCUEV9CXGs2foMwQfnrl71NWC2sw5T
pM+n7zZh4f4djDWVEEaKJOf7lnjY+74qwQcb54RHq1inZ0l+i2urWP8M5oaj
NsoDef42iLO7iHATPcSRJsz3uITG6Juy996aF4VwVwtcOXkIZ/UO4Iq+Hqyu
nYchxZAAByPca0lGT3Mm7t65g57WXuzduQPbv9FAS7YvIp3OwubCQXyltgzr
ZG+QYwddVZZ/xIcGXT+n51+Sz39O/rdeTI3Wce5fUldZp/D/JZN+EFrflVfL
2i7rOudXl/oFmduoKJEp9iBlH1JF8YzvZY/yoynqiVf8Q5/tr6aurHhPTHW5
1FSuYVulsLXqy7FOYwVWr1mJFeoUO75RhdJawtJ6Daz7fDVhfDnywm3QneGM
pvCrqPU7iyLnU6RhjyDRdB8SzWgNJz3LPlnkcRx3bhtgINEYQ6mmmC92JNx4
41W1NxarvEQLvK72wlyJK2ZKvGQ+Atcn/m5+FPj//ifmnk9gargPP/LeR1em
zFPkvD3PcpvqKMDbd6/lbGOevTBf4Yb5AivM5lviMWnsd50RmCknjVFEcSHf
Cs9yOe9Efh1/WfJRVR4HkGW9E+kW2wg3W5FmvhUF9tqo9T6ErlvnMBBzmXjZ
dYoZRsTNTAgnJvR/YGwYSxzqi79GuAgUTHCejWsNZyqCKJ6G4mXdLSw23JYr
1+bOlIVIHX1LmCVSrU7A/cQWmOz5HGZaX8L+0EaEXtmHPKdLuEO/18FkD4xR
bJnlHi/WMuTLrM/Zz593lON1fyNe9d/B855G/EKx80+zTzDf1ywzqZljzXWU
SK53jGLOTHMBnreS5rhbIjHlHWkQ7snlXvMF0iWLdyuw0FEkGoe1D+9Pdic6
oSLUAlm+ZkgiTRPhYSd1uScPHRA7uGcn9mpuQrCrFe7WJ6OL/m1dTXXovdOK
Y9o7cdvZFEPVMUj3vw4XE33Cxmf4crU6YUOVOBNxLXVaw9XVSPeqk/+tFuNY
wsZ9uBqq6mKr1Fb9N1Oj71dd6iv82FerQRp/tYoqxQcVMe4zkV4T4joajI9V
qvKz1mpQzCD9w/3p0pO+SklmL2isYVv5ydjn16xTIj8n+0IJX3ytiq82qOKb
71fhu02r8f22tdi0Yx227v4CW7S/xk76O27R2wats4dkLtCZq/pIiPPGMPHT
hTaKx/UBxKsC8Y58YLH6NqaLg/Ao3QFdEZdEvxa76iHL7iDijbYj3nArMi12
IdtqDwrt96PJ9yQexl7GdIYpfqy0x491rlis88H9fE/0VcTgD29H8J//8++Y
nhrDu5n7eDvagv6qeNwrjRScTHUX4Xe//wl//tNPmGyJw+s6T7yrcMBiuT1e
ULz602ASFqpd8aLiJubKSGeUWAtWpgotSXNYYbrAgjSIBSZyzTCSTrEi2QA9
EWfR4H8YRQ5ayLDcjjij7xFnspmwsx15Dtqo8dJDW/gZDBJHe5R6HVOlwYIN
xgFzSTbGxatGfhb2CSOcg3vbFIsPzYl41xCPl9VReF4Wgd54V5R4GiLMYB/s
D34Psz1fwFz7S7jobUbwZR0UeV1Hf2YgxY908e+FrkrMddfg1WAbFh+04dVQ
HxYedOJ+TR6G6vPwqDKduBfXleRivp33SspI05fKnvsE+fF4naInl3UH75Hw
+/x13EfFuayfOJ/F87v5vArSH+OErTg/Z4obx2XOn+GlS7h0+hR2bd4oPKub
uFs3ffa9rkY5x9nZ8Ax6SP/wbJnCWzZwMNYnPvMZ1pN/rltFuFBmfBDPUVdV
9E2xD0u9ya/95p/mKcjMkBWf5oqs0lgJ9TV0ZT8mH169TkVmi2is5vPkP9pa
VZk/sno94eYLVbG1FM8+/34tvtr8Ob7d9hU27PoWm3Q2YuuBzdh2ZBO2H/0B
W4/8gG103X7se2ge34idJzdh12l6/9h32HbiB+zUJzu7CXsubIH25e3QNdCE
7rXd0DbcAz27U3BICYBpgBPOmZxDbl4EBhtJX7aE4WWtP8UBX8yT/p6jdfQF
+0pNKPkqxYhahQaZK3aX/NAz0rxDSWa4E3oBhc6HRSek39iOxKsbUGi1BaX2
u1DvcxR3Ig1RFWONzookzM1P4E9//Rcszo/Lma98XuXTtkJaJxNlNtzf//5X
/O1f/4iePC/iPcaYF/+3wnilF365T/ioccarGkf6NzoIThgjk4yLfHOx+VIb
il3WCqzQ68m8G3Kdzvto9Jyx0x99AU3+eih20pY4E3NtA25d/Ir0QSBp6xBM
UtwYJ23FuQjOVcyQJpurD8GH1lipW+d5icy/mI9xHSLXW72qj8d0yW3CCdcn
RmGuNAKP03xQH2CCJPPjCLqkDdtDm3Dr+jGkOF7FQF4kxhryJE4s9LdgsqsW
zwc6MD/YgSHSHxPtFXjWVCxnOEnM6FTsG0625MtrrkGZJVzMNmZIvJhryZLn
jJ0lfHBfyps7tPa1pEpfyUhzMRyuX8SFE8dgcP4izK6b4dqlq9DW3IELp45j
sL8Z/d216L5TgseEQ3/TMwg2Po4kx8sIMNeHldEJfMUz1FQ4X6VOOkODdPoa
rF+jgbVreSaD6idbR37NtpZ8f/3nKvj8S2VZx9fTVdbwTeq0fq/Gpp3rsG3P
l9iu+zV2H/4Bu/R+gNaJzdA+Rb57Zht0zm+F7qUd4sPsy1p03WOwHbsMtkHz
8hZsv7wZ269swVaDLdhmpIktxprYfH27XLeYbse2G5rQpHVc03o3dtntxk77
Pdhtr4Xdjtpiu8j2OOlA20kXh92PYZeJLvQcr8AuwQ/huZEor07Gs94M+r2G
0XoTit+1hIg2f1UbI/lB1hRz1R6kPZwEI+8avPG+3hsvKt0xW0GapJ64Q22Y
1A0+K3TDOHGhR3FX0R2ij66wi0ix2gdH/a2k767g4YNe/OU//gM//+lnzC1M
48cPi3g/N6w40+NeOf7zP/4Vf//rj7Qusp/ZY5EwMFNih5EKb/w0QDysxol8
zxpz5VZiLyptxPh+ttQCo7nX8SzPmDBhSlgw+2Sz+QqbzjOlqwWeF1iK8f1k
jhlG06/jaco1TJUFknbykl5Ezt8xv+JnU+WEkQp/Bd8i3cTxg2vXX9RQ3CAe
w/jgfpA3Dcl4XZ8kdYmzpbclpvB7/HqS7ke4NrHoNgr8eQawOzJ97ZDibYuS
6EBUJlJsetiDH8eHMNrZhNGOBjwh7c7nnE3dKRIsTbaVYaq9XGpQuJ5xurWQ
rsS5SIPw3gjXpTy/ky+ahHO+i3fSZYbDdB3pvQY+5zQXzqYGMt/S1ycI5ha2
MLhiBJOrV2F69TKc7Cxx7Yo+3eujrSQJeQEWSHY8i1DTw3AxPAAXR0NoH9wF
jS/W4YsN32Dj5u+waQvZ7s3YrEtr+L6N2HFwE7SOboPuiR3Ye3on9p3ZiQPn
duPghd04ckUbR67q4IihDg4b6eDgNS3sv7YL+wx2Yx9dtQ23Q+f6DuwzpWfm
e7DPkp5b78F+4sn7HHWwl2K+DvmztqMWtMi0aX3TclHYLhcdbKVnm520sMVx
D7bSdavzbmx31cIOD13s9NwLTbc92OGuhZ0e2v/NdnnqQMt1L/Y7HMAeEx0c
sDyJyKpkZNVloao2CUMdKZhuj8RMvY8ihjQoenwWiEvwurlQ54sXdV7ELUh3
l7kINvjrZqTOPAATtbelv4n7OuargvGadPxiqReeF3mSj/hLTpTPFqstSMTU
1BNMzAwTRj7g+eJzjD7tkzOYpnsr8dPLSTmjs/qWIQYSLmM43Qgvq5xl1uEC
caz5CoodFTZiC2WEkRILzBbewPNiczF+Nl9qiblC1vYmGMswwkjaNYylG2I8
gyzL6JNNZF8nbBjL102RlmGczJb6ik0Ve5Om9pR+xJFcd8lzM05Ym7BGGSXe
yT0di9JLmES/mwTZC+TeQu73kn7D2thP+4R8lZkj5KdjlQmy7/e4PAW9BfFo
y4xGbeIt1CZHEcfswN9ev8ZQey/KUtNQHhuOgeI04lnZmO6qw9xgF6b62vBh
uAcvBhrp2kl6vhG/G+nGT49a8cfBBnzorpCarumPHExmKpXGYbiMf14aQt0c
4OXlg+sWdjigpw87Rxe4O9jinN4hmBlcgfk1Q3jY26KlMBX9eSGyP/u4zAtF
SbaISA6EfbQfDphdxs6rJ3CY4uLe6/uheVUX26/vw1ajXdjCa/hH0zTejd3m
OtC1PYADTkdkfT7seRwHvY5jn6ce9nofw17f49Al0/Y8Qj56EDruB7HP6wj2
EvfQ8ToMLc+D0PI6BG2/I9AJOApN973YSnjY4XVAjPGwkWLCFlddfO+6G5u8
dLHFU2GaPnuxy3c/dnnto8/YD2266njshY6bLnTp6/e578MBj/3Y50ZYddoL
PZsD0Lc8ivPWZ+EUaIOSimSkJ/minnTcRHsi/U7DsdAaTH/fAFp3iGc1BNLf
n3hWLcWICh9aO70lZsxX+hE+gqVX7gVxcq6r4lkeM8Q7Zqpu0Trpj9lqznWG
yjPev50hP+JZgb3lsRjqLsOD+w148W4Sf/7LB4wMdGKRuDfncJJcDZFNfC3b
bgeSzb5HmtV24m/HUOJyAsUOumgkvT0QeQ6jqUaYyTUXDf+cdMdUNsWHnBty
/4L0O9t8rgVmMs0wlW6CSeJrj5MuEye8jCepVzCWTRjJNcZ4znW5Z5su8sBz
ioPzpX6EPcaJDyaLvEmHBZC+DsJz4lQcP3g+NeOD+6fmOHY0JEktyWJrqmJ2
48eewxctyfKM509x7+4M6d/xmiTJ0bKOeNlTLfp8vrsOC+T3v5scwb++/RE9
Td3IT85AdpgfWjOi0Z4di56ybDxoqsVQWy1mehtIs9zBm8ftePekA28etmGh
uwov7xRgkTQ8c7HX/fV41VslP2uyMgXPKsgaivFm5BGamlpww94Rx89egLWt
DYLcHXDl+EHYmBijuaYGiTERUtd7r5Dwke2MAeIEzbReJBVFwTMvDtfj/bHP
9Sr2uZzEXg/yY+9T2O1zEpoeB8j2YYfnfnp9UPx5X8gJ7A87iQPhp6DtfwS6
QcegQ6YdpIc9gcegFXQce4KPy/3BcH3sI96rTXjQ8TmCA4HHsT/wJOGHvo4w
o+OjJ/d73A9hu70Odjjsha6XAme7XQ4Ipg4HEAb9GIOHcZi+5zh9ztkAfRiE
nccl/1MwCj4Dy4ircEo0hUe6JbwzreGdbgWfFEvYel6EscUxXLl2GL7eN5CV
6IdIHyukBVnhIec7akIw20w+3x6I+SZfiSfMnxabiG8R7/5dZyze0Ptvmm7R
fRz+0JeMf7mXhb8O5uHP93Pw0910qYfjeTc/dmdIXJknrc1nxj4uCZQakXs5
fqjNdCcdmIqe3gr8j7/9Dn/65WcMdXbiXmWO9ASNlzrT+m1KGuSS5Kee0Np1
N8wIdbTGlFNMzbixBdGXv0bkxS+RfP0HFNvuQhXFxzY/PeJ1pzAYeR7DCQYY
J83N+JjPodiSR3yK+BXHjqcpBqTfL4sxVkazDEmrmODm3rUIPLMJefZ6uBtp
RphxI5zQWkC8ijXZqxrS5rURos2414N7obh/9l1zsuDkOXPSJp7Tniy8n2tL
OL7wzGve3+a+QdYLvI/Bazzrc87vviB/5/OBP8yO4u+//wPmZxexMDWDkfYa
wc9oQwEGKjJRkxGPypRIFIV7ojzSCyXhXujKjUN3bjx6s2IwWpqEZ2UJkuvi
MxO494rP2eR9ScbI4/I0vH7cj5/fLSK/uAiW1uYwNDgHF4oHHlYGSEuLwvzr
WVRWFSA9zg9dWV5SxzBW5IqmdEdExHrBLTkYbiVxOBVqCU0bHVnXNf0PYzOt
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
/W3KXQmDzvI+71suVrtLjne2VLEv8o8mz4pspT+Q60/Y+J6fsT0nLE7lWOJZ
xg0xvp/Js5Y998mcGxjPNpOafuljXDrDkM+1qb0l5w6+qFecqfaqPlow87op
8lOM+dDC5xASX8/yQW2ACSIM98H+8DeEF1Vc2LgSN3Q+h9e5Hch1VdRCTfKM
3e4SmU/908MmwcdPo/34aWYC+N/Av/3tv/Bqekb2CDlW/DxYJfPd3z9sJB1S
I/PkePYV7xnNPajBi8dNcl4j6xSe5/tioByL98rwZrAcb++X4x3P+m3LxcKd
HJn7O1CdgNHObDxtSUUX+TdzjRxPA0TfOAHHkzsRZKhHvFofrREWGM0njV7g
jSni/PdLuR+0COURvigLIp7ubYzWADPUuFxBrccVNAaZoI7W/9qgazKnrJww
Uep/Wbh6Pvl+edBlOXelNuwaWiNNaF01R3uUKdronq/Nt6+jMYIs3AhV9BlF
3gaEocvIdzZEsbsJyrwtUexpLlYVYIWGMFvUh1qhMsAU5T7XEG+mh7DL2rDR
/Qb63yzDgdX/L/av/n9w9PN/xunvluPm0Q0IvLobWa5nUBthIlqZ55I/4BxE
uTdxeXfJX04UeslczMEMHzkDgPsFHhSEY5BiBeOjj/y7vzBAzge/T/GHz/tj
4/MEeogP3affKWs3Pp/jXq6vzK8aK78l57bynHSeA8L1uVzby/lz1uWD6U7o
S7DBg1Qb3I03RKX/USSab0aM4bdIu74JEee+QqrpDjQEnEdvmhXpGkfJBbxs
priXZos3NT54VeWOF5VOYovVLnhV6yr3c+UOxH8cCEPOcp0lvEwV2gg+xvMs
Fb202TcwmWuJsUxF3dZEDsWPfOZhNoq6FMII9zBO18fIeSF8Phuf7/mP5z9x
Hpsxw8bnpy1SDOH5vHxmJ99zvQkbx5vXnPMmjtoda40Um2NwO70V13aug5HO
FygLtiI9eFP2wN/eq6P1nvTDQDtejA0D/wv4l7/8O8afjGCsvUrqd3nWu5zf
2U9YuF8vZ0P/SLzr3ZN6vHpK2HjagsXHzXj7gLD2mOIR6ecPo8343bM7+MOz
FvyRXv+BMPTXZx1y/+YBaZj+Qoo92XIWG8+f5/N6R2oi8aAyDPeIN3Tn+KA1
1lbmCidYHBYNmuRgCN+rp7D3cxUc/1YNBlvUEXFhN0rsz6DJ5yp6+ewq0hVs
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
HnIu7YP6dJ37ldqqco5vdexBtJzy1PPYZE72/Xm3v1yvw98HLuJ/PuzB//vi
Nv6/VwP43z8N4n+/GcL/+nUI//mXPvz1px788vQy3txrwsu+Kjy/UYIn3QUY
upiOB5eycLf5NK6Ux6KpIAL1ueGoyA5E6QkPtJNTOk56aL188c2VMc7kEXsk
u1BjbjOC+8pxcCPu3Zd9AW/zrxBiNU7Xngx1lMxRHbxGozJ4Ncr9V6PEbyVK
/deiPNCC/tUK5SHWKAuy0jPwJMoD1qHYZw2KqO2lLQ+wQrG/FQplDZ1e+Jzf
enLJRpwLIG8HbiGnOBFfxEkIfQq5pDiA9/wc360LbiE+nOmRyS++W/X1haDt
1P876Q92oPXodjSQE8u9LZFDD5lkP42a/zsErvwcnqZ/hsuiP8LPfDRC1nxN
fhmPZP6/snbO5vi3ACWHyRdui1HuQW3ktQT1PstQ60uNxBA8NPyXa4kacotw
h4TgQjAiWLkUZo7L5I2LxET70RXa99uOrVZPIn34EjWT4OQKfUpXgo32aYme
BLbxNrgauxZXjq/BlWg+f5wePW4decZG98WKPhM9V+O3jJw4B4mbf0DkhrEa
otVi7b+nhpyvnqaBPCc/T/acy57B99H/br+5Xsu+c74W7Mj+9JunNqMrzXAe
dE/GEdXhN7K9ND/v/bmCwi0Sd7MFM6EafTnB5KswDJ/l60xyQ1YgcRPAn+3J
77uDOF6JYMsp2L/wC2yZMQI75o3GrkXfaD3Gdvb/p3Wn8FtXIX7uzMfPXUWK
FVm/kPNnf+ooxD9u1+J/9jfiP+8w+trwtzttOh/8hJ5+uLVMOWSwrYx9/wL6
22ro8etwr70GDy/VqO9/0Vml88iCLTkrV86NlrM/Jb+3vynDcI5O1Ul0n0/A
lexQdElt5HQ/zXG9csZb9711pLtoflDHid3s/7bI2mOs3Ohr/iXcl4yCm8ln
cDf9DD7sX2FW3yBxy2Rdm5Va+ZXEyYXAtRrF3itQ6kud7reKeFqJcl5XBaxB
DfEjuBKMlfqZK7YEU+cDLRUvBT6Wut54TuaVfG1R5LdRo9DbVtctir1tUEq9
dt5rPcqp1WSd8QJxJWuO9dRpgguJJmqw+rDN6qkbjm5EfYQtKgIkl8VEa6Yl
OdIrrxuH4JVfwG/5Z/BdOgJ+piMRtuoLxNl8i5ydM1TnnD80DxXUPLWei1Hv
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
w2i/jb8870QdN0RxlDyf7/OmQubyZottNqc3Mrx7I03GAfj2Rl4E5cAWV9rk
HvgyZ6b6+Q/yZuNhoTfuHJipuHVgBm7up89CXmnMYljOX2mveeEuqbQD3Mv9
UM/vHPiLoXP2eapff4Zyr3T9SJyMfhvFsuZp9AiUfDRKcXrtKJzbPF7Hhl3d
PknXd6ymDSaQawmv3L8MF2TuRgptrNQQXKEdIrqkKnuZUrW7iEqG1+REoDZr
GS6znslcD7HHziX46xq9NfQlKvcuoy3oo3sAx8x2Rvg7r8LH+VdYPOwl3RPP
1+UlBLn9BqvH98buua66p0aFzDNhPFdTw2DKWql+iY7NOrIFNYe2qF9hIJ5h
cbqvgUnHm+wk3QETbTIT7SpTrgW00wSyJ3t19gZdF1jW0r5I3/wsfasz8Ytw
lnaj6EcZB1NNO9LENFTFesEUOwtXYz9Q+1TGFshcA5mDIHMNZNypQNZj0rXN
14zQdQc+lbHgMW6ooDys2DmG/ps7dfNk2sHuutZxYeRI7F04EBs9X0GURy9E
vvt7BI/4FRbRj9O9T/v+CAv/9BMEOf0Sa8a8jB2ebyLFaygy5jkjc8FQ5AUM
V3u1INjNMm7STWWh7BMg4yVLSE+vcMZnK9zwWaQrylYOR+lKN5yOcNU1f2SM
TIG0F4TQbqL+EF1wVPY98x2o50VBLrTTnHXcgBVyXRxM3RHG7/pTdwQMpb6g
TRbuqmPTrDgRNhxHfVwIV0Xe0rdx1NcNeX5uOndf0n48dAyOhY9BYfAoHPZ/
G9lLhlGfDKY+GaRrEe+TteDpFyUtIsjHKeS5QytcdG22S7vpux9egrt5Syn3
fOmjUvdnz0NVOssq1RuVqbNoUy9A/aE5lK/eirocL1yjfqnL8qbv6YXGgwtQ
mzEbFQnTULLVA0WbxiuKN7+Hk7LfiKzru1XG8P5Z9127KOOB495XKtdlySvx
eUokylNW4Xx6FL7YH42LWWuVCq7SlhfI/sxlqav5vPFsRVoUzqSuQXn6Rnwu
SFmvkD01KzI2oSJ1Hc7uW4vi7WFICHwfwR4D4e3yCuY6v4IFbr2xcPirmDf8
jwid+AbWznJGUshk3WOtdDf5NTMaF7Ikng2oPBSr/eRXjiQoLh+KV1QeTCTd
hYrc7SjL3ab4PCcG5Qd2oiInFufIOxfIR2WZW1CetdmCjSjPXItSpv9UcgQ+
3R2OUwmhitO7gvBZUiBKk3x1j+fiuPk4RX1ZRl+sNGGR7mUrtCxxIUpi56Jg
s+zdPEmRvc4DWVEepJNwLOYDnEzwQkn8PJwm353dG6D74hbFLMLhdbN1z9qN
c0chcsZQREwdgoDxb2Hp2H6Y5/YaPhjcC579f42Zg36L+cyfgPF/wkcfumKD
tzO2LhyBOL+x2BM2Hmn0AzNXyX6gk3Tv8ZyV7shdzjQsf09pbuQkHFk1BUei
pqIgyhMZoe7Y6zsGSURq4LtICRqPjOD3kBkygXVyLJJ930FGkDuyQvk/4VOU
ZgZ78LkJ2B8+2bLPuQfSgt01LDXEHelhE5HO57KXv4/M8GlICZ6CPf4TkeTn
geTAycgI88T+iOl8zhP7wqYiOWiK7q0Y5ztBEe/njl3+7/GfxiHBfxwSma5d
Qe8i1n8stvmMRMySUdjqMwoJTGfa36Yhf+sclIhM3r8C1UeicaNwA+3vdTh3
IJQIwvmcYFzIDcHlw8tRlR8JU8EqVBeuxsWccMXl3OWKC5T5ZZT3RSzLfPrU
edtmo3CHN46xTAXH6U8U0a8QnIifDzy6AbQIGtpp83XLdYNxv1nQCJh5/bjJ
hgru8fw279+znFtgvm2EP7rFe00GHvG9b24aVOJ9VMdrE5+rNvBIUEPYfF++
K/GY7fDY8r0nd4GnxJP7nYDh5jsGWhotYJzmet5rMGC24Mk1xsNvP63iM5cY
doXnV3l+mdRkwMx7jy9ZwiywPmeFmc89qiTknPG1VBvUfM2A5G0bblry5rYN
LHllLQ/rexqHyQb8bkulEX93kDzWfK4xIPn88KpBrWHfXDOeeWi5L2Uj4c02
VMNrGafluqXOoM03HEPK0lH449r2+K11oA21xn+31LbngZTRkxvtkOesZSZo
NRnQMqwy8kfvW6D5ZilnKxXoO9Z4bK6Fmpt5/k1H+rTZDi18nrTVngoeGs8I
tYXGI3Fa8ORBR7R83Q5rmPmb9nfb4u4CeNj1/WfSxfhbv7bBg/YwfEWQr3DX
gvuWsK+efactjHj6oP3/vg2edoYHFnz9LFq/ehZPbdPfFR46RlsZ2ZS/bXl2
SztJ54vCWi7oAbr85wcd89a+nstzeOCYOjha7WB2AON40jXsI7OF7aO24Xbp
cPT91g7ftz86S9NjG9iGNVvw0EKt93uQSU/s6POgu/xziOf/lMMk2NGev/dt
095ZWbSjlfcEZju02MBsWzY9/YnOysnR+528bl//Whyg2UI7q5/dJdFse93a
Ec/zfXMX33EMO17qrJ464mF7ftYTKy91xncO+OuZcuhGhnRXsdu+4Yj24LCv
H8/z3gsxpvDB425hdgArH6EDdfD/9vneVt6d0+74w1pH7Wl73exeppnt4m6x
i7+NN7r4viN8W/nY46MzHrErX0e80eoQncnf50hLh596URn+LfG8vOTw6Nn3
OuOD1jb+6iq/e6LDHFF7NHeDx3hWXvbkv4yjM/3R4ehQ97rTxS9SxvZywV6f
d82bZmsE9jzTQbbb5+tDRSvPDTnY0Y6wfr8r/NOq5wscjmRaT2TcM/lnj84i
edIJ1aMH8sVB+Rjpt+Z1R/oPsLSZ/A==
    "], {{0, 145}, {200, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1:eJyNVM1r1EAUf1lTKrQIQq11DxI9SJG2xCpaEbW7/WJtXZf0Q1sEyWYnu7HZ
bJzJbt1SRHrxaBXvovbQg39ADz14shelQq0ilN6rKGKhFy3rmyTdpLR+DGTy
m/d+7/fem2HmWLqg6BEAYPtxUtSJGKVqeVDERbzskLSAQK7BCWpk1bbNiASQ
txyq9MWlG6NjUu0niMARqIMo1Kkas2Op1ABncy7sGpsfgAvCcuve/r+OugzT
8gACFhr5kSFMA9j3C+2FLBYCIHK9hgnHdhDf55h69iccpz0859qHlC7EC4gP
aDbl/DeIO7ScmsE+ee8t2RAnHcJ5s6j59RzEr55Yw4P4P4E13SOsx8fCdEbt
7kfchvhzhnT3cE3Ec7rRm0DcjN+qTnuHPSycNJzEkIcjI5aZHPBxk5VOXvM1
RduJK9v6rDTYs22/rV5JIY4iVsYL/ZzTiLGdk7mh6x4WzMlcV9LH72lR4XmP
I2fWNt3zwtoir2EUTCBggIWzBRIo0AdxaAUbKBRAR4+BDAOtxOVQxAzG92Sa
kAphCf3rGLPuxtyBIkbzqBGIJ2G6paogyR/lr/KK/Eyelb/MRIvNgWea3jK0
pYffUZdn3tb1vX5Nnr6GeWPoNSGL1ny1JxaqNFSdbs1EAyWegzxIboa6JKFM
rZB2lcbdTCXXx3COhbL9afeQuzi10BTkWhHnby7XL07t2KvCrq5Itaud64AX
jifiUfGUmBA7xPMgiZfFTvGS2I2rC+JANWIYVQyYcJUYqBhlQRm99o4z87jg
3TV3NPQRi1BDk/j9T9GCbpgkdEX/4f7Pwd8VD40VAV4ygMNnAtuG4r4hQuNS
YHOuAlz8hu/Bu8DWjPfh0FOA+bNakZZ8aUF4i2xy1+GLroJdpkY250jtsnxO
iuGTRKSEpbW1SKppSq6LSZQwQksk0wZMP93uqdTjrtSsVSobeP9qHwNsPapU
fj6vVLZeYA2rAK/M3wqnBSc=
      "], "RGB", "XYZ"], Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSizeRaw->{200, 145},
  PlotRange->{{0, 200}, {0, 145}}]], "Picture",
 CellID->99313515],

Cell[TextData[{
 "Assume that all low-level device communication functions are written in the \
C programming language using Tinker Forge's C/C++ API ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["bindings"]],"http://www.tinkerforge.com/en/doc/Downloads.html"},
   "WebLink",
   BaseStyle->{"Text"}]]],
 ", and all such ",
 StyleBox[".c", "InlineCode"],
 " source files have been compiled into one application (a .exe file) via a \
build script (e.g. Linux make utility or a ",
 StyleBox[".bat", "InlineCode"],
 " file for Windows). Thus, in order to communicate with the device from the \
Wolfram Language, the first step would be to ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Install"]],"paclet:ref/Install"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " this executable."
}], "Text",
 CellID->567452886],

Cell[BoxData[
 RowBox[{"\"\<OpenManagerFunction\>\"", " ", "\[Rule]", " ", 
  RowBox[{
  "Install", "[", "\"\<\\path\\to\\tinkerforge.exe\>\"", "]"}]}]], "Code",
 CellID->205778675],

Cell[TextData[{
 "This would return a ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["LinkObject"]],"paclet:ref/LinkObject"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " on which ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["LinkClose"]],"paclet:ref/LinkClose"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " would have to be invoked at the deinitialization stage."
}], "Text",
 CellID->1073519055],

Cell[TextData[{
 "Next, an implementation of the ",
 Cell[BoxData["\"\<MakeManagerHandleFunction\>\""], "InlineFormula"],
 " returns a handle to an IP connection object representing a TCP/IP \
connection between the controlling program and the device."
}], "Text",
 CellID->1624638938],

Cell[BoxData[
 RowBox[{"\"\<MakeManagerHandleFunction\>\"", " ", "\[Rule]", " ", 
  "makeHandleFun"}]], "Code",
 CellID->52059361],

Cell["where:", "Text",
 CellID->935835998],

Cell[BoxData[
 RowBox[{
  RowBox[{"makeHandleFun", "[", "]"}], ":=", " ", 
  RowBox[{"IPConnectionCreate", "[", "]"}]}]], "Code",
 CellID->425387758],

Cell["returns an IP Connection object. ", "Text",
 CellID->518987843],

Cell[BoxData[
 RowBox[{"ipconn", " ", "=", " ", 
  RowBox[{"makeHandleFun", "[", "]"}]}]], "Code",
 CellID->1697586834],

Cell[TextData[{
 "This connection handle is next used to connect to the individual sensors in \
",
 Cell[BoxData["\"\<OpenFunction\>\""], "InlineFormula"],
 ", which returns a list of handles to these sensors. In this case, this list \
would represent a device object. "
}], "Text",
 CellID->2021668643],

Cell[BoxData[{
 RowBox[{"\"\<OpenFunction\>\"", " ", "\[Rule]", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"openFun", "[", "#", "]"}], " ", "&"}], ")"}]}], "\n", 
 RowBox[{
  RowBox[{"openFun", "[", "ipconn_", "]"}], " ", ":=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"LightSensorCreate", "[", 
     RowBox[{"$lightSensorID", ",", " ", "ipconn"}], "]"}], ",", " ", "\n", 
    RowBox[{"HumiditySensorCreate", "[", 
     RowBox[{"$humSensorID", ",", " ", "ipconn"}], "]"}], ",", " ", "\n", 
    RowBox[{"BarometerCreate", "[", 
     RowBox[{"$pressTempSensorID", ",", " ", "ipconn"}], "]"}]}], 
   "}"}]}]}], "Code",
 CellID->698620067],

Cell[TextData[{
 Cell[BoxData["\"\<OpenFunction\>\""], "InlineFormula"],
 " returns a list of handles ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
   "lightSensorHandle", ",", "humiditySensorHandle", ",", "barometerHandle"}],
    "}"}]], "InlineFormula"],
 " that will next be used to query the device for weather data in ",
 Cell[BoxData["\"\<ReadFunction\>\""], "InlineFormula"],
 ". At the user level, the sensor handles would be returned in the form of a \
device handle upon calling ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceOpen"]],"paclet:ref/DeviceOpen"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 "."
}], "Text",
 CellID->1414367920],

Cell[BoxData[
 RowBox[{"dev", " ", "=", " ", 
  RowBox[{
  "DeviceOpen", "[", "\"\<TinkerForgeWeatherStation\>\"", "]"}]}]], "Code",
 CellID->785142797],

Cell["Reading sensor data:", "Text",
 CellID->1755462011],

Cell[BoxData[{
 RowBox[{"\"\<ReadFunction\>\"", " ", "->", " ", "readFun"}], "\n", 
 RowBox[{
  RowBox[{"readFun", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ihandle_", ",", " ", 
      RowBox[{"{", 
       RowBox[{
       "lightHandle_", ",", " ", "humHandle_", ",", " ", "baroHandle_"}], 
       "}"}]}], "}"}], ",", " ", "rest___"}], "]"}], " ", ":=", " ", "\n", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"ReadIlluminanceSensor", "[", "lightHandle", "]"}], ",", " ", 
    RowBox[{"ReadHumiditySensor", "[", "humHandle", "]"}], ",", " ", "\n", 
    RowBox[{"ReadBarometer", "[", "baroHandle", "]"}]}], "}"}]}]}], "Code",
 CellID->1919676391],

Cell[TextData[{
 "This function would return a list of numbers that users would obtain upon \
calling ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceRead"]],"paclet:ref/DeviceRead"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ":"
}], "Text",
 CellID->206791009],

Cell[BoxData[
 RowBox[{"weatherData", " ", "=", " ", 
  RowBox[{"DeviceRead", "[", "dev", "]"}]}]], "Code",
 CellID->907947417],

Cell[TextData[{
 "Once ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["DeviceRead"]],"paclet:ref/DeviceRead"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " exits, the ",
 Cell[BoxData["\"\<CloseFunction\>\""], "InlineFormula"],
 " implementation would disconnect the IP connection and explicitly destroy \
each sensor handle."
}], "Text",
 CellID->2000925584],

Cell[BoxData[{
 RowBox[{"\"\<CloseFunction\>\"", " ", "\[Rule]", " ", "closeFun"}], "\n", 
 RowBox[{
  RowBox[{"closeFun", "[", 
   RowBox[{"{", 
    RowBox[{"ipconn_", ",", " ", 
     RowBox[{"{", 
      RowBox[{"ltHandle_", ",", " ", "humHandle_", ",", " ", "baroHandle_"}], 
      "}"}]}], "}"}], "]"}], " ", ":=", " ", "\n", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"IPConnectionDisconnect", "[", "ipconn", "]"}], ";", "\n", "  ", 
    RowBox[{"LightSensorDestroy", "[", "ltHandle", "]"}], ";", "\n", "  ", 
    RowBox[{"HumiditySensorDestroy", "[", "humHandle", "]"}], ";", "\n", "  ", 
    RowBox[{"BarometerDestroy", "[", "baroHandle", "]"}], ";"}], 
   ")"}]}]}], "Code",
 CellID->2109861915],

Cell[TextData[{
 "A call to ",
 Cell[BoxData["closeFun"], "InlineFormula"],
 " can be initiated by a user through:"
}], "Text",
 CellID->1199226141],

Cell[BoxData[
 RowBox[{"DeviceClose", "[", "dev", "]"}]], "Code",
 CellID->1259724692],

Cell[TextData[{
 "Finally, ",
 Cell[BoxData["\"\<ReleaseFunction\>\""], "InlineFormula"],
 " is called with the ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["LinkObject"]],"paclet:ref/LinkObject"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " (returned by ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Install"]],"paclet:ref/Install"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ") to close the WSTP connection."
}], "Text",
 CellID->151622671],

Cell[BoxData[{
 RowBox[{"\"\<ReleaseFunction\>\"", " ", "\[Rule]", " ", "releaseFun"}], "\n", 
 RowBox[{
  RowBox[{"releaseFun", "[", "link_", "]"}], " ", ":=", " ", 
  RowBox[{"LinkClose", "[", "link", "]"}]}]}], "Code",
 CellID->1406626155]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Further Info", "Section",
 CellID->1293143377],

Cell[TextData[{
 "Please contact ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Wolfram Research"]],
    "http://devices.wolfram.com/contact-us.html"},
   "WebLink",
   BaseStyle->{"Text"}]]],
 " if you are interested in developing and distributing a device driver for \
the Wolfram Device Framework."
}], "Text",
 CellID->949814904]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  InterpretationBox[
   StyleBox[
    GraphicsBox[{},
     BaselinePosition->Baseline,
     ImageSize->{6, 0}],
    CacheGraphics->False],
   Spacer[6]]]],
 "Related Guides"
}], "TutorialMoreAboutSection",
 WholeCellGroupOpener->True,
 CellID->23220180],

Cell["", "SectionHeaderSpacer"],

Cell[TextData[ButtonBox["Using Connected Devices",
 BaseStyle->"Link",
 ButtonData->"paclet:guide/UsingConnectedDevices"]], "TutorialMoreAbout",
 CellID->1567025153]
}, Open  ]]
}, Open  ]],

Cell[" ", "FooterCell"]
},
Saveable->False,
ScreenStyleEnvironment->"Working",
WindowSize->{725, 750},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
WindowTitle->"Developing Device Drivers",
TaggingRules->{
 "ModificationHighlight" -> False, "ColorType" -> "TutorialColor", 
  "LinkTrails" -> GridBox[{{
      RowBox[{
        ButtonBox[
        "Virtual Book", ButtonData -> "paclet:tutorial/VirtualBookOverview", 
         BaseStyle -> {"Link", "DockedLinkTrail"}]}]}}, ColumnAlignments -> 
    Left], "ExampleCounter" -> 1, "ExamplePageLinks" -> {}, "NeedPlatMsgIn" -> 
  None, "RootCaptions" -> "", 
  "Metadata" -> {
   "built" -> "{2014, 7, 18, 17, 46, 45.4966406}", 
    "history" -> {"10", "", "", ""}, "context" -> "System`", "keywords" -> {},
     "specialkeywords" -> {}, "tutorialcollectionlinks" -> {}, "index" -> 
    True, "label" -> "Wolfram Language Tutorial", "language" -> "en", 
    "paclet" -> "Mathematica", "status" -> "None", "summary" -> 
    "GraphicsBox[{GrayLevel[0.44], \
GeometricTransformationBox[{GeometricTransformationBox[{FilledCurveBox[{{{0, \
2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, \
{{{2.5688, 26.2148}, {6.6018, 26.2148}, {6.6018, 24.6228}, {4.4798, 24.6228}, \
{4.4798, 4.0308}, {6.6018, 4.0308}, {6.6018, 2.4398}, {2.5688, 2.4398}}}], \
FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, \
1, 0}, {0, 1, 0}}}, {{{9.9463, 26.2148}, {13.9793, 26.2148}, {13.9793, \
24.6228}, {11.8573, 24.6228}, {11.8573, 4.0308}, {13.9793, 4.0308}, {13.9793, \
2.4398}, {9.9463, 2.4398}}}]}, {133, 0}], FilledCurveBox[{{{0, 2, 0}, {1, 3, \
3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, \
1, 0}}}, {{{152.293, 7.1709}, {153.699, 7.1709}, {157.786, 7.1709}, {159.909, \
9.9569}, {159.909, 14.7069}, {159.909, 18.5809}, {158.264, 21.6589}, \
{153.699, 21.6589}, {152.293, 21.6589}}, {{149.958, 23.6759}, {153.991, \
23.6759}, {156.459, 23.6759}, {157.865, 23.0919}, {158.927, 22.3489}, \
{160.572, 21.2079}, {162.35, 18.8729}, {162.35, 14.7069}, {162.35, 9.3469}, \
{159.803, 5.1539}, {152.851, 5.1539}, {149.958, 5.1539}}}], \
FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 0}, {1, \
3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, \
1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{167.791, 15.4497}, \
{169.595, 15.4497}, {172.089, 15.4497}, {173.045, 17.0957}, {173.045, \
18.7137}, {173.045, 20.7827}, {171.691, 21.7647}, {169.648, 21.7647}, \
{167.791, 21.7647}}, CompressedData[ ]}], FilledCurveBox[{{{0, 2, 0}, {0, 1, \
0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, \
1, 0}, {0, 1, 0}}}, {{{187.667, 12.0005}, {184.828, 21.2345}, {184.774, \
21.2345}, {181.855, 12.0005}}, {{186.154, 23.6755}, {192.204, 5.1545}, \
{189.763, 5.1545}, {188.277, 9.9835}, {181.219, 9.9835}, {179.732, 5.1545}, \
{177.397, 5.1545}, {183.607, 23.6755}}}], FilledCurveBox[{{{0, 2, 0}, {0, 1, \
0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, \
0}}}, {{{194.461, 23.6758}, {202.74, 23.6758}, {202.74, 21.6588}, {196.796, \
21.6588}, {196.796, 15.7688}, {202.448, 15.7688}, {202.448, 13.7518}, \
{196.796, 13.7518}, {196.796, 5.1548}, {194.461, 5.1548}}}], \
FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, \
1, 0}, {0, 1, 0}}}, {{{208.446, 21.6592}, {204.2, 21.6592}, {204.2, 23.6762}, \
{215.026, 23.6762}, {215.026, 21.6592}, {210.781, 21.6592}, {210.781, \
5.1542}, {208.446, 5.1542}}}], FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, \
0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{216.46, 4.0312}, \
{218.583, 4.0312}, {218.583, 24.6222}, {216.46, 24.6222}, {216.46, 26.2152}, \
{220.493, 26.2152}, {220.493, 2.4392}, {216.46, 2.4392}}}], \
FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, \
1, 0}, {0, 1, 0}}}, {{{223.838, 4.0312}, {225.961, 4.0312}, {225.961, \
24.6222}, {223.838, 24.6222}, {223.838, 26.2152}, {227.871, 26.2152}, \
{227.871, 2.4392}, {223.838, 2.4392}}}]}, {-133, 0}]}, ImageSize -> {112., \
Automatic}, PlotRange -> {{0., 98}, {0., 29.667}}] \
1:eJxTTMoPSmViYGCQAGIQbX3fv3f6uhQHuxc31/xaY+4A5rulwvlHFDYUZbQi \
+H5JAhGWK1IdJLZfZLhnZO7AsUYmKuVwqsO8s6vOX00zc3Dpznn++2Gqw+rz \
V8Pe1Js6pIAMfJ/qwL11WeVxSxM4X84i3SXzvhGcz/tAd8KCFwYOCU8vKN2+ \
mOqwgfl5jwavnsPbGnvTuKpUhyDPuQ1qj3TgfIGX29czH9dx2FMyWYJlXqoD \
V4ZSTkWUjsP1xQW2XOtTHd7y7jOY6aXt8OXvlYqXu1IdtkR+3XlLS9NB3RDo \
Yr40h1OHndZmzhNx2PYZqGBvKpy/4pi3eWdlqkNLzYXNkVfVHNgapzp3Z6Q6 \
8Exe2RT4UtNB7Oa578HBqQ5Zvp/7gkW0HVRBCqQR/CiQh36mYPBh5sPCG8YH AJ/0sPM= The \
Wolfram Device Framework, built into the Wolfram Language, creates symbolic \
objects that represent external devices, streamlines interaction with \
devices, and facilitates the authoring of device drivers. This tutorial \
explains the internals of the Device Framework for advanced users and \
developers of device drivers. For details of the interaction with devices at \
the user level, see \"Using Connected Devices\". For most devices, the \
functions that comprise the Device Framework are not directly concerned with \
actual device programming or low-level hardware communication software. Such \
implementation would vary on a case-by-case basis depending on the hardware \
device in question. For instance, one implementation might involve writing \
(or being supplied with by a third party) low-level device programs in C, and \
then using WSTP to expose the interfaces of these programs to package-level \
Wolfram Language functions. These functions would then be strung together in \
an appropriate fashion by the Device Framework, creating a Wolfram Language \
device driver. In another implementation, one might avoid low-level C \
programming altogether and use the Wolfram Language .NET/Link functionality \
to interact with a device from within driver-level Wolfram Language \
functions. The responsibility of the Device Framework would again be to \
integrate these functions, providing a unified way of interfacing with \
devices through a set of user-level functions. ", "synonyms" -> {}, "title" -> 
    "Developing Device Drivers", "titlemodifier" -> "", "windowtitle" -> 
    "Developing Device Drivers", "type" -> "Tutorial", "uri" -> 
    "tutorial/DevelopingDeviceDrivers"}, "SearchTextTranslated" -> ""},
CellContext->"DevelopingDeviceDrivers`",
FrontEndVersion->"10.0 for Microsoft Windows (64-bit) (July 9, 2014)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> FrontEnd`FileName[{"Wolfram"}, "Reference.nb"]]], 
   Cell[
    StyleData["Input"], CellContext -> Notebook], 
   Cell[
    StyleData["Output"], CellContext -> Notebook], 
   Cell[
    StyleData["TutorialMoreAboutSection"], 
    CellGroupingRules -> {"SectionGrouping", 30}], 
   Cell[
    StyleData["RelatedTutorialsSection"], 
    CellGroupingRules -> {"SectionGrouping", 30}], 
   Cell[
    StyleData["TutorialRelatedLinksSection"], 
    CellGroupingRules -> {"SectionGrouping", 30}]}, Visible -> False, 
  FrontEndVersion -> "10.0 for Microsoft Windows (64-bit) (July 9, 2014)", 
  StyleDefinitions -> "Default.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "TextAnnotation"->{
  Cell[49138, 806, 602, 13, 102, "Text",
   CellTags->"TextAnnotation",
   CellID->700038665]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"TextAnnotation", 1034175, 23799}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[597, 21, 3729, 90, 48, "AnchorBarGrid",
 CellID->1],
Cell[CellGroupData[{
Cell[4351, 115, 62, 1, 47, "Title",
 CellID->509267359],
Cell[4416, 118, 39276, 596, 127, "TutorialJumpBox"],
Cell[43695, 716, 5440, 88, 56, "Text",
 CellID->1859060648],
Cell[49138, 806, 602, 13, 102, "Text",
 CellTags->"TextAnnotation",
 CellID->700038665],
Cell[49743, 821, 1328, 24, 228, "Text",
 CellID->1360974195],
Cell[CellGroupData[{
Cell[51096, 849, 47, 1, 62, "Section",
 CellID->939564002],
Cell[51146, 852, 385, 10, 2, "Input",
 CellOpen->False,
 CellID->562850576],
Cell[51534, 864, 508, 12, 70, "Text",
 CellID->1540737561],
Cell[52045, 878, 996, 28, 151, "DefinitionBox",
 CellID->12673],
Cell[53044, 908, 522, 10, 104, "Text",
 CellID->750760203],
Cell[53569, 920, 1815, 39, 369, "DefinitionBox3Col",
 CellID->12623],
Cell[55387, 961, 72, 1, 31, "Caption",
 CellID->2060180926],
Cell[55462, 964, 370, 7, 84, "Text",
 CellID->1353021148],
Cell[55835, 973, 398, 7, 84, "Text",
 CellID->1560305696],
Cell[56236, 982, 3498, 87, 573, "DefinitionBox3Col",
 CellID->1162312469],
Cell[59737, 1071, 71, 1, 31, "Caption",
 CellID->1474413371],
Cell[59811, 1074, 304, 7, 68, "Text",
 CellID->1135019155],
Cell[60118, 1083, 141, 4, 30, "Text",
 CellID->510605039],
Cell[60262, 1089, 598, 16, 214, "Program",
 CellID->192892392],
Cell[60863, 1107, 115, 5, 33, "Caption",
 CellID->8007],
Cell[60981, 1114, 735, 19, 90, "Text",
 CellID->1506860218],
Cell[61719, 1135, 274, 9, 26, "Item",
 CellID->1059878494],
Cell[61996, 1146, 580, 19, 76, "Item",
 CellID->996793],
Cell[62579, 1167, 210, 8, 26, "Item",
 CellID->1720714422],
Cell[CellGroupData[{
Cell[62814, 1179, 252, 7, 22, "Item",
 CellID->2032500052],
Cell[63069, 1188, 362, 11, 52, "Text",
 CellID->1789187572],
Cell[63434, 1201, 365, 12, 54, "Text",
 CellID->1166297488],
Cell[63802, 1215, 91, 1, 31, "MathCaption",
 CellID->1878634647],
Cell[63896, 1218, 274, 8, 28, "Input",
 CellID->1907933935]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[64219, 1232, 60, 1, 62, "Section",
 CellID->602846093],
Cell[64282, 1235, 1888, 54, 176, "Text",
 CellID->1935578732],
Cell[66173, 1291, 1868, 53, 187, "Text",
 CellID->1682897120],
Cell[68044, 1346, 2520, 82, 172, "Text",
 CellID->2102440761],
Cell[70567, 1430, 558, 14, 86, "Text",
 CellID->163433197],
Cell[71128, 1446, 228, 5, 48, "Text",
 CellID->1312919637],
Cell[71359, 1453, 104, 2, 31, "MathCaption",
 CellID->845866134],
Cell[CellGroupData[{
Cell[71488, 1459, 147, 4, 28, "Input",
 CellID->130370998],
Cell[71638, 1465, 172, 5, 36, "Output",
 CellID->1380533687]
}, Open  ]],
Cell[71825, 1473, 161, 4, 31, "MathCaption",
 CellID->1535315838],
Cell[CellGroupData[{
Cell[72011, 1481, 145, 4, 28, "Input",
 CellID->2037270561],
Cell[72159, 1487, 14758, 315, 85, "Output",
 CellID->1216355221]
}, Open  ]],
Cell[CellGroupData[{
Cell[86954, 1807, 168, 5, 28, "Input",
 CellID->1385363554],
Cell[87125, 1814, 509, 10, 19, "Message",
 CellID->787551304],
Cell[87637, 1826, 166, 5, 36, "Output",
 CellID->1433049867]
}, Open  ]],
Cell[87818, 1834, 702, 15, 102, "Text",
 CellID->251501067],
Cell[88523, 1851, 558, 14, 90, "Text",
 CellID->2013037339],
Cell[89084, 1867, 203, 5, 33, "MathCaption",
 CellID->1825717595],
Cell[89290, 1874, 191, 6, 28, "Input",
 CellID->1661181735],
Cell[CellGroupData[{
Cell[89506, 1884, 59, 1, 52, "Subsection",
 CellID->2076911133],
Cell[89568, 1887, 2662, 95, 134, "Text",
 CellID->1578727342],
Cell[92233, 1984, 442, 15, 51, "Text",
 CellID->1459121595],
Cell[92678, 2001, 239, 6, 50, "Text",
 CellID->1337854623],
Cell[92920, 2009, 182, 5, 33, "MathCaption",
 CellID->1168864671],
Cell[CellGroupData[{
Cell[93127, 2018, 293, 8, 28, "Input",
 CellID->715856181],
Cell[93423, 2028, 171, 5, 36, "Output",
 CellID->1672643812]
}, Open  ]],
Cell[CellGroupData[{
Cell[93631, 2038, 119, 3, 28, "Input",
 CellID->544796539],
Cell[93753, 2043, 177, 6, 36, "Output",
 CellID->1563609054]
}, Open  ]],
Cell[93945, 2052, 104, 2, 31, "MathCaption",
 CellID->644057651],
Cell[CellGroupData[{
Cell[94074, 2058, 119, 3, 28, "Input",
 CellID->1833664541],
Cell[94196, 2063, 542, 11, 35, "Message",
 CellID->2009606137],
Cell[94741, 2076, 166, 5, 36, "Output",
 CellID->1975028190]
}, Open  ]],
Cell[CellGroupData[{
Cell[94944, 2086, 119, 3, 28, "Input",
 CellID->1359359477],
Cell[95066, 2091, 14703, 312, 83, "Output",
 CellID->1823693153]
}, Open  ]],
Cell[CellGroupData[{
Cell[109806, 2408, 119, 3, 28, "Input",
 CellID->1924212487],
Cell[109928, 2413, 179, 5, 36, "Output",
 CellID->1283028836]
}, Open  ]],
Cell[110122, 2421, 182, 5, 33, "MathCaption",
 CellID->982347125],
Cell[CellGroupData[{
Cell[110329, 2430, 333, 9, 28, "Input",
 CellID->453851739],
Cell[110665, 2441, 170, 5, 36, "Output",
 CellID->24263229]
}, Open  ]],
Cell[110850, 2449, 119, 3, 31, "MathCaption",
 CellID->2074548389],
Cell[CellGroupData[{
Cell[110994, 2456, 120, 3, 28, "Input",
 CellID->1917680520],
Cell[111117, 2461, 178, 5, 36, "Output",
 CellID->1021925464]
}, Open  ]],
Cell[111310, 2469, 146, 4, 31, "MathCaption",
 CellID->390281231],
Cell[CellGroupData[{
Cell[111481, 2477, 117, 3, 28, "Input",
 CellID->1041591479],
Cell[111601, 2482, 15007, 314, 83, "Output",
 CellID->1888780856]
}, Open  ]],
Cell[CellGroupData[{
Cell[126645, 2801, 108, 3, 28, "Input",
 CellID->636576838],
Cell[126756, 2806, 184, 6, 36, "Output",
 CellID->183386912]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[126989, 2818, 65, 1, 52, "Subsection",
 CellID->180358514],
Cell[127057, 2821, 1245, 34, 131, "Text",
 CellID->1882009059],
Cell[128305, 2857, 677, 20, 76, "Text",
 CellID->411192981],
Cell[128985, 2879, 99, 1, 31, "MathCaption",
 CellID->1505061739],
Cell[129087, 2882, 524, 16, 47, "Input",
 CellID->362769360],
Cell[129614, 2900, 126, 3, 31, "MathCaption",
 CellID->1865333832],
Cell[129743, 2905, 127, 4, 28, "Input",
 CellID->358559687],
Cell[CellGroupData[{
Cell[129895, 2913, 143, 4, 28, "Input",
 CellID->473545927],
Cell[130041, 2919, 14756, 315, 83, "Output",
 CellID->669033435]
}, Open  ]],
Cell[CellGroupData[{
Cell[144834, 3239, 78, 2, 28, "Input",
 CellID->1764770422],
Cell[144915, 3243, 158, 5, 36, "Output",
 CellID->220566353]
}, Open  ]],
Cell[CellGroupData[{
Cell[145110, 3253, 140, 4, 28, "Input",
 CellID->1912038019],
Cell[145253, 3259, 158, 5, 36, "Output",
 CellID->501920149]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[145460, 3270, 71, 1, 52, "Subsection",
 CellID->175207631],
Cell[145534, 3273, 930, 24, 128, "Text",
 CellID->1768935652],
Cell[146467, 3299, 375, 9, 50, "Text",
 CellID->1816399863],
Cell[146845, 3310, 246, 7, 30, "Text",
 CellID->737894096]
}, Open  ]],
Cell[CellGroupData[{
Cell[147128, 3322, 59, 1, 52, "Subsection",
 CellID->1742434029],
Cell[147190, 3325, 1541, 47, 134, "Text",
 CellID->2001714911],
Cell[148734, 3374, 1246, 33, 130, "Text",
 CellID->1188106456],
Cell[149983, 3409, 197, 6, 33, "MathCaption",
 CellID->916361059],
Cell[150183, 3417, 309, 10, 28, "Input",
 CellID->147803265],
Cell[150495, 3429, 242, 7, 28, "Input",
 CellID->730615773],
Cell[CellGroupData[{
Cell[150762, 3440, 169, 5, 28, "Input",
 CellID->1638378923],
Cell[150934, 3447, 115, 3, 23, "Print",
 CellID->1471920373],
Cell[151052, 3452, 14776, 315, 87, "Output",
 CellID->1701579218]
}, Open  ]],
Cell[165843, 3770, 120, 3, 31, "MathCaption",
 CellID->2128084428],
Cell[CellGroupData[{
Cell[165988, 3777, 127, 3, 28, "Input",
 CellID->374840611],
Cell[166118, 3782, 203, 5, 36, "Output",
 CellID->402189827]
}, Open  ]],
Cell[CellGroupData[{
Cell[166358, 3792, 136, 3, 28, "Input",
 CellID->1883714651],
Cell[166497, 3797, 14776, 315, 87, "Output",
 CellID->1473385280]
}, Open  ]],
Cell[181288, 4115, 207, 6, 50, "Text",
 CellID->148362392],
Cell[181498, 4123, 152, 5, 33, "MathCaption",
 CellID->298208177],
Cell[181653, 4130, 166, 5, 28, "Input",
 CellID->1905482388],
Cell[CellGroupData[{
Cell[181844, 4139, 145, 4, 28, "Input",
 CellID->1424379726],
Cell[181992, 4145, 14724, 313, 85, "Output",
 CellID->1549841773]
}, Open  ]],
Cell[196731, 4461, 120, 3, 31, "MathCaption",
 CellID->18867405],
Cell[CellGroupData[{
Cell[196876, 4468, 192, 5, 28, "Input",
 CellID->1361524348],
Cell[197071, 4475, 14723, 313, 85, "Output",
 CellID->513219705]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[211843, 4794, 66, 1, 52, "Subsection",
 CellID->525002300],
Cell[211912, 4797, 1934, 53, 190, "Text",
 CellID->670175973],
Cell[213849, 4852, 172, 5, 33, "MathCaption",
 CellID->95849696],
Cell[214024, 4859, 784, 21, 83, "Input",
 CellID->333105422],
Cell[CellGroupData[{
Cell[214833, 4884, 140, 4, 28, "Input",
 CellID->1995630701],
Cell[214976, 4890, 14865, 315, 85, "Output",
 CellID->99541551]
}, Open  ]],
Cell[CellGroupData[{
Cell[229878, 5210, 112, 3, 28, "Input",
 CellID->313777176],
Cell[229993, 5215, 168, 5, 36, "Output",
 CellID->105086644]
}, Open  ]],
Cell[230176, 5223, 206, 5, 50, "Text",
 CellID->383903556],
Cell[230385, 5230, 173, 4, 45, "MathCaption",
 CellID->1377941831],
Cell[230561, 5236, 1507, 38, 137, "Input",
 CellID->2113485805],
Cell[CellGroupData[{
Cell[232093, 5278, 148, 4, 28, "Input",
 CellID->1976403255],
Cell[232244, 5284, 15000, 321, 83, "Output",
 CellID->977956499]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[247293, 5611, 63, 1, 52, "Subsection",
 CellID->372300196],
Cell[247359, 5614, 1547, 49, 114, "Text",
 CellID->1629530461],
Cell[248909, 5665, 163, 4, 33, "MathCaption",
 CellID->1776373297],
Cell[249075, 5671, 531, 17, 47, "Input",
 CellID->867505495],
Cell[249609, 5690, 370, 10, 47, "Input",
 CellID->1559217387],
Cell[249982, 5702, 272, 9, 35, "MathCaption",
 CellID->898374982],
Cell[CellGroupData[{
Cell[250279, 5715, 138, 4, 28, "Input",
 CellID->30800417],
Cell[250420, 5721, 14718, 314, 83, "Output",
 CellID->1775435693]
}, Open  ]],
Cell[CellGroupData[{
Cell[265175, 6040, 184, 5, 28, "Input",
 CellID->392705582],
Cell[265362, 6047, 204, 6, 36, "Output",
 CellID->462417186]
}, Open  ]],
Cell[265581, 6056, 81, 1, 31, "MathCaption",
 CellID->102326609],
Cell[CellGroupData[{
Cell[265687, 6061, 109, 3, 28, "Input",
 CellID->1749980217],
Cell[265799, 6066, 169, 5, 36, "Output",
 CellID->681820133]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[266017, 6077, 57, 1, 52, "Subsection",
 CellID->75304213],
Cell[266077, 6080, 1604, 51, 114, "Text",
 CellID->1752455336],
Cell[267684, 6133, 408, 9, 61, "MathCaption",
 CellID->959667874],
Cell[268095, 6144, 131, 4, 28, "Input",
 CellID->1069478543],
Cell[268229, 6150, 143, 5, 28, "Input",
 CellID->1225421999],
Cell[268375, 6157, 424, 14, 28, "Input",
 CellID->1701259630],
Cell[268802, 6173, 134, 4, 28, "Input",
 CellID->247871197],
Cell[268939, 6179, 369, 13, 28, "Input",
 CellID->1968251663],
Cell[269311, 6194, 262, 9, 28, "Input",
 CellID->567601653],
Cell[269576, 6205, 368, 9, 47, "Input",
 CellID->1773181174],
Cell[269947, 6216, 86, 1, 31, "MathCaption",
 CellID->558621997],
Cell[CellGroupData[{
Cell[270058, 6221, 167, 5, 28, "Input",
 CellID->2108882542],
Cell[270228, 6228, 14704, 312, 85, "Output",
 CellID->1212769815]
}, Open  ]],
Cell[CellGroupData[{
Cell[284969, 6545, 111, 3, 28, "Input",
 CellID->213372004],
Cell[285083, 6550, 169, 5, 36, "Output",
 CellID->1254987028]
}, Open  ]],
Cell[285267, 6558, 91, 1, 31, "MathCaption",
 CellID->692771366],
Cell[CellGroupData[{
Cell[285383, 6563, 167, 5, 28, "Input",
 CellID->1899497975],
Cell[285553, 6570, 14704, 312, 85, "Output",
 CellID->2130082409]
}, Open  ]],
Cell[CellGroupData[{
Cell[300294, 6887, 138, 4, 28, "Input",
 CellID->459396761],
Cell[300435, 6893, 240, 7, 36, "Output",
 CellID->1742652573]
}, Open  ]],
Cell[300690, 6903, 115, 3, 31, "MathCaption",
 CellID->2098561760],
Cell[CellGroupData[{
Cell[300830, 6910, 81, 2, 28, "Input",
 CellID->256081992],
Cell[300914, 6914, 395, 11, 54, "Output",
 CellID->1379816625]
}, Open  ]],
Cell[301324, 6928, 162, 4, 31, "MathCaption",
 CellID->502658409],
Cell[CellGroupData[{
Cell[301511, 6936, 139, 4, 28, "Input",
 CellID->2126696412],
Cell[301653, 6942, 279, 8, 36, "Output",
 CellID->2049596069]
}, Open  ]],
Cell[301947, 6953, 79, 1, 31, "MathCaption",
 CellID->412810956],
Cell[302029, 6956, 113, 3, 28, "Input",
 CellID->1741557682],
Cell[CellGroupData[{
Cell[302167, 6963, 82, 2, 28, "Input",
 CellID->1089342576],
Cell[302252, 6967, 294, 8, 36, "Output",
 CellID->1923433803]
}, Open  ]],
Cell[302561, 6978, 496, 12, 70, "Text",
 CellID->1246205090],
Cell[303060, 6992, 169, 4, 45, "MathCaption",
 CellID->1080588730],
Cell[303232, 6998, 234, 7, 28, "Input",
 CellID->1222975879],
Cell[303469, 7007, 339, 9, 65, "Input",
 CellID->190157466],
Cell[303811, 7018, 193, 6, 28, "Input",
 CellID->185582431],
Cell[304007, 7026, 199, 6, 28, "Input",
 CellID->937662373],
Cell[304209, 7034, 332, 11, 47, "Input",
 CellID->1056501325],
Cell[304544, 7047, 353, 11, 47, "Input",
 CellID->296700468],
Cell[304900, 7060, 330, 10, 47, "Input",
 CellID->63504324],
Cell[305233, 7072, 243, 7, 28, "Input",
 CellID->17800909],
Cell[305479, 7081, 264, 9, 35, "MathCaption",
 CellID->394254680],
Cell[CellGroupData[{
Cell[305768, 7094, 146, 4, 28, "Input",
 CellID->679650630],
Cell[305917, 7100, 14765, 315, 83, "Output",
 CellID->1238432497]
}, Open  ]],
Cell[CellGroupData[{
Cell[320719, 7420, 145, 4, 28, "Input",
 CellID->1251355765],
Cell[320867, 7426, 179, 5, 36, "Output",
 CellID->923470355]
}, Open  ]],
Cell[CellGroupData[{
Cell[321083, 7436, 148, 4, 28, "Input",
 CellID->1091565342],
Cell[321234, 7442, 160, 5, 36, "Output",
 CellID->901939616]
}, Open  ]],
Cell[321409, 7450, 268, 9, 35, "MathCaption",
 CellID->2068809152],
Cell[CellGroupData[{
Cell[321702, 7463, 144, 4, 28, "Input",
 CellID->1504137928],
Cell[321849, 7469, 315, 7, 19, "Message",
 CellID->1959545586],
Cell[322167, 7478, 166, 5, 36, "Output",
 CellID->273453510]
}, Open  ]],
Cell[CellGroupData[{
Cell[322370, 7488, 202, 6, 28, "Input",
 CellID->567689087],
Cell[322575, 7496, 329, 7, 19, "Message",
 CellID->318137990],
Cell[322907, 7505, 167, 5, 36, "Output",
 CellID->1858400547]
}, Open  ]],
Cell[CellGroupData[{
Cell[323111, 7515, 111, 3, 28, "Input",
 CellID->1399236465],
Cell[323225, 7520, 609, 11, 35, "Message",
 CellID->1135831461],
Cell[323837, 7533, 166, 5, 36, "Output",
 CellID->937226844]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[324052, 7544, 64, 1, 52, "Subsection",
 CellID->509461683],
Cell[324119, 7547, 1640, 51, 115, "Text",
 CellID->873838021],
Cell[325762, 7600, 199, 5, 50, "Text",
 CellID->941636747]
}, Open  ]],
Cell[CellGroupData[{
Cell[325998, 7610, 59, 1, 52, "Subsection",
 CellID->372312379],
Cell[326060, 7613, 1538, 49, 114, "Text",
 CellID->856676189],
Cell[327601, 7664, 276, 9, 35, "MathCaption",
 CellID->1290614491],
Cell[327880, 7675, 224, 7, 28, "Input",
 CellID->292030307],
Cell[328107, 7684, 240, 7, 28, "Input",
 CellID->122296298],
Cell[328350, 7693, 88, 1, 31, "MathCaption",
 CellID->2019627722],
Cell[CellGroupData[{
Cell[328463, 7698, 141, 4, 28, "Input",
 CellID->1279537321],
Cell[328607, 7704, 14719, 314, 83, "Output",
 CellID->1492017210]
}, Open  ]],
Cell[CellGroupData[{
Cell[343363, 8023, 151, 4, 28, "Input",
 CellID->109462606],
Cell[343517, 8029, 177, 5, 36, "Output",
 CellID->166702451]
}, Open  ]],
Cell[343709, 8037, 478, 13, 72, "Text",
 CellID->426397350],
Cell[344190, 8052, 138, 5, 33, "MathCaption",
 CellID->307331411],
Cell[344331, 8059, 586, 18, 47, "Input",
 CellID->64120321],
Cell[344920, 8079, 243, 7, 28, "Input",
 CellID->1770961704],
Cell[345166, 8088, 181, 4, 45, "MathCaption",
 CellID->430011708],
Cell[CellGroupData[{
Cell[345372, 8096, 141, 4, 28, "Input",
 CellID->924304201],
Cell[345516, 8102, 14725, 314, 83, "Output",
 CellID->1655332254]
}, Open  ]],
Cell[CellGroupData[{
Cell[360278, 8421, 293, 9, 28, "Input",
 CellID->367169339],
Cell[360574, 8432, 350, 10, 36, "Output",
 CellID->715545525]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[360973, 8448, 66, 1, 52, "Subsection",
 CellID->1318946931],
Cell[361042, 8451, 1564, 49, 115, "Text",
 CellID->1447920800],
Cell[362609, 8502, 199, 5, 50, "Text",
 CellID->2067681443]
}, Open  ]],
Cell[CellGroupData[{
Cell[362845, 8512, 62, 1, 52, "Subsection",
 CellID->1550760166],
Cell[362910, 8515, 1734, 53, 137, "Text",
 CellID->807608835]
}, Open  ]],
Cell[CellGroupData[{
Cell[364681, 8573, 73, 1, 52, "Subsection",
 CellID->168337089],
Cell[364757, 8576, 2457, 73, 194, "Text",
 CellID->1304849692],
Cell[367217, 8651, 906, 27, 92, "Text",
 CellID->505770280],
Cell[368126, 8680, 416, 13, 50, "Text",
 CellID->1490360631],
Cell[368545, 8695, 115, 3, 31, "MathCaption",
 CellID->241866609],
Cell[368663, 8700, 326, 9, 47, "Input",
 CellID->1434284997],
Cell[368992, 8711, 258, 7, 28, "Input",
 CellID->524007004],
Cell[CellGroupData[{
Cell[369275, 8722, 143, 4, 28, "Input",
 CellID->155279881],
Cell[369421, 8728, 14756, 315, 85, "Output",
 CellID->831074822]
}, Open  ]],
Cell[384192, 9046, 97, 1, 31, "MathCaption",
 CellID->1058145675],
Cell[384292, 9049, 124, 4, 28, "Input",
 CellID->301299687],
Cell[384419, 9055, 349, 10, 28, "Input",
 CellID->2119053189],
Cell[CellGroupData[{
Cell[384793, 9069, 155, 4, 28, "Input",
 CellID->688568790],
Cell[384951, 9075, 274, 8, 36, "Output",
 CellID->640893266]
}, Open  ]],
Cell[385240, 9086, 96, 1, 31, "MathCaption",
 CellID->942278918],
Cell[385339, 9089, 272, 8, 47, "Input",
 CellID->852299100],
Cell[CellGroupData[{
Cell[385636, 9101, 308, 8, 28, "Input",
 CellID->844173584],
Cell[385947, 9111, 422, 12, 36, "Output",
 CellID->1862631957]
}, Open  ]],
Cell[386384, 9126, 130, 3, 31, "MathCaption",
 CellID->1724177082],
Cell[CellGroupData[{
Cell[386539, 9133, 309, 8, 28, "Input",
 CellID->1386178980],
Cell[386851, 9143, 566, 11, 19, "Message",
 CellID->1607514204],
Cell[387420, 9156, 166, 5, 36, "Output",
 CellID->2146947368]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[387635, 9167, 59, 1, 52, "Subsection",
 CellID->911463099],
Cell[387697, 9170, 1678, 52, 136, "Text",
 CellID->99884556],
Cell[389378, 9224, 853, 21, 112, "Text",
 CellID->959450842],
Cell[390234, 9247, 252, 6, 50, "Text",
 CellID->1577690347]
}, Open  ]],
Cell[CellGroupData[{
Cell[390523, 9258, 62, 1, 52, "Subsection",
 CellID->1264392131],
Cell[390588, 9261, 1026, 31, 96, "Text",
 CellID->254880194],
Cell[391617, 9294, 287, 8, 52, "Text",
 CellID->1689028440]
}, Open  ]],
Cell[CellGroupData[{
Cell[391941, 9307, 64, 1, 52, "Subsection",
 CellID->1535191473],
Cell[392008, 9310, 876, 24, 92, "Text",
 CellID->2094551653],
Cell[392887, 9336, 199, 5, 33, "MathCaption",
 CellID->1687712731],
Cell[393089, 9343, 166, 5, 28, "Input",
 CellID->1423860341],
Cell[CellGroupData[{
Cell[393280, 9352, 169, 5, 28, "Input",
 CellID->1410472666],
Cell[393452, 9359, 14776, 315, 87, "Output",
 CellID->1943290620]
}, Open  ]],
Cell[CellGroupData[{
Cell[408265, 9679, 184, 5, 28, "Input",
 CellID->515863127],
Cell[408452, 9686, 15061, 316, 87, "Output",
 CellID->1954146764]
}, Open  ]],
Cell[423528, 10005, 119, 3, 31, "MathCaption",
 CellID->612832443],
Cell[CellGroupData[{
Cell[423672, 10012, 134, 3, 28, "Input",
 CellID->543298489],
Cell[423809, 10017, 181, 6, 36, "Output",
 CellID->117237579]
}, Open  ]],
Cell[424005, 10026, 112, 3, 31, "MathCaption",
 CellID->181936843],
Cell[CellGroupData[{
Cell[424142, 10033, 108, 3, 28, "Input",
 CellID->720092550],
Cell[424253, 10038, 14775, 315, 87, "Output",
 CellID->1525137005]
}, Open  ]],
Cell[439043, 10356, 129, 3, 31, "MathCaption",
 CellID->1169485954],
Cell[439175, 10361, 247, 7, 28, "Input",
 CellID->882853713],
Cell[CellGroupData[{
Cell[439447, 10372, 118, 3, 28, "Input",
 CellID->93814715],
Cell[439568, 10377, 14724, 313, 85, "Output",
 CellID->1157837268]
}, Open  ]],
Cell[CellGroupData[{
Cell[454329, 10695, 177, 5, 28, "Input",
 CellID->228452575],
Cell[454509, 10702, 177, 6, 36, "Output",
 CellID->1421637809]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[454735, 10714, 56, 1, 52, "Subsection",
 CellID->1022061240],
Cell[454794, 10717, 661, 19, 74, "Text",
 CellID->819982239],
Cell[455458, 10738, 1074, 35, 141, "DefinitionBox",
 CellID->1919420326],
Cell[456535, 10775, 87, 1, 31, "Caption",
 CellID->198073848],
Cell[456625, 10778, 757, 27, 56, "Text",
 CellID->1581514413],
Cell[457385, 10807, 500, 16, 49, "MathCaption",
 CellID->2073729606],
Cell[457888, 10825, 165, 5, 28, "Input",
 CellID->1723480008],
Cell[CellGroupData[{
Cell[458078, 10834, 119, 3, 28, "Input",
 CellID->1269063720],
Cell[458200, 10839, 14703, 312, 83, "Output",
 CellID->1148248907]
}, Open  ]],
Cell[CellGroupData[{
Cell[472940, 11156, 142, 4, 28, "Input",
 CellID->1592441682],
Cell[473085, 11162, 14721, 312, 85, "Output",
 CellID->1331328007]
}, Open  ]],
Cell[487821, 11477, 277, 9, 35, "MathCaption",
 CellID->784824769],
Cell[CellGroupData[{
Cell[488123, 11490, 142, 4, 28, "Input",
 CellID->1282613186],
Cell[488268, 11496, 14720, 312, 85, "Output",
 CellID->997695556]
}, Open  ]],
Cell[503003, 11811, 550, 17, 49, "MathCaption",
 CellID->417108723],
Cell[503556, 11830, 237, 6, 28, "Input",
 CellID->959683653],
Cell[CellGroupData[{
Cell[503818, 11840, 121, 3, 28, "Input",
 CellID->1800967001],
Cell[503942, 11845, 14729, 313, 85, "Output",
 CellID->716893916]
}, Open  ]],
Cell[CellGroupData[{
Cell[518708, 12163, 144, 4, 28, "Input",
 CellID->1783209144],
Cell[518855, 12169, 14730, 313, 85, "Output",
 CellID->1452786542]
}, Open  ]],
Cell[533600, 12485, 488, 16, 35, "MathCaption",
 CellID->1738693653],
Cell[534091, 12503, 241, 7, 28, "Input",
 CellID->1414241242],
Cell[CellGroupData[{
Cell[534357, 12514, 119, 3, 28, "Input",
 CellID->803549298],
Cell[534479, 12519, 14722, 313, 83, "Output",
 CellID->94345004]
}, Open  ]],
Cell[CellGroupData[{
Cell[549238, 12837, 119, 3, 28, "Input",
 CellID->693452443],
Cell[549360, 12842, 14723, 313, 83, "Output",
 CellID->813550742]
}, Open  ]],
Cell[564098, 13158, 982, 26, 114, "Text",
 CellID->1107640372],
Cell[565083, 13186, 293, 9, 35, "MathCaption",
 CellID->665634953],
Cell[565379, 13197, 830, 24, 83, "Input",
 CellID->1084337848],
Cell[CellGroupData[{
Cell[566234, 13225, 203, 6, 28, "Input",
 CellID->1438167394],
Cell[566440, 13233, 220, 5, 23, "Print",
 CellID->1034669928],
Cell[566663, 13240, 14827, 317, 87, "Output",
 CellID->1522390137]
}, Open  ]],
Cell[CellGroupData[{
Cell[581527, 13562, 202, 6, 28, "Input",
 CellID->939821977],
Cell[581732, 13570, 220, 5, 23, "Print",
 CellID->1690862201],
Cell[581955, 13577, 14826, 317, 87, "Output",
 CellID->669911456]
}, Open  ]],
Cell[596796, 13897, 113, 3, 31, "MathCaption",
 CellID->1582820232],
Cell[CellGroupData[{
Cell[596934, 13904, 203, 6, 28, "Input",
 CellID->1579703835],
Cell[597140, 13912, 220, 5, 23, "Print",
 CellID->2092563418],
Cell[597363, 13919, 14826, 317, 87, "Output",
 CellID->373679407]
}, Open  ]],
Cell[612204, 14239, 191, 5, 33, "MathCaption",
 CellID->240346998],
Cell[612398, 14246, 188, 6, 28, "Input",
 CellID->1081837838]
}, Open  ]],
Cell[CellGroupData[{
Cell[612623, 14257, 56, 1, 52, "Subsection",
 CellID->720023240],
Cell[612682, 14260, 1059, 31, 86, "Text",
 CellID->360243835]
}, Open  ]],
Cell[CellGroupData[{
Cell[613778, 14296, 66, 1, 52, "Subsection",
 CellID->1885966802],
Cell[613847, 14299, 850, 26, 90, "Text",
 CellID->585411494],
Cell[614700, 14327, 128, 3, 31, "MathCaption",
 CellID->1160813182],
Cell[614831, 14332, 589, 16, 65, "Input",
 CellID->875552012],
Cell[615423, 14350, 81, 1, 31, "MathCaption",
 CellID->1381042993],
Cell[CellGroupData[{
Cell[615529, 14355, 175, 5, 28, "Input",
 CellID->1567377440],
Cell[615707, 14362, 250, 7, 36, "Output",
 CellID->1273968347]
}, Open  ]],
Cell[CellGroupData[{
Cell[615994, 14374, 142, 4, 28, "Input",
 CellID->844716440],
Cell[616139, 14380, 14697, 312, 85, "Output",
 CellID->1174047439]
}, Open  ]],
Cell[630851, 14695, 93, 1, 31, "MathCaption",
 CellID->199361608],
Cell[CellGroupData[{
Cell[630969, 14700, 109, 3, 28, "Input",
 CellID->1803282790],
Cell[631081, 14705, 168, 5, 36, "Output",
 CellID->1135558637]
}, Open  ]],
Cell[CellGroupData[{
Cell[631286, 14715, 112, 3, 28, "Input",
 CellID->290860332],
Cell[631401, 14720, 226, 7, 36, "Output",
 CellID->646841170]
}, Open  ]],
Cell[631642, 14730, 211, 5, 50, "Text",
 CellID->159657755]
}, Open  ]],
Cell[CellGroupData[{
Cell[631890, 14740, 65, 1, 52, "Subsection",
 CellID->470381286],
Cell[631958, 14743, 1012, 33, 90, "Text",
 CellID->810969195],
Cell[632973, 14778, 410, 10, 68, "Text",
 CellID->349060737],
Cell[633386, 14790, 227, 7, 33, "MathCaption",
 CellID->760595792],
Cell[633616, 14799, 375, 11, 47, "Input",
 CellID->462948490],
Cell[633994, 14812, 202, 5, 28, "Input",
 CellID->442018349],
Cell[634199, 14819, 515, 13, 101, "Input",
 CellID->277010609],
Cell[634717, 14834, 533, 13, 65, "Input",
 CellID->856456670],
Cell[635253, 14849, 88, 1, 31, "MathCaption",
 CellID->1018651300],
Cell[CellGroupData[{
Cell[635366, 14854, 144, 4, 28, "Input",
 CellID->732765216],
Cell[635513, 14860, 14724, 313, 85, "Output",
 CellID->1912962498]
}, Open  ]],
Cell[CellGroupData[{
Cell[650274, 15178, 204, 6, 28, "Input",
 CellID->1183024649],
Cell[650481, 15186, 170, 5, 36, "Output",
 CellID->1691671817]
}, Open  ]],
Cell[650666, 15194, 81, 1, 31, "MathCaption",
 CellID->1392225686],
Cell[CellGroupData[{
Cell[650772, 15199, 203, 6, 28, "Input",
 CellID->155286890],
Cell[650978, 15207, 503, 10, 19, "Message",
 CellID->714129125],
Cell[651484, 15219, 170, 5, 36, "Output",
 CellID->82100792]
}, Open  ]],
Cell[CellGroupData[{
Cell[651691, 15229, 121, 3, 35, "Subsubsection",
 CellID->182760886],
Cell[651815, 15234, 213, 5, 48, "Text",
 CellID->1761196335],
Cell[652031, 15241, 309, 6, 47, "MathCaption",
 CellID->398047499],
Cell[652343, 15249, 119, 4, 28, "Input",
 CellID->726127489],
Cell[652465, 15255, 263, 7, 47, "MathCaption",
 CellID->841278525],
Cell[652731, 15264, 519, 14, 83, "Input",
 CellID->572755288],
Cell[653253, 15280, 314, 7, 47, "MathCaption",
 CellID->335837827],
Cell[653570, 15289, 475, 12, 65, "Input",
 CellID->1659695744],
Cell[654048, 15303, 288, 8, 49, "MathCaption",
 CellID->839334073],
Cell[654339, 15313, 570, 13, 65, "Input",
 CellID->1569428651],
Cell[654912, 15328, 267, 7, 49, "MathCaption",
 CellID->1745293229],
Cell[CellGroupData[{
Cell[655204, 15339, 143, 4, 28, "Input",
 CellID->1993184903],
Cell[655350, 15345, 14697, 312, 83, "Output",
 CellID->2015171415]
}, Open  ]],
Cell[CellGroupData[{
Cell[670084, 15662, 108, 3, 28, "Input",
 CellID->664165430],
Cell[670195, 15667, 160, 5, 36, "Output",
 CellID->1021375068]
}, Open  ]],
Cell[670370, 15675, 118, 3, 31, "MathCaption",
 CellID->1338644473],
Cell[670491, 15680, 151, 5, 28, "Input",
 CellID->1558971739],
Cell[CellGroupData[{
Cell[670667, 15689, 171, 6, 28, "Input",
 CellID->190040326],
Cell[670841, 15697, 205, 7, 36, "Output",
 CellID->1413977405]
}, Open  ]],
Cell[671061, 15707, 264, 7, 45, "MathCaption",
 CellID->300747026],
Cell[671328, 15716, 120, 4, 28, "Input",
 CellID->1626244591],
Cell[CellGroupData[{
Cell[671473, 15724, 109, 3, 28, "Input",
 CellID->1268465568],
Cell[671585, 15729, 159, 5, 36, "Output",
 CellID->664208133]
}, Open  ]],
Cell[671759, 15737, 121, 3, 31, "MathCaption",
 CellID->433675366],
Cell[671883, 15742, 128, 4, 28, "Input",
 CellID->222378444],
Cell[672014, 15748, 119, 4, 28, "Input",
 CellID->892962528],
Cell[672136, 15754, 154, 4, 31, "MathCaption",
 CellID->1405482860],
Cell[CellGroupData[{
Cell[672315, 15762, 109, 3, 28, "Input",
 CellID->1777794667],
Cell[672427, 15767, 159, 5, 36, "Output",
 CellID->726094225]
}, Open  ]],
Cell[672601, 15775, 115, 3, 31, "MathCaption",
 CellID->579598917],
Cell[CellGroupData[{
Cell[672741, 15782, 109, 3, 28, "Input",
 CellID->333175227],
Cell[672853, 15787, 14697, 312, 83, "Output",
 CellID->1463557321]
}, Open  ]],
Cell[CellGroupData[{
Cell[687587, 16104, 108, 3, 28, "Input",
 CellID->909840119],
Cell[687698, 16109, 159, 5, 36, "Output",
 CellID->730201309]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[687918, 16121, 61, 1, 52, "Subsection",
 CellID->35275765],
Cell[687982, 16124, 805, 19, 122, "Text",
 CellID->581861972],
Cell[688790, 16145, 1219, 38, 92, "Text",
 CellID->1774030662],
Cell[690012, 16185, 147, 4, 31, "MathCaption",
 CellID->1255165876],
Cell[690162, 16191, 189, 6, 28, "Input",
 CellID->841013451]
}, Open  ]],
Cell[CellGroupData[{
Cell[690388, 16202, 74, 5, 92, "Subsection",
 CellID->2046040484],
Cell[690465, 16209, 3604, 99, 1527, "Text",
 CellID->146775177],
Cell[694072, 16310, 88, 1, 31, "MathCaption",
 CellID->1959552213],
Cell[694163, 16313, 457, 13, 47, "Input",
 CellID->730315174],
Cell[CellGroupData[{
Cell[694645, 16330, 144, 4, 28, "Input",
 CellID->140378249],
Cell[694792, 16336, 7580, 132, 76, "Output",
 CellID->434389852]
}, Open  ]],
Cell[CellGroupData[{
Cell[702409, 16473, 139, 4, 28, "Input",
 CellID->760620998],
Cell[702551, 16479, 14798, 315, 83, "Output",
 CellID->880298753]
}, Open  ]],
Cell[717364, 16797, 231, 7, 52, "Text",
 CellID->908456048]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[717644, 16810, 65, 1, 62, "Section",
 CellID->617176298],
Cell[717712, 16813, 465, 12, 70, "Text",
 CellID->1792144871],
Cell[718180, 16827, 461, 11, 113, "DefinitionBox",
 CellID->1443390889],
Cell[718644, 16840, 74, 1, 31, "Caption",
 CellID->780524395],
Cell[718721, 16843, 708, 20, 74, "Text",
 CellID->1095394911],
Cell[CellGroupData[{
Cell[719454, 16867, 68, 1, 52, "Subsection",
 CellID->1958266969],
Cell[719525, 16870, 1932, 59, 70, "DefinitionBox",
 CellID->902997426],
Cell[721460, 16931, 66, 1, 70, "Caption",
 CellID->1410799575],
Cell[721529, 16934, 815, 22, 70, "Text",
 CellID->246987326],
Cell[722347, 16958, 122, 3, 70, "MathCaption",
 CellID->30098431],
Cell[CellGroupData[{
Cell[722494, 16965, 157, 4, 70, "Input",
 CellID->1205672772],
Cell[722654, 16971, 370, 10, 54, "Output",
 CellID->86585912]
}, Open  ]],
Cell[723039, 16984, 151, 5, 70, "Input",
 CellID->1402993965],
Cell[723193, 16991, 463, 9, 70, "Text",
 CellID->1426339035],
Cell[723659, 17002, 90, 1, 70, "MathCaption",
 CellID->120209784],
Cell[CellGroupData[{
Cell[723774, 17007, 154, 4, 70, "Input",
 CellID->1731211508],
Cell[723931, 17013, 14844, 317, 70, "Output",
 CellID->1916312297]
}, Open  ]],
Cell[CellGroupData[{
Cell[738812, 17335, 129, 3, 70, "Input",
 CellID->622962121],
Cell[738944, 17340, 258, 6, 54, "Output",
 CellID->1648521620]
}, Open  ]],
Cell[739217, 17349, 155, 4, 70, "MathCaption",
 CellID->1224742888],
Cell[CellGroupData[{
Cell[739397, 17357, 109, 3, 70, "Input",
 CellID->273549399],
Cell[739509, 17362, 437, 12, 70, "Output",
 CellID->2016337393]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[739995, 17380, 91, 1, 32, "Subsection",
 CellID->258574061],
Cell[740089, 17383, 1091, 32, 70, "DefinitionBox",
 CellID->1189463968],
Cell[741183, 17417, 97, 1, 70, "Caption",
 CellID->395640253],
Cell[741283, 17420, 423, 8, 70, "Text",
 CellID->2133838645],
Cell[741709, 17430, 97, 1, 70, "MathCaption",
 CellID->1115879082],
Cell[CellGroupData[{
Cell[741831, 17435, 156, 4, 70, "Input",
 CellID->975154460],
Cell[741990, 17441, 13965, 324, 70, "Output",
 CellID->612694055]
}, Open  ]],
Cell[755970, 17768, 250, 7, 70, "Input",
 CellID->2014819927],
Cell[CellGroupData[{
Cell[756245, 17779, 75, 2, 70, "Input",
 CellID->1512592291],
Cell[756323, 17783, 13724, 319, 70, "Output",
 CellID->604531316]
}, Open  ]],
Cell[770062, 18105, 112, 3, 70, "Input",
 CellID->1747068987]
}, Closed]],
Cell[CellGroupData[{
Cell[770211, 18113, 88, 1, 32, "Subsection",
 CellID->1494825346],
Cell[770302, 18116, 2163, 62, 70, "DefinitionBox",
 CellID->558985090],
Cell[772468, 18180, 85, 1, 70, "Caption",
 CellID->19090],
Cell[772556, 18183, 231, 6, 70, "Text",
 CellID->1421252782],
Cell[772790, 18191, 254, 7, 70, "MathCaption",
 CellID->534901493],
Cell[773047, 18200, 618, 16, 70, "Input",
 CellID->722846509],
Cell[773668, 18218, 178, 4, 70, "MathCaption",
 CellID->2063451131],
Cell[773849, 18224, 122, 4, 70, "Input",
 CellID->566285684],
Cell[CellGroupData[{
Cell[773996, 18232, 185, 5, 70, "Input",
 CellID->709743314],
Cell[774184, 18239, 3846, 76, 165, "Output",
 CellID->677637140]
}, Open  ]],
Cell[CellGroupData[{
Cell[778067, 18320, 200, 5, 70, "Input",
 CellID->1283950604],
Cell[778270, 18327, 3795, 76, 172, "Output",
 CellID->941631939]
}, Open  ]],
Cell[782080, 18406, 206, 5, 70, "Text",
 CellID->942658522],
Cell[782289, 18413, 306, 10, 70, "MathCaption",
 CellID->1221805082],
Cell[782598, 18425, 319, 10, 70, "Input",
 CellID->639380560],
Cell[CellGroupData[{
Cell[782942, 18439, 313, 10, 70, "Input",
 CellID->60902332],
Cell[783258, 18451, 3850, 77, 156, "Output",
 CellID->129285429]
}, Open  ]],
Cell[787123, 18531, 96, 1, 70, "MathCaption",
 CellID->1794238086],
Cell[787222, 18534, 303, 9, 70, "Input",
 CellID->794140228],
Cell[CellGroupData[{
Cell[787550, 18547, 314, 10, 70, "Input",
 CellID->503945891],
Cell[787867, 18559, 2201, 50, 180, "Output",
 CellID->1816722090]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[790117, 18615, 72, 1, 32, "Subsection",
 CellID->118403969],
Cell[790192, 18618, 257, 5, 70, "Text",
 CellID->395098347],
Cell[790452, 18625, 1244, 35, 70, "DefinitionBox",
 CellID->1411388259],
Cell[791699, 18662, 74, 1, 70, "Caption",
 CellID->98104251]
}, Closed]],
Cell[CellGroupData[{
Cell[791810, 18668, 59, 1, 32, "Subsection",
 CellID->2011240917],
Cell[791872, 18671, 742, 21, 70, "Text",
 CellID->552691651],
Cell[792617, 18694, 2091, 63, 70, "DefinitionBox",
 CellID->1177032993],
Cell[794711, 18759, 67, 1, 70, "Caption",
 CellID->331706967],
Cell[794781, 18762, 143, 4, 70, "MathCaption",
 CellID->1274915335],
Cell[794927, 18768, 176, 6, 70, "Input",
 CellID->1448203388],
Cell[CellGroupData[{
Cell[795128, 18778, 160, 4, 70, "Input",
 CellID->2057689226],
Cell[795291, 18784, 245, 8, 36, "Output",
 CellID->1742640817]
}, Open  ]],
Cell[CellGroupData[{
Cell[795573, 18797, 189, 4, 70, "Input",
 CellID->1878566159],
Cell[795765, 18803, 169, 5, 36, "Output",
 CellID->756856119]
}, Open  ]],
Cell[795949, 18811, 105, 2, 70, "MathCaption",
 CellID->1182233533],
Cell[CellGroupData[{
Cell[796079, 18817, 180, 5, 70, "Input",
 CellID->2066652910],
Cell[796262, 18824, 14863, 317, 70, "Output",
 CellID->2112428815]
}, Open  ]],
Cell[811140, 19144, 169, 6, 70, "Input",
 CellID->2146411916],
Cell[CellGroupData[{
Cell[811334, 19154, 188, 4, 70, "Input",
 CellID->935150852],
Cell[811525, 19160, 170, 5, 36, "Output",
 CellID->1370365149]
}, Open  ]],
Cell[811710, 19168, 200, 4, 70, "MathCaption",
 CellID->1400755070],
Cell[811913, 19174, 251, 7, 70, "Input",
 CellID->1391441501],
Cell[CellGroupData[{
Cell[812189, 19185, 111, 3, 70, "Input",
 CellID->799180110],
Cell[812303, 19190, 173, 5, 36, "Output",
 CellID->1457380432]
}, Open  ]],
Cell[CellGroupData[{
Cell[812513, 19200, 180, 5, 70, "Input",
 CellID->2141926589],
Cell[812696, 19207, 14863, 317, 70, "Output",
 CellID->1091806662]
}, Open  ]],
Cell[CellGroupData[{
Cell[827596, 19529, 112, 3, 70, "Input",
 CellID->1894288266],
Cell[827711, 19534, 174, 5, 36, "Output",
 CellID->857819887]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[827934, 19545, 60, 1, 32, "Subsection",
 CellID->1385585226],
Cell[827997, 19548, 513, 12, 70, "Text",
 CellID->846557753],
Cell[828513, 19562, 3416, 104, 70, "DefinitionBox",
 CellID->462132275],
Cell[831932, 19668, 77, 1, 70, "Caption",
 CellID->218918767],
Cell[832012, 19671, 444, 8, 70, "Text",
 CellID->1016993296],
Cell[832459, 19681, 152, 5, 70, "MathCaption",
 CellID->783979399],
Cell[CellGroupData[{
Cell[832636, 19690, 272, 7, 70, "Input",
 CellID->1529584648],
Cell[832911, 19699, 216, 7, 36, "Output",
 CellID->24866333]
}, Open  ]],
Cell[833142, 19709, 325, 7, 70, "MathCaption",
 CellID->1667771204],
Cell[833470, 19718, 210, 6, 70, "Input",
 CellID->1274064984],
Cell[CellGroupData[{
Cell[833705, 19728, 143, 4, 70, "Input",
 CellID->650741851],
Cell[833851, 19734, 14757, 315, 70, "Output",
 CellID->1316631213]
}, Open  ]],
Cell[CellGroupData[{
Cell[848645, 20054, 117, 3, 70, "Input",
 CellID->1573525378],
Cell[848765, 20059, 188, 6, 36, "Output",
 CellID->949298203]
}, Open  ]],
Cell[848968, 20068, 110, 3, 70, "Input",
 CellID->1363650644],
Cell[849081, 20073, 97, 1, 70, "MathCaption",
 CellID->484797544],
Cell[849181, 20076, 171, 6, 70, "Input",
 CellID->439365290],
Cell[849355, 20084, 209, 6, 70, "Input",
 CellID->589720170],
Cell[849567, 20092, 156, 4, 70, "MathCaption",
 CellID->930892924],
Cell[CellGroupData[{
Cell[849748, 20100, 143, 4, 70, "Input",
 CellID->474775464],
Cell[849894, 20106, 14757, 315, 70, "Output",
 CellID->1198884258]
}, Open  ]],
Cell[CellGroupData[{
Cell[864688, 20426, 116, 3, 70, "Input",
 CellID->857287178],
Cell[864807, 20431, 262, 8, 36, "Output",
 CellID->1956148052]
}, Open  ]],
Cell[865084, 20442, 360, 7, 70, "Text",
 CellID->87280912],
Cell[865447, 20451, 142, 4, 70, "MathCaption",
 CellID->198957083],
Cell[865592, 20457, 641, 18, 70, "Input",
 CellID->239655602],
Cell[CellGroupData[{
Cell[866258, 20479, 117, 3, 70, "Input",
 CellID->1359864689],
Cell[866378, 20484, 177, 6, 36, "Output",
 CellID->1724856649]
}, Open  ]],
Cell[866570, 20493, 89, 1, 70, "MathCaption",
 CellID->783948890],
Cell[866662, 20496, 233, 7, 70, "Input",
 CellID->1016819885],
Cell[CellGroupData[{
Cell[866920, 20507, 115, 3, 70, "Input",
 CellID->16944369],
Cell[867038, 20512, 15003, 315, 70, "Output",
 CellID->1316168379]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[882090, 20833, 66, 1, 32, "Subsection",
 CellID->218225314],
Cell[882159, 20836, 879, 26, 70, "Text",
 CellID->378661383],
Cell[883041, 20864, 823, 23, 70, "DefinitionBox",
 CellID->529879798],
Cell[883867, 20889, 76, 1, 70, "Caption",
 CellID->75080877],
Cell[883946, 20892, 214, 5, 70, "Text",
 CellID->18486029],
Cell[884163, 20899, 130, 3, 70, "MathCaption",
 CellID->1633462499],
Cell[CellGroupData[{
Cell[884318, 20906, 279, 8, 70, "Input",
 CellID->173277445],
Cell[884600, 20916, 334, 9, 70, "Output",
 CellID->1413811212]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[884995, 20932, 50, 1, 62, "Section",
 CellID->699998962],
Cell[885048, 20935, 769, 21, 90, "Text",
 CellID->967136068],
Cell[885820, 20958, 174, 5, 32, "Text",
 CellID->468578399],
Cell[885997, 20965, 505, 12, 47, "Input",
 CellID->574618444],
Cell[886505, 20979, 522, 14, 52, "Text",
 CellID->378227749],
Cell[887030, 20995, 370, 10, 47, "Input",
 CellID->322182323],
Cell[887403, 21007, 277, 8, 32, "Text",
 CellID->1112028574],
Cell[887683, 21017, 193, 6, 28, "Input",
 CellID->314063377],
Cell[CellGroupData[{
Cell[887901, 21027, 125, 3, 28, "Input",
 CellID->2095856560],
Cell[888029, 21032, 244, 8, 36, "Output",
 CellID->2034425826]
}, Open  ]],
Cell[CellGroupData[{
Cell[888310, 21045, 130, 3, 28, "Input",
 CellID->360230048],
Cell[888443, 21050, 176, 6, 36, "Output",
 CellID->630015843]
}, Open  ]],
Cell[888634, 21059, 348, 10, 52, "Text",
 CellID->1581893591],
Cell[888985, 21071, 207, 6, 28, "Input",
 CellID->1038034077],
Cell[CellGroupData[{
Cell[889217, 21081, 126, 3, 28, "Input",
 CellID->81583911],
Cell[889346, 21086, 279, 8, 36, "Output",
 CellID->1086225391]
}, Open  ]],
Cell[CellGroupData[{
Cell[889662, 21099, 133, 3, 28, "Input",
 CellID->431663390],
Cell[889798, 21104, 222, 7, 36, "Output",
 CellID->766836164]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[890069, 21117, 72, 1, 62, "Section",
 CellID->1883152198],
Cell[890144, 21120, 299, 6, 66, "Text",
 CellID->604342426],
Cell[890446, 21128, 531, 12, 88, "Text",
 CellID->1732987119],
Cell[890980, 21142, 123, 3, 30, "Text",
 CellID->1103501707],
Cell[CellGroupData[{
Cell[891128, 21149, 131, 3, 28, "Input",
 CellID->884414057],
Cell[891262, 21154, 14862, 317, 83, "Output",
 CellID->1612735112]
}, Open  ]],
Cell[906139, 21474, 114, 3, 30, "Text",
 CellID->1360385757],
Cell[906256, 21479, 204, 6, 28, "Input",
 CellID->1964585524]
}, Open  ]],
Cell[CellGroupData[{
Cell[906497, 21490, 47, 1, 62, "Section",
 CellID->647897357],
Cell[CellGroupData[{
Cell[906569, 21495, 74, 1, 52, "Subsection",
 CellID->1468788809],
Cell[906646, 21498, 883, 23, 110, "Text",
 CellID->608990598],
Cell[907532, 21523, 811, 23, 101, "Input",
 CellID->397918984],
Cell[CellGroupData[{
Cell[908368, 21550, 129, 3, 28, "Input",
 CellID->560287330],
Cell[908500, 21555, 174, 5, 36, "Output",
 CellID->33363215]
}, Open  ]],
Cell[CellGroupData[{
Cell[908711, 21565, 164, 4, 28, "Input",
 CellID->242322638],
Cell[908878, 21571, 768, 17, 54, "Output",
 CellID->1087582154]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[909695, 21594, 71, 1, 52, "Subsection",
 CellID->1759942661],
Cell[909769, 21597, 865, 17, 139, "Text",
 CellID->2064033296],
Cell[910637, 21616, 107949, 1775, 153, "Picture",
 CellID->99313515],
Cell[1018589, 23393, 847, 22, 110, "Text",
 CellID->567452886],
Cell[1019439, 23417, 181, 4, 51, "Code",
 CellID->205778675],
Cell[1019623, 23423, 458, 15, 52, "Text",
 CellID->1073519055],
Cell[1020084, 23440, 285, 6, 68, "Text",
 CellID->1624638938],
Cell[1020372, 23448, 130, 3, 51, "Code",
 CellID->52059361],
Cell[1020505, 23453, 42, 1, 30, "Text",
 CellID->935835998],
Cell[1020550, 23456, 149, 4, 51, "Code",
 CellID->425387758],
Cell[1020702, 23462, 69, 1, 30, "Text",
 CellID->518987843],
Cell[1020774, 23465, 119, 3, 51, "Code",
 CellID->1697586834],
Cell[1020896, 23470, 303, 7, 68, "Text",
 CellID->2021668643],
Cell[1021202, 23479, 638, 16, 103, "Code",
 CellID->698620067],
Cell[1021843, 23497, 685, 19, 94, "Text",
 CellID->1414367920],
Cell[1022531, 23518, 152, 4, 51, "Code",
 CellID->785142797],
Cell[1022686, 23524, 57, 1, 30, "Text",
 CellID->1755462011],
Cell[1022746, 23527, 649, 16, 103, "Code",
 CellID->1919676391],
Cell[1023398, 23545, 297, 10, 34, "Text",
 CellID->206791009],
Cell[1023698, 23557, 127, 3, 51, "Code",
 CellID->907947417],
Cell[1023828, 23562, 388, 12, 52, "Text",
 CellID->2000925584],
Cell[1024219, 23576, 700, 16, 137, "Code",
 CellID->2109861915],
Cell[1024922, 23594, 148, 5, 32, "Text",
 CellID->1199226141],
Cell[1025073, 23601, 86, 2, 51, "Code",
 CellID->1259724692],
Cell[1025162, 23605, 506, 17, 52, "Text",
 CellID->151622671],
Cell[1025671, 23624, 242, 5, 69, "Code",
 CellID->1406626155]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1025962, 23635, 52, 1, 62, "Section",
 CellID->1293143377],
Cell[1026017, 23638, 340, 11, 49, "Text",
 CellID->949814904]
}, Open  ]],
Cell[CellGroupData[{
Cell[1026394, 23654, 284, 12, 31, "TutorialMoreAboutSection",
 CellID->23220180],
Cell[1026681, 23668, 31, 0, 14, "SectionHeaderSpacer"],
Cell[1026715, 23670, 165, 3, 18, "TutorialMoreAbout",
 CellID->1567025153]
}, Open  ]]
}, Open  ]],
Cell[1026907, 23677, 23, 0, 41, "FooterCell"]
}
]
*)

(* End of internal cache information *)

