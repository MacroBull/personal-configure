(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    351721,       9632]
NotebookOptionsPosition[    316381,       8469]
NotebookOutlinePosition[    323095,       8623]
CellTagsIndexPosition[    322971,       8617]
WindowTitle->FindFit
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[GridBox[{
   {Cell["BUILT-IN WOLFRAM LANGUAGE SYMBOL", "PacletNameCell"], Cell[TextData[{
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "Tutorials",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }]],
         TextCell[
          Row[{"Tutorials", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"Manipulating Numerical Data\"\>":>
       Documentation`HelpLookup[
       "paclet:tutorial/ManipulatingNumericalData"], "\<\"Curve Fitting\"\>":>
       Documentation`HelpLookup[
       "paclet:tutorial/CurveFitting"], "\<\"Constrained Optimization\"\>":>
       Documentation`HelpLookup[
       "paclet:tutorial/ConstrainedOptimizationOverview"], "\<\"Unconstrained \
Optimization\"\>":>Documentation`HelpLookup[
       "paclet:tutorial/UnconstrainedOptimizationOverview"]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"Tutorials"]],
      LineSpacing->{1.4, 0}],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "See Also",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }]],
         TextCell[
          Row[{"See Also", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"FindMinimum\"\>":>
       Documentation`HelpLookup["paclet:ref/FindMinimum"], "\<\"Fit\"\>":>
       Documentation`HelpLookup["paclet:ref/Fit"], "\<\"NMinimize\"\>":>
       Documentation`HelpLookup[
       "paclet:ref/NMinimize"], "\<\"LeastSquares\"\>":>
       Documentation`HelpLookup[
       "paclet:ref/LeastSquares"], "\<\"Interpolation\"\>":>
       Documentation`HelpLookup[
       "paclet:ref/Interpolation"], "\<\"FindCurvePath\"\>":>
       Documentation`HelpLookup[
       "paclet:ref/FindCurvePath"], "\<\"ChiSquareDistribution\"\>":>
       Documentation`HelpLookup[
       "paclet:ref/ChiSquareDistribution"], "\<\"LinearModelFit\"\>":>
       Documentation`HelpLookup[
       "paclet:ref/LinearModelFit"], "\<\"NonlinearModelFit\"\>":>
       Documentation`HelpLookup["paclet:ref/NonlinearModelFit"]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"SeeAlso"]],
      LineSpacing->{1.4, 0}],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "Related Guides",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }]],
         TextCell[
          Row[{"Related Guides", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->
         False], {"\<\"Curve Fitting & Approximate Functions\"\>":>
       Documentation`HelpLookup[
       "paclet:guide/CurveFittingAndApproximateFunctions"], "\<\"Data \
Transforms and Smoothing\"\>":>Documentation`HelpLookup[
       "paclet:guide/DataTransformsAndSmoothing"], "\<\"Machine Learning\"\>":>
       Documentation`HelpLookup[
       "paclet:guide/MachineLearning"], "\<\"Matrix-Based Minimization\"\>":>
       Documentation`HelpLookup[
       "paclet:guide/MatrixBasedMinimization"], "\<\"Numerical Data\"\>":>
       Documentation`HelpLookup[
       "paclet:guide/NumericalData"], "\<\"Optimization\"\>":>
       Documentation`HelpLookup[
       "paclet:guide/Optimization"], "\<\"Scientific Data Analysis\"\>":>
       Documentation`HelpLookup[
       "paclet:guide/ScientificDataAnalysis"], "\<\"Time Series\"\>":>
       Documentation`HelpLookup["paclet:guide/TimeSeries"]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"MoreAbout"]],
      LineSpacing->{1.4, 0}],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "URL",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }]],
         TextCell[
          Row[{"URL", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"ref/FindFit\"\>":>
       None, "\<\"Copy Wolfram Documentation Center URL\"\>":>
       Module[{DocumentationSearch`Private`nb$}, 
        DocumentationSearch`Private`nb$ = NotebookPut[
           Notebook[{
             Cell["ref/FindFit"]}, Visible -> False]]; 
        SelectionMove[DocumentationSearch`Private`nb$, All, Notebook]; 
        FrontEndTokenExecute[DocumentationSearch`Private`nb$, "Copy"]; 
        NotebookClose[DocumentationSearch`Private`nb$]; Null], 
       Delimiter, "\<\"Copy web URL\"\>":>
       Module[{DocumentationSearch`Private`nb$}, 
        DocumentationSearch`Private`nb$ = NotebookPut[
           Notebook[{
             Cell[
              BoxData[
               MakeBoxes[
                Hyperlink[
                "http://reference.wolfram.com/language/ref/FindFit.html"], 
                StandardForm]], "Input", TextClipboardType -> "PlainText"]}, 
            Visible -> False]]; 
        SelectionMove[DocumentationSearch`Private`nb$, All, Notebook]; 
        FrontEndTokenExecute[DocumentationSearch`Private`nb$, "Copy"]; 
        NotebookClose[DocumentationSearch`Private`nb$]; 
        Null], "\<\"Go to web URL\"\>":>FrontEndExecute[{
         NotebookLocate[{
           URL[
            StringJoin[
             If[
              TrueQ[DocumentationBuild`Make`Private`wsmlinkQ$30667], 
              "http://reference.wolfram.com/system-modeler/", 
              "http://reference.wolfram.com/language/"], "ref/FindFit", 
             ".html"]], None}]}]},
       Appearance->None,
       MenuAppearance->Automatic]],
      LineSpacing->{1.4, 0}]
    }], "AnchorBar"]}
  }]], "AnchorBarGrid",
 CellID->1],

Cell["FindFit", "ObjectName",
 CellID->13722],

Cell[CellGroupData[{

Cell[BoxData[GridBox[{
   {"", Cell[TextData[{
     Cell[BoxData[
      RowBox[{
       TemplateBox[{Cell[
          TextData["FindFit"]],"paclet:ref/FindFit"},
        "RefLink",
        BaseStyle->"InlineFormula"], "[", 
       RowBox[{
        StyleBox["data", "TI"], ",", 
        StyleBox["expr", "TI"], ",", 
        StyleBox["pars", "TI"], ",", 
        StyleBox["vars", "TI"]}], "]"}]], "InlineFormula"],
     "\[LineSeparator]finds numerical values of the parameters ",
     Cell[BoxData[
      StyleBox["pars", "TI"]], "InlineFormula"],
     " that make ",
     Cell[BoxData[
      StyleBox["expr", "TI"]], "InlineFormula"],
     " give a best fit to ",
     Cell[BoxData[
      StyleBox["data", "TI"]], "InlineFormula"],
     " as a function of ",
     Cell[BoxData[
      StyleBox["vars", "TI"]], "InlineFormula"],
     ".  "
    }]]},
   {"", Cell[TextData[{
     Cell[BoxData[
      RowBox[{
       TemplateBox[{Cell[
          TextData["FindFit"]],"paclet:ref/FindFit"},
        "RefLink",
        BaseStyle->"InlineFormula"], "[", 
       RowBox[{
        StyleBox["data", "TI"], ",", 
        RowBox[{"{", 
         RowBox[{
          StyleBox["expr", "TI"], ",", 
          StyleBox["cons", "TI"]}], "}"}], ",", 
        StyleBox["pars", "TI"], ",", 
        StyleBox["vars", "TI"]}], "]"}]], "InlineFormula"],
     " \[LineSeparator]finds a best fit subject to the parameter constraints ",
     Cell[BoxData[
      StyleBox["cons", "TI"]], "InlineFormula"],
     "."
    }]]}
  }]], "Usage",
 GridBoxOptions->{
 GridBoxBackground->{
  "Columns" -> {{None}}, "ColumnsIndexed" -> {}, "Rows" -> {None, {None}}, 
   "RowsIndexed" -> {}}},
 CellID->19752],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 ButtonBox[Cell[TextData[{
   Cell[BoxData[
    InterpretationBox[
     StyleBox[
      GraphicsBox[{},
       BaselinePosition->Baseline,
       ImageSize->{6, 0}],
      CacheGraphics->False],
     Spacer[6]]]],
   "Details and Options"
  }], "NotesFrameText"],
  Appearance->{Automatic, None},
  BaseStyle->None,
  ButtonFunction:>(FrontEndExecute[{
     FrontEnd`SelectionMove[
      FrontEnd`SelectedNotebook[], All, ButtonCell], 
     FrontEndToken["OpenCloseGroup"], 
     FrontEnd`SelectionMove[
      FrontEnd`SelectedNotebook[], After, CellContents]}]& ),
  Evaluator->None,
  Method->"Preemptive"]]]], "NotesSection",
 WholeCellGroupOpener->True,
 CellGroupingRules->{"SectionGrouping", 50},
 CellID->403096603],

Cell["", "SectionHeaderSpacer"],

Cell[TextData[{
 "The ",
 StyleBox["data", "TI"],
 " can have the form ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      SubscriptBox[
       StyleBox["x", "TI"], 
       StyleBox["1", "TR"]], ",", 
      SubscriptBox[
       StyleBox["y", "TI"], 
       StyleBox["1", "TR"]], ",", 
      StyleBox["\[Ellipsis]", "TR"], ",", 
      SubscriptBox[
       StyleBox["f", "TI"], 
       StyleBox["1", "TR"]]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox[
       StyleBox["x", "TI"], 
       StyleBox["2", "TR"]], ",", 
      SubscriptBox[
       StyleBox["y", "TI"], 
       StyleBox["2", "TR"]], ",", 
      StyleBox["\[Ellipsis]", "TR"], ",", 
      SubscriptBox[
       StyleBox["f", "TI"], 
       StyleBox["2", "TR"]]}], "}"}], ",", 
    StyleBox["\[Ellipsis]", "TR"]}], "}"}]], "InlineFormula"],
 ", where the number of coordinates ",
 Cell[BoxData[
  StyleBox["x", "TI"]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  StyleBox["y", "TI"]], "InlineFormula"],
 ", \[Ellipsis] is equal to the number of variables in the list ",
 Cell[BoxData[
  StyleBox["vars", "TI"]], "InlineFormula"],
 "."
}], "Notes",
 CellID->80243372],

Cell[TextData[{
 "The ",
 Cell[BoxData[
  StyleBox["data", "TI"]], "InlineFormula"],
 " can also be of the form ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    SubscriptBox[
     StyleBox["f", "TI"], 
     StyleBox["1", "TR"]], ",", 
    SubscriptBox[
     StyleBox["f", "TI"], 
     StyleBox["2", "TR"]], ",", 
    StyleBox["\[Ellipsis]", "TR"]}], "}"}]], "InlineFormula"],
 ", with a single coordinate assumed to take values ",
 Cell[BoxData["1"], "InlineFormula"],
 ", ",
 Cell[BoxData["2"], "InlineFormula"],
 ", \[Ellipsis]. "
}], "Notes",
 CellID->580071915],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["FindFit"]],"paclet:ref/FindFit"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " returns a list of replacements for ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["par", "TI"], 
   StyleBox["1", "TR"]]], "InlineFormula"],
 ", ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["par", "TI"], 
   StyleBox["2", "TR"]]], "InlineFormula"],
 ", \[Ellipsis]. "
}], "Notes",
 CellID->8382],

Cell[TextData[{
 "The expression ",
 Cell[BoxData[
  StyleBox["expr", "TI"]], "InlineFormula"],
 " must yield a numerical value when ",
 Cell[BoxData[
  StyleBox["pars", "TI"]], "InlineFormula"],
 " and ",
 Cell[BoxData[
  StyleBox["vars", "TI"]], "InlineFormula"],
 " are all numerical. "
}], "Notes",
 CellID->13616],

Cell[TextData[{
 "The expression ",
 Cell[BoxData[
  StyleBox["expr", "TI"]], "InlineFormula"],
 " can depend either linearly or nonlinearly on the ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["par", "TI"], 
   StyleBox["i", "TI"]]], "InlineFormula"],
 ". "
}], "Notes",
 CellID->28781],

Cell[TextData[{
 "In the linear case, ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["FindFit"]],"paclet:ref/FindFit"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " finds a globally optimal fit. "
}], "Notes",
 CellID->8808],

Cell["\<\
In the nonlinear case, it finds in general only a locally optimal fit. \
\>", "Notes",
 CellID->14609],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["FindFit"]],"paclet:ref/FindFit"},
    "RefLink",
    BaseStyle->"InlineFormula"], "[", 
   RowBox[{
    StyleBox["data", "TI"], ",", 
    StyleBox["expr", "TI"], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        SubscriptBox[
         StyleBox["par", "TI"], 
         StyleBox["1", "TR"]], ",", 
        SubscriptBox[
         StyleBox["p", "TI"], 
         StyleBox["1", "TR"]]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox[
         StyleBox["par", "TI"], 
         StyleBox["2", "TR"]], ",", 
        SubscriptBox[
         StyleBox["p", "TI"], 
         StyleBox["2", "TR"]]}], "}"}], ",", 
      StyleBox["\[Ellipsis]", "TR"]}], "}"}], ",", 
    StyleBox["vars", "TI"]}], "]"}]], "InlineFormula", "TemplateInclusion"],
 " starts the search for a fit with ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     SubscriptBox[
      StyleBox["par", "TI"], 
      StyleBox["1", "TR"]], "->", 
     SubscriptBox[
      StyleBox["p", "TI"], 
      StyleBox["1", "TR"]]}], ",", 
    RowBox[{
     SubscriptBox[
      StyleBox["par", "TI"], 
      StyleBox["2", "TR"]], "->", 
     SubscriptBox[
      StyleBox["p", "TI"], 
      StyleBox["2", "TR"]]}], ",", 
    StyleBox["\[Ellipsis]", "TR"]}], "}"}]], "InlineFormula"],
 ". "
}], "Notes",
 CellID->10299],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["FindFit"]],"paclet:ref/FindFit"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " by default finds a least\[Hyphen]squares fit. "
}], "Notes",
 CellID->22146],

Cell[TextData[{
 "The option ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["NormFunction"]],"paclet:ref/NormFunction"},
    "RefLink",
    BaseStyle->"InlineFormula"], "->", 
   StyleBox["f", "TI"]}]], "InlineFormula"],
 " specifies that the norm ",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "[", 
   StyleBox["residual", "TI"], "]"}]], "InlineFormula"],
 " should be minimized. "
}], "Notes",
 CellID->22732],

Cell[TextData[{
 "The constraints ",
 Cell[BoxData[
  StyleBox["cons", "TI"]], "InlineFormula"],
 " can contain equations, inequalities or logical combinations of these. "
}], "Notes",
 CellID->19298],

Cell["The following options can be given: ", "Notes",
 CellID->26940],

Cell[BoxData[GridBox[{
   {Cell["      ", "TableRowIcon"], 
    ButtonBox["AccuracyGoal",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/AccuracyGoal"], 
    ButtonBox["Automatic",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Automatic"], Cell[
    "the accuracy sought ", "TableText"]},
   {Cell["      ", "TableRowIcon"], 
    ButtonBox["EvaluationMonitor",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/EvaluationMonitor"], 
    ButtonBox["None",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/None"], Cell[TextData[{
     "expression to evaluate whenever ",
     Cell[BoxData[
      StyleBox["expr", "TI"]], "InlineFormula"],
     " is evaluated "
    }], "TableText"]},
   {Cell["      ", "TableRowIcon"], 
    ButtonBox["Gradient",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Gradient"], 
    ButtonBox["Automatic",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Automatic"], Cell[TextData[{
     "the list of gradient components for ",
     Cell[BoxData[
      StyleBox["expr", "TI"]], "InlineFormula"]
    }], "TableText"]},
   {Cell["      ", "TableRowIcon"], 
    ButtonBox["MaxIterations",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/MaxIterations"], 
    ButtonBox["Automatic",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Automatic"], Cell[
    "maximum number of iterations to use ", "TableText"]},
   {Cell["      ", "TableRowIcon"], 
    ButtonBox["Method",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Method"], 
    ButtonBox["Automatic",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Automatic"], Cell["method to use ", "TableText"]},
   {Cell["      ", "TableRowIcon"], 
    ButtonBox["NormFunction",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/NormFunction"], 
    ButtonBox["Norm",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Norm"], Cell[
    "the norm to minimize ", "TableText"]},
   {Cell["      ", "TableRowIcon"], 
    ButtonBox["PrecisionGoal",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/PrecisionGoal"], 
    ButtonBox["Automatic",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Automatic"], Cell[
    "the precision sought ", "TableText"]},
   {Cell["      ", "TableRowIcon"], 
    ButtonBox["StepMonitor",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/StepMonitor"], 
    ButtonBox["None",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/None"], Cell[
    "expression to evaluate whenever a step is taken ", "TableText"]},
   {Cell["      ", "TableRowIcon"], 
    ButtonBox["WorkingPrecision",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/WorkingPrecision"], 
    ButtonBox["Automatic",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Automatic"], Cell[
    "the precision used in internal computations ", "TableText"]}
  },
  GridBoxAlignment->{
   "Columns" -> {Left, Left, {Left}}, "ColumnsIndexed" -> {}, 
    "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}]], "3ColumnTableMod",
 GridBoxOptions->{
 GridBoxBackground->{
  "Columns" -> {{None}}, "ColumnsIndexed" -> {}, 
   "Rows" -> {None, None, None, None, None, None, None, None, {None}}, 
   "RowsIndexed" -> {}},
 GridBoxDividers->{
  "Rows" -> {{True, True, True, True, True, True, True, True, True, True}}}},
 CellID->30188],

Cell[TextData[{
 "The default settings for ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["AccuracyGoal"]],"paclet:ref/AccuracyGoal"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " and ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["PrecisionGoal"]],"paclet:ref/PrecisionGoal"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " are ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["WorkingPrecision"]],"paclet:ref/WorkingPrecision"},
    "RefLink",
    BaseStyle->"InlineFormula"], "/", "2"}]], "InlineFormula"],
 ". "
}], "Notes",
 CellID->18960],

Cell[TextData[{
 "The settings for ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["AccuracyGoal"]],"paclet:ref/AccuracyGoal"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " and ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["PrecisionGoal"]],"paclet:ref/PrecisionGoal"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " specify the number of digits to seek in both the values of the parameters \
returned, and the value of the ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["NormFunction"]],"paclet:ref/NormFunction"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ". "
}], "Notes",
 CellID->637],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["FindFit"]],"paclet:ref/FindFit"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " continues until either of the goals specified by ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["AccuracyGoal"]],"paclet:ref/AccuracyGoal"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " or ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["PrecisionGoal"]],"paclet:ref/PrecisionGoal"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " is achieved. "
}], "Notes",
 CellID->4185],

Cell[TextData[{
 "Possible settings for ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Method"]],"paclet:ref/Method"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " include ",
 Cell[BoxData["\"\<ConjugateGradient\>\""], "InlineFormula"],
 ", ",
 Cell[BoxData["\"\<Gradient\>\""], "InlineFormula"],
 ", ",
 Cell[BoxData["\"\<LevenbergMarquardt\>\""], "InlineFormula"],
 ", ",
 Cell[BoxData["\"\<Newton\>\""], "InlineFormula"],
 ", ",
 Cell[BoxData["\"\<NMinimize\>\""], "InlineFormula"],
 ", and ",
 Cell[BoxData["\"\<QuasiNewton\>\""], "InlineFormula"],
 ", with the default being ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Automatic"]],"paclet:ref/Automatic"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ". "
}], "Notes",
 CellID->24902],

Cell["", "SectionFooterSpacer"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  InterpretationBox[
   StyleBox[
    GraphicsBox[{},
     BaselinePosition->Baseline,
     ImageSize->{6, 0}],
    CacheGraphics->False],
   Spacer[6]]]],
 "Examples",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(27)", "ExampleCount"]
}], "PrimaryExamplesSection",
 WholeCellGroupOpener->True,
 CellTags->"PrimaryExamplesSection",
 CellID->101786175],

Cell[CellGroupData[{

Cell[TextData[{
 "Basic Examples",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->231362347],

Cell["Find a nonlinear fit to a list of primes:", "ExampleText",
 CellID->6495732],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Prime", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "20"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->425550223],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "3", ",", "5", ",", "7", ",", "11", ",", "13", ",", "17", ",", 
   "19", ",", "23", ",", "29", ",", "31", ",", "37", ",", "41", ",", "43", 
   ",", "47", ",", "53", ",", "59", ",", "61", ",", "67", ",", "71"}], 
  "}"}]], "Output",
 ImageSize->{479, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[1]=",
 CellID->673387210]
}, Open  ]],

Cell[TextData[{
 "Fit the best-fit parameters ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]], "InlineMath"],
 ", and ",
 Cell[BoxData[
  FormBox["c", TraditionalForm]], "InlineMath"],
 ":"
}], "ExampleText",
 CellID->32517813],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindFit", "[", 
  RowBox[{"%", ",", 
   RowBox[{"a", " ", "x", " ", 
    RowBox[{"Log", "[", 
     RowBox[{"b", "+", 
      RowBox[{"c", " ", "x"}]}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", "x"}], "]"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->9895969],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1.4207557242233555`"}], ",", 
   RowBox[{"b", "\[Rule]", "1.655581377626135`"}], ",", 
   RowBox[{"c", "\[Rule]", "0.5346453120672511`"}]}], "}"}]], "Output",
 ImageSize->{266, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->179251908]
}, Open  ]],

Cell["Evaluate the fitted function:", "ExampleText",
 CellID->169120],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"a", " ", "x", " ", 
     RowBox[{"Log", "[", 
      RowBox[{"b", "+", 
       RowBox[{"c", " ", "x"}]}], "]"}]}], "/.", "%"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->613462901],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.1138796622480749`", ",", "2.8483920410655297`", ",", 
   "5.036205900088848`", ",", "7.578104935694751`", ",", 
   "10.409111411867393`", ",", "13.483671381984252`", ",", 
   "16.768224232631617`", ",", "20.237094693206025`", ",", 
   "23.87004944943169`", ",", "27.65075855256118`"}], "}"}]], "Output",
 ImageSize->{354, 33},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->104697178]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Scope",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(7)", "ExampleCount"]
}], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->456238338],

Cell[CellGroupData[{

Cell[TextData[{
 "Simple Exponential Fitting",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(3)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->11860700],

Cell["Fit data to a model of exponential decay:", "ExampleText",
 CellID->261070299],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1.0", ",", "12."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.9", ",", "10."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.6", ",", "8.2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.4", ",", "6.9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5.0", ",", "5.9"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->613023938],

Cell[BoxData[
 RowBox[{
  RowBox[{"model", "=", 
   RowBox[{"a", " ", 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "k"}], " ", "t"}], "]"}]}]}], ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->211120279],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fit", "=", 
  RowBox[{"FindFit", "[", 
   RowBox[{"data", ",", "model", ",", 
    RowBox[{"{", 
     RowBox[{"a", ",", "k"}], "}"}], ",", "t"}], "]"}]}]], "Input",
 CellLabel->"In[3]:=",
 CellID->932959552],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "14.388856945488829`"}], ",", 
   RowBox[{"k", "\[Rule]", "0.1982081866879296`"}]}], "}"}]], "Output",
 ImageSize->{182, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->1864177522]
}, Open  ]],

Cell["The resulting model function:", "ExampleText",
 CellID->71387768],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"modelf", "=", 
  RowBox[{"Function", "[", 
   RowBox[{
    RowBox[{"{", "t", "}"}], ",", 
    RowBox[{"Evaluate", "[", 
     RowBox[{"model", "/.", "fit"}], "]"}]}], "]"}]}]], "Input",
 CellLabel->"In[4]:=",
 CellID->16189946],

Cell[BoxData[
 RowBox[{"Function", "[", 
  RowBox[{
   RowBox[{"{", "t", "}"}], ",", 
   RowBox[{"14.388856945488829`", " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "0.1982081866879296`"}], " ", "t"}]]}]}], "]"}]], "Output",
 ImageSize->{218, 18},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->47743729]
}, Open  ]],

Cell["Show the data with the model:", "ExampleText",
 CellID->629282411],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"modelf", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "6"}], "}"}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"Map", "[", 
     RowBox[{"Point", ",", "data"}], "]"}]}]}], "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->83329518],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwVkWs01HkAhickTZGfYf6mIfdxm9N2pRz8X9Se2OSyDUlLCTVOIRKmktLQ
lHGZslvESEuS6gxqKVTiJOlit1Zt0W1WuqBZoQxr7Yf3POc5z8fXIiIuMEqD
wWD4Tu9/fv0httg/Lt194mdnJ+M7fIRoH2I95IXRLIPwhO2tfJTm0UFSXizN
Lbw+WH+Lj9uCkuQdvDRa0q0+t7GRD0G9r84mXg6tJVBxzyj4KBGWP/qRV0Kz
Tu3WcjnNh6dnV50f7xI9kca9VLSLjxML31X48prpgd+uUqamfDDDBlX9MQ/p
wTk2rl5CR2SZRCddCeqmO++ebt/a5gDNNp/28q5emr99ZUKCnQNYbWzLhOS3
dEJG0i6vQ/a4+qk06Bbe0cmXazKVH+xQbVkldw79SOs/Ej154GMHM6fB4+KI
IVo3p3KpVGGLgKyoGx4yFZ2S/FbE4NmiScSiHxcN0wcq7deuk/GgeKR7rfnQ
CJ2yShF7Yw4PkQXlTKPNY/SQatP4q6M2wOt9f/8b9Y2eO1OveouGDcpzS6/D
W03HuLCZJNMay9o0TdiCSVodcis3R8MaB4VagcHBU/TCstwj5w5bwbG+0iOl
iAGTBoZS22Dap2LlOfIZcAs5y64+aYm45Ofj/jINSM7nepo7WGJN7TbuT6c0
4aM4UOl6xQLpFS08eZEWtNtetAhWW2Ci4/Z30uyZ8N7o8yb2pTl0a5WTrfna
YN1pdChMNEdE54W7leJZoCTeeqHEHOxij/SW3TqgaslYZrQZwhePqW1SZiN4
XWyKm3wBBkYDk5bHMBGe+n1lw3tTzEt/UJsTPwc7SwbDm+xNkX/TuMc0YS7o
Mj9H1S4TBC+ZrRUSoYtC1qjLLx1c1GzjfO6J1sP+7LWrEjlcBDx4+Exv4zw8
rY82YKXMh90eh24Xa32c8NLfJu7hQNU3YXW8XB9uL737O1dysCm+LM5jAUF8
XenHml+NIXveXWx4hiCrsCpkWNsYMeGvOty4BrBdfzjeKZmCyt1/YMZxA7Rr
dzRLB9jwYvj/88GQBZelgvOdoWw4/2U5ap/Dwt3tnDSdbiOMFIhfSIkhnL+4
LirzMcLWi3712TJD7OyXW61sNURizyfZa6YRWCOpeY+9DeE7xPEPlRrhWnzz
Ct92Fjo48+c6zmLD70tksU8gC6Pyg00FaWwgSr159WsDDMxKDbBhULBIzCjM
Fxog84iXkplK4SuXpzo2QXC7KL+et5eCOHJNf9U4AePyy2zP/RTKcy6Qjq8E
qU/2LhcdpOB+xEytM0Kww7Iu872EwoWljnaSAYKARmv79kIKGetc+2S9BCaf
Z8aKGyns3NBw/95Ngg2a6z3PNFPQSfhTQ9VMUMAuYzfdpHB0n1TIbiLQc3O/
8aWVQllV3b0tDQQzju7Rj7xPoTcp6M24gqDP6l2NZy+FCuWW9U5nCaycl2eF
vaLwh1BRGjb9w2afjFDRGwoTzmsWZMkJnsWbadX0UXAwdr74tIigsylYYDFE
YYVSwkk7QaDTVW7vpqLw7HzG0DkZwWrl8OSGYQrLThaNduURNDPzKvLGKCwS
kpM8KYHatFdU/Y3CYmbUkoBjBCsW8/3a1RQu+bdM7pUQ7F4lslJOTndT6/GK
LAJFcPvY1BSFNn+x7e9igv8A4OsMxQ==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 4.},
  DisplayFunction->Identity,
  Epilog->{
    PointBox[{1., 12.}], 
    PointBox[{1.9, 10.}], 
    PointBox[{2.6, 8.2}], 
    PointBox[{3.4, 6.9}], 
    PointBox[{5., 5.9}]},
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{0, 6}, {4.380684487831052, 14.388856596265661`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 ImageSize->{244, 156},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[5]=",
 CellID->1835089251]
}, Open  ]],

Cell["Separate the time from the response:", "ExampleText",
 CellID->368492844],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"tl", ",", "yl"}], "}"}], "=", 
   RowBox[{"Transpose", "[", "data", "]"}]}], ";"}]], "Input",
 CellLabel->"In[6]:=",
 CellID->301688966],

Cell["\<\
Looking at residuals gives a good indication whether the model is a good fit:\
\>", "ExampleText",
 CellID->112903641],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"residuals", "=", 
  RowBox[{"yl", "-", 
   RowBox[{"Map", "[", 
    RowBox[{"modelf", ",", "tl"}], "]"}]}]}]], "Input",
 CellLabel->"In[7]:=",
 CellID->829000504],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.19827275908539654`", ",", "0.1264592364406809`", ",", 
   RowBox[{"-", "0.3944169313066155`"}], ",", 
   RowBox[{"-", "0.4341846681044732`"}], ",", "0.5589986700962282`"}], 
  "}"}]], "Output",
 ImageSize->{358, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[7]=",
 CellID->579721314]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"residuals", ",", 
   RowBox[{"Filling", "\[Rule]", "Axis"}], ",", 
   RowBox[{"DataRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Min", "[", "tl", "]"}], ",", 
      RowBox[{"Max", "[", "tl", "]"}]}], "}"}]}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "6"}], "}"}], ",", "All"}], "}"}]}]}], 
  "]"}]], "Input",
 CellLabel->"In[8]:=",
 CellID->619343705],

Cell[BoxData[
 GraphicsBox[{{}, 
   GraphicsComplexBox[{{1., 0.19827275908539654`}, {2., 0.1264592364406809}, {
    3., -0.3944169313066155}, {4., -0.4341846681044732}, {5., 
    0.5589986700962282}, {1., 0.}, {2., 0.}, {3., 0.}, {4., 0.}, {5., 0.}, {
    1., 0.19827275908539654`}, {2., 0.1264592364406809}, {
    3., -0.3944169313066155}, {4., -0.4341846681044732}, {5., 
    0.5589986700962282}}, {{{}, {}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.3], LineBox[{8, 3}], 
       LineBox[{9, 4}]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.3], LineBox[{6, 1}], 
       LineBox[{7, 2}], LineBox[{10, 5}]}}, {{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.019444444444444445`], AbsoluteThickness[1.6], 
       PointBox[{11, 12, 13, 14, 15}]}, {}}}], {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{0, 6}, {-0.4341846681044732, 0.5589986700962282}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 ImageSize->{244, 137},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[8]=",
 CellID->809516547]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell["\t", "ExampleDelimiter"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->74394520],

Cell["\<\
Use a linear fit on the logarithm of the data for a model of exponential \
decay:\
\>", "ExampleText",
 CellID->485657525],

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1.0", ",", "12."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.9", ",", "10."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.6", ",", "8.2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.4", ",", "6.9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5.0", ",", "5.9"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"logdata", "=", 
   RowBox[{"Apply", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"t", ",", "v"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", 
         RowBox[{"Log", "[", "v", "]"}]}], "}"}]}], "]"}], ",", "data", ",", 
     RowBox[{"{", "1", "}"}]}], "]"}]}], ";"}]}], "Input",
 CellLabel->"In[1]:=",
 CellID->109105924],

Cell["\<\
The logarithm of the exponential model is a linear model for the logarithm of \
the data:\
\>", "ExampleText",
 CellID->160429556],

Cell[BoxData[
 RowBox[{
  RowBox[{"logmodel", "=", 
   RowBox[{"la", "-", 
    RowBox[{"k", " ", "t"}]}]}], ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->648832529],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lfit", "=", 
  RowBox[{"FindFit", "[", 
   RowBox[{"logdata", ",", "logmodel", ",", 
    RowBox[{"{", 
     RowBox[{"la", ",", "k"}], "}"}], ",", "t"}], "]"}]}]], "Input",
 CellLabel->"In[3]:=",
 CellID->164817600],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"la", "\[Rule]", "2.6255198817608227`"}], ",", 
   RowBox[{"k", "\[Rule]", "0.18197839922568146`"}]}], "}"}]], "Output",
 ImageSize->{189, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->1811246098]
}, Open  ]],

Cell["\<\
The exponential model formed by exponentiating the model for the logarithm:\
\>", "ExampleText",
 CellID->189393166],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Exp", "[", 
   RowBox[{"logmodel", "/.", "lfit"}], "]"}], "/.", 
  RowBox[{
   RowBox[{"Exp", "[", 
    RowBox[{"a_", "+", 
     RowBox[{"b_", " ", "t"}]}], "]"}], "\[RuleDelayed]", 
   RowBox[{
    RowBox[{"Exp", "[", "a", "]"}], 
    RowBox[{"Exp", "[", 
     RowBox[{"b", " ", "t"}], "]"}]}]}]}]], "Input",
 CellLabel->"In[4]:=",
 CellID->70031323],

Cell[BoxData[
 RowBox[{"13.811752798255444`", " ", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{
    RowBox[{"-", "0.18197839922568146`"}], " ", "t"}]]}]], "Output",
 ImageSize->{116, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->368179779]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell["\t", "ExampleDelimiter"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->270889856],

Cell["Exponential fit as parameters in a differential equation:", \
"ExampleText",
 CellID->703708898],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1.0", ",", "12."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.9", ",", "10."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.6", ",", "8.2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.4", ",", "6.9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5.0", ",", "5.9"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->93684799],

Cell["\<\
The model function is the solution of a differential equation:\
\>", "ExampleText",
 CellID->1703653],

Cell[BoxData[
 RowBox[{
  RowBox[{"demodel", "[", 
   RowBox[{
    RowBox[{"a_", "?", "NumberQ"}], ",", 
    RowBox[{"k_", "?", "NumberQ"}]}], "]"}], ":=", 
  RowBox[{"First", "[", 
   RowBox[{"x", "/.", 
    RowBox[{"NDSolve", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"x", "'"}], "[", "t", "]"}], "+", 
          RowBox[{"k", " ", 
           RowBox[{"x", "[", "t", "]"}]}]}], "\[Equal]", "0"}], ",", 
        RowBox[{
         RowBox[{"x", "[", "0", "]"}], "\[Equal]", "a"}]}], "}"}], ",", "x", 
      ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", "6"}], "}"}]}], "]"}]}], "]"}]}]], "Input",
 CellLabel->"In[2]:=",
 CellID->507606713],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Timing", "[", 
   RowBox[{"FindFit", "[", 
    RowBox[{"data", ",", 
     RowBox[{
      RowBox[{"demodel", "[", 
       RowBox[{"a", ",", "k"}], "]"}], "[", "t", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "k"}], "}"}], ",", "t"}], "]"}], "]"}], "//", 
  "Quiet"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->63559203],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.45146700000000000718713977221341338009`5.675225924315242", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "\[Rule]", "14.388862878515411`"}], ",", 
     RowBox[{"k", "\[Rule]", "0.1982083972747028`"}]}], "}"}]}], 
  "}"}]], "Output",
 ImageSize->{263, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->195080153]
}, Open  ]],

Cell["Using caching is faster: ", "ExampleText",
 CellID->174378436],

Cell[BoxData[
 RowBox[{
  RowBox[{"demodel", "[", 
   RowBox[{
    RowBox[{"a_", "?", "NumberQ"}], ",", 
    RowBox[{"k_", "?", "NumberQ"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"demodel", "[", 
    RowBox[{"a", ",", "k"}], "]"}], "=", 
   RowBox[{"First", "[", 
    RowBox[{"x", "/.", 
     RowBox[{"NDSolve", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"x", "'"}], "[", "t", "]"}], "+", 
           RowBox[{"k", " ", 
            RowBox[{"x", "[", "t", "]"}]}]}], "\[Equal]", "0"}], ",", 
         RowBox[{
          RowBox[{"x", "[", "0", "]"}], "\[Equal]", "a"}]}], "}"}], ",", "x", 
       ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "0", ",", "6"}], "}"}]}], "]"}]}], 
    "]"}]}]}]], "Input",
 CellLabel->"In[4]:=",
 CellID->245175184],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Timing", "[", 
   RowBox[{"FindFit", "[", 
    RowBox[{"data", ",", 
     RowBox[{
      RowBox[{"demodel", "[", 
       RowBox[{"a", ",", "k"}], "]"}], "[", "t", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "k"}], "}"}], ",", "t"}], "]"}], "]"}], "//", 
  "Quiet"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->339205902],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.07835999999999999909849890400437288918`4.914694340602323", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "\[Rule]", "14.388862878515411`"}], ",", 
     RowBox[{"k", "\[Rule]", "0.1982083972747028`"}]}], "}"}]}], 
  "}"}]], "Output",
 ImageSize->{263, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[5]=",
 CellID->2048780362]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Constraints and Starting Values",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(2)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->30298558],

Cell["Find a constrained fit:", "ExampleText",
 CellID->197867878],

Cell[BoxData[
 RowBox[{
  RowBox[{"model", "=", 
   RowBox[{"a", "  ", 
    RowBox[{"Cos", "[", 
     RowBox[{"\[Omega]", " ", "t"}], "]"}]}]}], ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->15080643],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"t", ",", 
        RowBox[{"Cos", "[", 
         RowBox[{"2.1", " ", "t"}], "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", "10", ",", ".25"}], "}"}]}], "]"}], "+", 
    RowBox[{"RandomReal", "[", 
     RowBox[{".1", ",", "41"}], "]"}]}]}], ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->218875459],

Cell["\<\
Fit to the model with positive amplitude and frequency between 1 and 2:\
\>", "ExampleText",
 CellID->161917982],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fit", "=", 
  RowBox[{"FindFit", "[", 
   RowBox[{"data", ",", 
    RowBox[{"{", 
     RowBox[{"model", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"a", ">", "0"}], ",", 
        RowBox[{"1", "<", "\[Omega]", "<", "2"}]}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"a", ",", "\[Omega]"}], "}"}], ",", "t"}], "]"}]}]], "Input",
 CellLabel->"In[3]:=",
 CellID->74490737],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "0.8645650846287524`"}], ",", 
   RowBox[{"\[Omega]", "\[Rule]", "1.999999999534125`"}]}], "}"}]], "Output",
 ImageSize->{147, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->319752346]
}, Open  ]],

Cell["Compare the fitted model to the data:", "ExampleText",
 CellID->47073673],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"model", "/.", "fit"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "10"}], "}"}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"data", ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->139019433],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
ABGUjgcfWEOxgAUs4MHE/wE8yDE+
    "], {{0, 136}, {240, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{240, 136},
  PlotRange->{{0, 240}, {0, 136}}]], "Output",
 ImageSize->{244, 136},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellTags->"RasterizedOutput",
 CellLabel->"Out[4]=",
 CellID->206398272]
}, Open  ]],

Cell["\<\
The residuals show a pattern, indicating that the frequency constraint is too \
strict:\
\>", "ExampleText",
 CellID->50181010],

Cell[BoxData[
 RowBox[{
  RowBox[{"residuals", "=", 
   RowBox[{"Apply", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"t", ",", "y"}], "}"}], ",", 
       RowBox[{"Evaluate", "[", 
        RowBox[{"{", 
         RowBox[{"t", ",", 
          RowBox[{
           RowBox[{"y", "-", "model"}], "/.", "fit"}]}], "}"}], "]"}]}], 
      "]"}], ",", "data", ",", "1"}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->696071961],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"residuals", ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellLabel->"In[6]:=",
 CellID->158684639],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.019444444444444445`], 
    AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwBoQJe/SFib1JlAgAAACkAAAACAAAAtJH/SYk9sj8U0VAU3ZPLP2YO+fev
OtE/hJEEFUs2wj+l7jHs2UnhP3rtyIBLvMA/QDWJkDu86T+FGVgToCO1P2Uf
STjTm/A/yJWgdNK6qL/P7YCmH670PwBkMCCLybe/VJvHnsgS+T8Yq1tekX6x
v10QHkOGw/w/ENG8Z6aXor95AFwKaJYAQPB+PNaYyKc/LZY5Vu9+AkCaJ4Hf
H1LDP0grxRa7twRA7IMrSFc0yz9TdE3Ol1UGQGDueOSZQNA/ZmNNyPJcCEDg
Bzh/TCvJPxgg9vryWQpAGI2/2flwsz/G0S/fAlQMQJh4+ykyQbS/wWWgOKi5
DkCAPsDJnjO0v2hJzUqhRxBAQcCXA6ZNyr9UyQSvDQERQHxlup5ttNa/EdiF
vJMFEkDwnVTBFfHJv+VYx7vMJRNAMOxtH1c3pD92ozJAcywUQGic+BIW+c8/
AKcPuHgkFUBjx1alnfHaPzeHt3arKhZAtgu5gI6C3z8o3ay6nhwXQFvYxpZR
z9w/wijD/ZoqGED86W9d0qDRP3PU8CzvAhlAgFAba6HWiL8dLhmuwVAaQBh5
EAN928W/ug0GBNAlG0DEkbqgtprdv03QqCQAIxxATn5ptA7i4b9J6VVKIQQd
QHoLauXkLuK/xVePzHFlHkCwmBeSjp3Cv6OwToyuKx9AUDsN6Y9NrT8ZM9BZ
pysgQHyWJBykfdk/KRUk04WsIEAaIiVyYf7jP3TfPVO9EiFAdkHXR7Ae6D8B
3wYhz6IhQApezcgv9+Q/c1WBdoAQIkAYZvMP/9faP30wVdxpgCJAADwGzROm
mz+/4VPcYAkjQN/pNfqJMNi/ksguqxueI0D/aX9K7MPjv7ssK4HgByRADYk5
suyK679QazNX
     "]]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{0, 10.015384708900788`}, {-0.8607085686637973, 
    0.7537461665288407}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 ImageSize->{244, 136},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[6]=",
 CellID->1545491091]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell["\t", "ExampleDelimiter"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->568401064],

Cell["\<\
Give starting values for some parameters to get a better fit:\
\>", "ExampleText",
 CellID->339171382],

Cell[BoxData[
 RowBox[{
  RowBox[{"model", "=", 
   RowBox[{
    RowBox[{"a", " ", 
     RowBox[{"Exp", "[", 
      RowBox[{
       RowBox[{"-", "b"}], " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"x", "-", "c"}], ")"}], "^", "2"}]}], "]"}]}], "+", 
    RowBox[{"d", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{
       RowBox[{"\[Omega]", " ", "x"}], "+", "\[Phi]"}], "]"}]}]}]}], 
  ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->68570158],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"model", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"a", "\[Rule]", "2"}], ",", 
           RowBox[{"b", "\[Rule]", "1"}], ",", 
           RowBox[{"c", "\[Rule]", "0"}], ",", 
           RowBox[{"d", "\[Rule]", "2"}], ",", 
           RowBox[{"\[Omega]", "\[Rule]", "0.67"}], ",", 
           RowBox[{"\[Phi]", "\[Rule]", "0.1"}]}], "}"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "5"}], ",", "5", ",", ".1"}], "}"}]}], "]"}], "+", 
    RowBox[{"RandomReal", "[", 
     RowBox[{".25", ",", "101"}], "]"}]}]}], ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->504300830],

Cell["Search with all parameters starting at 1:", "ExampleText",
 CellID->152303581],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f1", "=", 
  RowBox[{"FindFit", "[", 
   RowBox[{"data", ",", "model", ",", 
    RowBox[{"{", 
     RowBox[{
     "a", ",", "b", ",", "c", ",", "d", ",", "\[Omega]", ",", "\[Phi]"}], 
     "}"}], ",", "x"}], "]"}]}]], "Input",
 CellLabel->"In[3]:=",
 CellID->628502664],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "3.1592459541857085`"}], ",", 
   RowBox[{"b", "\[Rule]", "0.39114137651952513`"}], ",", 
   RowBox[{"c", "\[Rule]", "3.606459350018085`"}], ",", 
   RowBox[{"d", "\[Rule]", "2.1487749873613526`"}], ",", 
   RowBox[{"\[Omega]", "\[Rule]", "0.9016587760621511`"}], ",", 
   RowBox[{"\[Phi]", "\[Rule]", "0.8449369801016074`"}]}], "}"}]], "Output",
 ImageSize->{532, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->135259642]
}, Open  ]],

Cell[TextData[{
 "Search with a better starting value for the parameter ",
 Cell[BoxData[
  StyleBox["c", "TI"]], "InlineFormula"],
 ":"
}], "ExampleText",
 CellID->72785105],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f2", "=", 
  RowBox[{"FindFit", "[", 
   RowBox[{"data", ",", "model", ",", 
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", 
      RowBox[{"{", 
       RowBox[{"c", ",", "0"}], "}"}], ",", "d", ",", "\[Omega]", ",", 
      "\[Phi]"}], "}"}], ",", "x"}], "]"}]}]], "Input",
 CellLabel->"In[4]:=",
 CellID->109648129],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "2.221675991069093`"}], ",", 
   RowBox[{"b", "\[Rule]", "0.7536302354701351`"}], ",", 
   RowBox[{"c", "\[Rule]", "0.10222498632823065`"}], ",", 
   RowBox[{"d", "\[Rule]", "1.9915234469227172`"}], ",", 
   RowBox[{"\[Omega]", "\[Rule]", "0.6751783759119999`"}], ",", 
   RowBox[{"\[Phi]", "\[Rule]", 
    RowBox[{"-", "0.05088853892195957`"}]}]}], "}"}]], "Output",
 ImageSize->{547, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->90657600]
}, Open  ]],

Cell["Compare the quality of the two fits:", "ExampleText",
 CellID->171800968],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"model", "/.", 
       RowBox[{"{", 
        RowBox[{"f1", ",", "f2"}], "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Red", ",", "Green"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"data", ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->61710716],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
IA==
    "], {{0, 149}, {240, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{240, 149},
  PlotRange->{{0, 240}, {0, 149}}]], "Output",
 ImageSize->{244, 149},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellTags->"RasterizedOutput",
 CellLabel->"Out[5]=",
 CellID->439160670]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Multivariate Data",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(2)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->127486635],

Cell["Fit a surface to data in two-dimensions:", "ExampleText",
 CellID->3453890],

Cell[BoxData[
 RowBox[{
  RowBox[{"model", "=", 
   RowBox[{"a", " ", 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "b"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", "-", "x0"}], ")"}], "^", "2"}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"y", "-", "y0"}], ")"}], "^", "2"}]}], ")"}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->53072381],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"MapThread", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"#1", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", 
        RowBox[{"#1", "[", 
         RowBox[{"[", "2", "]"}], "]"}], ",", 
        RowBox[{
         RowBox[{"1.2", " ", 
          RowBox[{"Exp", "[", 
           RowBox[{
            RowBox[{"-", "34"}], 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"#1", "-", ".56"}], ")"}], ".", 
              RowBox[{"(", 
               RowBox[{"#1", "-", ".56"}], ")"}]}], ")"}]}], "]"}]}], "+", 
         "#2"}]}], "}"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RandomReal", "[", 
        RowBox[{"1", ",", 
         RowBox[{"{", 
          RowBox[{"100", ",", "2"}], "}"}]}], "]"}], ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", ".1"}], ",", ".1"}], "}"}], ",", "100"}], "]"}]}], 
      "}"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->292962567],

Cell["\<\
Find the fit starting from an approximate position for the peak:\
\>", "ExampleText",
 CellID->103597510],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fit", "=", 
  RowBox[{"FindFit", "[", 
   RowBox[{"data", ",", "model", ",", 
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", 
      RowBox[{"{", 
       RowBox[{"x0", ",", ".5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"y0", ",", ".6"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}]}], "]"}]}]], "Input",
 CellLabel->"In[3]:=",
 CellID->84847018],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1.1744885191623817`"}], ",", 
   RowBox[{"b", "\[Rule]", "34.79947809434892`"}], ",", 
   RowBox[{"x0", "\[Rule]", "0.5650092443736606`"}], ",", 
   RowBox[{"y0", "\[Rule]", "0.560990924406709`"}]}], "}"}]], "Output",
 ImageSize->{371, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->434186907]
}, Open  ]],

Cell["Show the fitted surface with the data:", "ExampleText",
 CellID->670475389],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"Plot3D", "[", 
    RowBox[{
     RowBox[{"model", "/.", "fit"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
   RowBox[{"ListPointPlot3D", "[", 
    RowBox[{"data", ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"Directive", "[", 
       RowBox[{
        RowBox[{"PointSize", "[", "Medium", "]"}], ",", "Red"}], "]"}]}]}], 
    "]"}]}], "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->391796545],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
    "], {{0, 188}, {240, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{240, 188},
  PlotRange->{{0, 240}, {0, 188}}]], "Output",
 ImageSize->{244, 188},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellTags->"RasterizedOutput",
 CellLabel->"Out[4]=",
 CellID->97305525]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell["\t", "ExampleDelimiter"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->435170072],

Cell["Fit a model to data in four dimensions:", "ExampleText",
 CellID->129853208],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"model", "[", 
    RowBox[{"x1_", ",", "x2_", ",", "x3_", ",", "x4_"}], "]"}], ":=", 
   RowBox[{"a0", " ", 
    RowBox[{"Cos", "[", 
     RowBox[{
      RowBox[{"a1", " ", 
       RowBox[{"x1", "^", "2"}]}], "+", 
      RowBox[{"a2", " ", 
       RowBox[{"x2", "^", "2"}]}], "+", 
      RowBox[{"a3", " ", 
       RowBox[{"x3", "^", "3"}]}], "+", 
      RowBox[{"a4", " ", 
       RowBox[{"x4", "^", "4"}]}]}], "]"}]}]}], ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->329142581],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"N", "[", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{
       RowBox[{"-", "5"}], ",", "5"}], "]"}], "/", "5"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"a0", "=", "1"}], ",", 
       RowBox[{"a1", "=", "1"}], ",", 
       RowBox[{"a2", "=", "2"}], ",", 
       RowBox[{"a3", "=", "3"}], ",", 
       RowBox[{"a4", "=", "4"}]}], "}"}], ",", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"Outer", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"##", ",", 
            RowBox[{"model", "[", "##", "]"}]}], "}"}], "&"}], ",", "g", ",", 
         "g", ",", "g", ",", "g"}], "]"}], ",", "3"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"data", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"-", "1"}]}], "]"}], "]"}], "+=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.1"}], ",", "0.1"}], "}"}], ",", 
     RowBox[{"Length", "[", "data", "]"}]}], "]"}]}], ";"}]}], "Input",
 CellLabel->"In[2]:=",
 CellID->262167145],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fit", "=", 
  RowBox[{"FindFit", "[", 
   RowBox[{"data", ",", 
    RowBox[{"model", "[", 
     RowBox[{"x1", ",", "x2", ",", "x3", ",", "x4"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"a0", ",", "a1", ",", "a2", ",", "a3", ",", "a4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x1", ",", "x2", ",", "x3", ",", "x4"}], "}"}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[3]:=",
 CellID->531529081],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a0", "\[Rule]", "1.000839861797796`"}], ",", 
   RowBox[{"a1", "\[Rule]", "0.9997707696094775`"}], ",", 
   RowBox[{"a2", "\[Rule]", "2.000671387779046`"}], ",", 
   RowBox[{"a3", "\[Rule]", "3.0008755948130847`"}], ",", 
   RowBox[{"a4", "\[Rule]", "3.9998655751493533`"}]}], "}"}]], "Output",
 ImageSize->{469, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->1820243664]
}, Open  ]],

Cell["\<\
The residual is comparable in size to the randomness added to the data:\
\>", "ExampleText",
 CellID->166969836],

Cell[BoxData[
 RowBox[{
  RowBox[{"residual", "=", 
   RowBox[{"Apply", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x1", ",", "x2", ",", "x3", ",", "x4", ",", "r"}], "}"}], ",", 
       RowBox[{"Evaluate", "[", 
        RowBox[{"r", "-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"model", "[", 
            RowBox[{"x1", ",", "x2", ",", "x3", ",", "x4"}], "]"}], "/.", 
           "fit"}], ")"}]}], "]"}]}], "]"}], ",", "data", ",", 
     RowBox[{"{", "1", "}"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->926626446],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Norm", "[", 
  RowBox[{"residual", ",", "Infinity"}], "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->134455144],

Cell[BoxData["0.10106467506041772`"], "Output",
 ImageSize->{60, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[5]=",
 CellID->346693267]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Options",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(7)", "ExampleCount"]
}], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->223291971],

Cell[CellGroupData[{

Cell[TextData[{
 "EvaluationMonitor",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->78762153],

Cell["\<\
Count evaluations of the model with numerical values of the parameters:\
\>", "ExampleText",
 CellID->245920735],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4.00", ",", "126."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5.00", ",", "125."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7.00", ",", "123."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"12.0", ",", "120."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"14.0", ",", "119."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"16.0", ",", "118."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"20.0", ",", "116."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"24.0", ",", "115."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"28.0", ",", "114."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"31.0", ",", "113."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"34.0", ",", "112."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"37.5", ",", "111."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"41.0", ",", "110."}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->39132109],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"count", "=", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"FindFit", "[", 
      RowBox[{"data", ",", 
       RowBox[{"60", "+", 
        RowBox[{"70", " ", 
         RowBox[{"Exp", "[", 
          RowBox[{
           RowBox[{"-", "a"}], " ", "x"}], "]"}]}]}], ",", "a", ",", "x", ",", 
       RowBox[{"EvaluationMonitor", "\[RuleDelayed]", 
        RowBox[{"count", "++"}]}]}], "]"}], ",", "count"}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->65187881],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", "\[Rule]", "0.009415496283978395`"}], "}"}], ",", "17"}], 
  "}"}]], "Output",
 ImageSize->{144, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->46634113]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Gradient",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->442346239],

Cell["\<\
Specify the model gradient to avoid problems with a removable singularity:\
\>", "ExampleText",
 CellID->261036267],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.", ",", 
       RowBox[{"-", "1."}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{".2", ",", "2."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{".5", ",", "5."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{".6", ",", "4."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.", ",", "0."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.", ",", "0."}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->90513975],

Cell[TextData[{
 "With symbolic derivatives ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["FindFit"]],"paclet:ref/FindFit"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " fails since the derivative for ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Sinc"]],"paclet:ref/Sinc"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " is given as a generic formula:"
}], "ExampleText",
 CellID->179578763],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindFit", "[", 
  RowBox[{"data", ",", 
   RowBox[{"a", " ", 
    RowBox[{"Sinc", "[", 
     RowBox[{"\[Omega]", " ", 
      RowBox[{"(", 
       RowBox[{"x", "-", "x0"}], ")"}]}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "\[Omega]", ",", "x0"}], "}"}], ",", "x"}], 
  "]"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->251205743],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Power", "::", "infy"}], "MessageName"], ":", 
  " ", "\<\"Infinite expression \[NoBreak]\\!\\(1\\/0.`\\)\[NoBreak] \
encountered. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/infy\\\", ButtonNote -> \
\\\"Power::infy\\\"]\\)\"\>"}]], "Message", "MSG",
 CellLabel->"During evaluation of In[2]:=",
 CellID->688081705],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Power", "::", "infy"}], "MessageName"], ":", 
  " ", "\<\"Infinite expression \[NoBreak]\\!\\(1\\/0.`\\^2\\)\[NoBreak] \
encountered. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/infy\\\", ButtonNote -> \
\\\"Power::infy\\\"]\\)\"\>"}]], "Message", "MSG",
 CellLabel->"During evaluation of In[2]:=",
 CellID->1714407379],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Infinity", "::", "indet"}], "MessageName"], ":", 
  " ", "\<\"Indeterminate expression \[NoBreak]\\!\\(0.`\\\\ \
ComplexInfinity\\)\[NoBreak] encountered. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/indet\\\", ButtonNote -> \
\\\"Infinity::indet\\\"]\\)\"\>"}]], "Message", "MSG",
 CellLabel->"During evaluation of In[2]:=",
 CellID->1774653336],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"FindFit", "::", "nrjnum"}], "MessageName"], ":", 
  " ", "\<\"The Jacobian is not a matrix of real numbers at \
\[NoBreak]\\!\\({a, \[Omega], x0}\\)\[NoBreak] = \[NoBreak]\\!\\({1.`, 1.`, \
1.`}\\)\[NoBreak]. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\
\\\"Link\\\", ButtonFrame->None, ButtonData:>\\\"paclet:ref/FindFit\\\", \
ButtonNote -> \\\"FindFit::nrjnum\\\"]\\)\"\>"}]], "Message", "MSG",
 CellLabel->"During evaluation of In[2]:=",
 CellID->576340850],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1.`"}], ",", 
   RowBox[{"\[Omega]", "\[Rule]", "1.`"}], ",", 
   RowBox[{"x0", "\[Rule]", "1.`"}]}], "}"}]], "Output",
 ImageSize->{161, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->1928679533]
}, Open  ]],

Cell[TextData[{
 "The gradient has a singularity when ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"x", "\[InvisibleSpace]", "0"}], "=", "1"}], TraditionalForm]], 
  "InlineMath"],
 " since there is a point in the data with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "1"}], TraditionalForm]], "InlineMath"],
 ":"
}], "ExampleText",
 CellID->170632306],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{"a", " ", 
    RowBox[{"Sinc", "[", 
     RowBox[{"\[Omega]", " ", 
      RowBox[{"(", 
       RowBox[{"x", " ", "-", " ", "x0"}], ")"}]}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"a", ",", "\[Omega]", ",", "x0"}], "}"}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->31397592],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Sinc", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "x0"}], ")"}], " ", "\[Omega]"}], "]"}], ",", 
   RowBox[{"a", " ", 
    RowBox[{"(", 
     RowBox[{"x", "-", "x0"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      FractionBox[
       RowBox[{"Cos", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", "-", "x0"}], ")"}], " ", "\[Omega]"}], "]"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"x", "-", "x0"}], ")"}], " ", "\[Omega]"}]], "-", 
      FractionBox[
       RowBox[{"Sin", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", "-", "x0"}], ")"}], " ", "\[Omega]"}], "]"}], 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "x0"}], ")"}], "2"], " ", 
        SuperscriptBox["\[Omega]", "2"]}]]}], ")"}]}], ",", 
   RowBox[{
    RowBox[{"-", "a"}], " ", "\[Omega]", " ", 
    RowBox[{"(", 
     RowBox[{
      FractionBox[
       RowBox[{"Cos", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", "-", "x0"}], ")"}], " ", "\[Omega]"}], "]"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"x", "-", "x0"}], ")"}], " ", "\[Omega]"}]], "-", 
      FractionBox[
       RowBox[{"Sin", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", "-", "x0"}], ")"}], " ", "\[Omega]"}], "]"}], 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "x0"}], ")"}], "2"], " ", 
        SuperscriptBox["\[Omega]", "2"]}]]}], ")"}]}]}], "}"}]], "Output",
 ImageSize->{412, 69},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->224686044]
}, Open  ]],

Cell["\<\
Specify finite differences to avoid the removable singularity:\
\>", "ExampleText",
 CellID->341588118],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fit", "=", 
  RowBox[{"FindFit", "[", 
   RowBox[{"data", ",", 
    RowBox[{"a", " ", 
     RowBox[{"Sinc", "[", 
      RowBox[{"\[Omega]", " ", 
       RowBox[{"(", 
        RowBox[{"x", "-", "x0"}], ")"}]}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"a", ",", "\[Omega]", ",", "x0"}], "}"}], ",", "x", ",", 
    RowBox[{"Gradient", "\[Rule]", "\"\<FiniteDifference\>\""}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[4]:=",
 CellID->61959277],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "4.6831240317786955`"}], ",", 
   RowBox[{"\[Omega]", "\[Rule]", "6.721526281208645`"}], ",", 
   RowBox[{"x0", "\[Rule]", "0.5209820263767843`"}]}], "}"}]], "Output",
 ImageSize->{273, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->1297523210]
}, Open  ]],

Cell["Show the data with the fit:", "ExampleText",
 CellID->4019287],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", "data", "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"a", " ", 
       RowBox[{"Sinc", "[", 
        RowBox[{"\[Omega]", " ", 
         RowBox[{"(", 
          RowBox[{"x", "-", "x0"}], ")"}]}], "]"}]}], "/.", "fit"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "2"}], "}"}]}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->25215762],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
nxA9C4IgmOFHgkVHdg==
    "], {{0, 141}, {240, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{240, 141},
  PlotRange->{{0, 240}, {0, 141}}]], "Output",
 ImageSize->{244, 141},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellTags->"RasterizedOutput",
 CellLabel->"Out[5]=",
 CellID->259178278]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "MaxIterations",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->365923182],

Cell[TextData[{
 "When convergence is slow, increasing ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["MaxIterations"]],"paclet:ref/MaxIterations"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " may allow convergence to the best fit:"
}], "ExampleText",
 CellID->111416151],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"model", "[", "x_", "]"}], ":=", 
   RowBox[{"d", "+", 
    RowBox[{"33", " ", "c", " ", 
     RowBox[{"(", 
      RowBox[{
       FractionBox[
        RowBox[{"0.7818074748209513", " ", "b"}], 
        RowBox[{
         RowBox[{"4", " ", 
          SuperscriptBox["b", "2"]}], "+", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "47"}], " ", "a"}], "+", 
            RowBox[{"2", " ", "x", " ", "\[Pi]"}]}], ")"}], "2"]}]], "+", 
       FractionBox[
        RowBox[{"0.6686926778600345", " ", "b"}], 
        RowBox[{
         RowBox[{"32", " ", 
          SuperscriptBox["b", "2"]}], "+", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "46"}], " ", "a"}], "+", 
            RowBox[{"2", " ", "x", " ", "\[Pi]"}]}], ")"}], "2"]}]], "+", 
       FractionBox[
        RowBox[{"0.8311998722869463", " ", "b"}], 
        RowBox[{
         RowBox[{"21", " ", 
          SuperscriptBox["b", "2"]}], "+", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "44"}], " ", "a"}], "+", 
            RowBox[{"2", " ", "x", " ", "\[Pi]"}]}], ")"}], "2"]}]]}], 
      ")"}]}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"xv", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", "500"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"a", "=", "2"}], ",", 
       RowBox[{"b", "=", "3"}], ",", 
       RowBox[{"c", "=", "4"}], ",", 
       RowBox[{"d", "=", "5"}]}], "}"}], ",", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{"xv", ",", 
        RowBox[{"model", "[", "xv", "]"}]}], "}"}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellLabel->"In[1]:=",
 CellID->579614116],

Cell["With the default, convergence is not reached:", "ExampleText",
 CellID->118008607],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindFit", "[", 
  RowBox[{"data", ",", 
   RowBox[{"model", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "2.3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "3.2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", "3.9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"d", ",", "4.9"}], "}"}]}], "}"}], ",", "x"}], "]"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->162448948],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"FindFit", "::", "cvmit"}], "MessageName"], ":", 
  " ", "\<\"Failed to converge to the requested accuracy or precision within \
\[NoBreak]\\!\\(100\\)\[NoBreak] iterations. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/FindFit/cvmit\\\", ButtonNote -> \
\\\"FindFit::cvmit\\\"]\\)\"\>"}]], "Message", "MSG",
 CellLabel->"During evaluation of In[2]:=",
 CellID->2097989441],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1.9993509431025493`"}], ",", 
   RowBox[{"b", "\[Rule]", "3.0164316615232263`"}], ",", 
   RowBox[{"c", "\[Rule]", "3.9761847890054036`"}], ",", 
   RowBox[{"d", "\[Rule]", "5.00000982812889`"}]}], "}"}]], "Output",
 ImageSize->{343, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->1184400708]
}, Open  ]],

Cell["Convergence is reached before 1000 iterations are used:", "ExampleText",
 CellID->11419712],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindFit", "[", 
  RowBox[{"data", ",", 
   RowBox[{"model", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "2.3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "3.2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", "3.9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"d", ",", "4.9"}], "}"}]}], "}"}], ",", "x", ",", 
   RowBox[{"MaxIterations", "\[Rule]", "1000"}]}], "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->239578397],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "2.000000000051208`"}], ",", 
   RowBox[{"b", "\[Rule]", "2.9999999986975947`"}], ",", 
   RowBox[{"c", "\[Rule]", "4.0000000018961455`"}], ",", 
   RowBox[{"d", "\[Rule]", "4.999999999999229`"}]}], "}"}]], "Output",
 ImageSize->{203, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->63886155]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Method",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->308617728],

Cell[TextData[{
 "Use ",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{Cell[
      TextData["Method"]],"paclet:ref/Method"},
    "RefLink",
    BaseStyle->"InlineFormula"], "->", 
   TemplateBox[{Cell[
      TextData["NMinimize"]],"paclet:ref/NMinimize"},
    "RefLink",
    BaseStyle->"InlineFormula"]}]], "InlineFormula"],
 " to search more exhaustively for a global minimum:"
}], "ExampleText",
 CellID->58344041],

Cell[BoxData[
 RowBox[{
  RowBox[{"model", "=", 
   RowBox[{
    RowBox[{"a", " ", 
     RowBox[{"Exp", "[", 
      RowBox[{
       RowBox[{"-", "b"}], " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"x", "-", "c"}], ")"}], "^", "2"}]}], "]"}]}], "+", 
    RowBox[{"d", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{
       RowBox[{"\[Omega]", " ", "x"}], "+", "\[Phi]"}], "]"}]}]}]}], 
  ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->112853019],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"model", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"a", "\[Rule]", "2"}], ",", 
           RowBox[{"b", "\[Rule]", "1"}], ",", 
           RowBox[{"c", "\[Rule]", "0"}], ",", 
           RowBox[{"d", "\[Rule]", "2"}], ",", 
           RowBox[{"\[Omega]", "\[Rule]", "0.67"}], ",", 
           RowBox[{"\[Phi]", "\[Rule]", "0.1"}]}], "}"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "5"}], ",", "5", ",", ".1"}], "}"}]}], "]"}], "+", 
    RowBox[{"RandomReal", "[", 
     RowBox[{".25", ",", "101"}], "]"}]}]}], ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->198224689],

Cell["Find a local minimum:", "ExampleText",
 CellID->320088632],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f1", "=", 
  RowBox[{"FindFit", "[", 
   RowBox[{"data", ",", "model", ",", 
    RowBox[{"{", 
     RowBox[{
     "a", ",", "b", ",", "c", ",", "d", ",", "\[Omega]", ",", "\[Phi]"}], 
     "}"}], ",", "x"}], "]"}]}]], "Input",
 CellLabel->"In[3]:=",
 CellID->724733624],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "3.0855559137247086`"}], ",", 
   RowBox[{"b", "\[Rule]", "0.36995361424312245`"}], ",", 
   RowBox[{"c", "\[Rule]", "3.6943710491663975`"}], ",", 
   RowBox[{"d", "\[Rule]", "2.174526945321984`"}], ",", 
   RowBox[{"\[Omega]", "\[Rule]", "0.8888950238172902`"}], ",", 
   RowBox[{"\[Phi]", "\[Rule]", "0.8237816424265766`"}]}], "}"}]], "Output",
 ImageSize->{532, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->256805150]
}, Open  ]],

Cell["Search for a global minimum:", "ExampleText",
 CellID->12121573],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f2", "=", 
  RowBox[{"FindFit", "[", 
   RowBox[{"data", ",", "model", ",", 
    RowBox[{"{", 
     RowBox[{
     "a", ",", "b", ",", "c", ",", "d", ",", "\[Omega]", ",", "\[Phi]"}], 
     "}"}], ",", "x", ",", 
    RowBox[{"Method", "\[Rule]", "NMinimize"}]}], "]"}]}]], "Input",
 CellLabel->"In[4]:=",
 CellID->152087054],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "2.168929609676526`"}], ",", 
   RowBox[{"b", "\[Rule]", "0.7522273116028804`"}], ",", 
   RowBox[{"c", "\[Rule]", "0.12753998753484402`"}], ",", 
   RowBox[{"d", "\[Rule]", "1.9791027305651885`"}], ",", 
   RowBox[{"\[Omega]", "\[Rule]", "0.6689220714737573`"}], ",", 
   RowBox[{"\[Phi]", "\[Rule]", 
    RowBox[{"-", "0.04304512666610466`"}]}]}], "}"}]], "Output",
 ImageSize->{540, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->844064540]
}, Open  ]],

Cell["\<\
Compare the quality of the two fits (the global best fit is shown in red):\
\>", "ExampleText",
 CellID->103264514],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"Evaluate", "[", 
       RowBox[{"model", "/.", 
        RowBox[{"{", 
         RowBox[{"f1", ",", "f2"}], "}"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "Green", "}"}], ",", 
         RowBox[{"{", "Red", "}"}]}], "}"}]}]}], "]"}], ",", 
    RowBox[{"ListPlot", "[", "data", "]"}]}], "}"}], "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->68814404],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
    "], {{0, 149}, {240, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{240, 149},
  PlotRange->{{0, 240}, {0, 149}}]], "Output",
 ImageSize->{244, 149},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellTags->"RasterizedOutput",
 CellLabel->"Out[5]=",
 CellID->379834793]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "NormFunction",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->31388],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Prime", "[", "x", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "20"}], "}"}]}], "]"}]}]], "Input",
 CellLabel->"In[1]:=",
 CellID->24887865],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "3", ",", "5", ",", "7", ",", "11", ",", "13", ",", "17", ",", 
   "19", ",", "23", ",", "29", ",", "31", ",", "37", ",", "41", ",", "43", 
   ",", "47", ",", "53", ",", "59", ",", "61", ",", "67", ",", "71"}], 
  "}"}]], "Output",
 ImageSize->{479, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[1]=",
 CellID->583730768]
}, Open  ]],

Cell["The default is to find the best least-squares fit:", "ExampleText",
 CellID->117745648],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindFit", "[", 
  RowBox[{"data", ",", 
   RowBox[{"a", " ", "x", " ", 
    RowBox[{"Log", "[", 
     RowBox[{"b", "+", 
      RowBox[{"c", "x"}]}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", "x"}], "]"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->3720920],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1.4207557216006192`"}], ",", 
   RowBox[{"b", "\[Rule]", "1.6555813752621502`"}], ",", 
   RowBox[{"c", "\[Rule]", "0.5346453149546779`"}]}], "}"}]], "Output",
 ImageSize->{266, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->306161343]
}, Open  ]],

Cell[TextData[{
 "Use the ",
 Cell[BoxData[
  FormBox["\[Infinity]", TraditionalForm]], "InlineMath"],
 "-norm instead:"
}], "ExampleText",
 CellID->487219474],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindFit", "[", 
  RowBox[{"data", ",", 
   RowBox[{"a", " ", "x", " ", 
    RowBox[{"Log", "[", 
     RowBox[{"b", "+", 
      RowBox[{"c", "x"}]}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", "x", ",", 
   RowBox[{"NormFunction", "->", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Norm", "[", 
       RowBox[{"#", ",", "Infinity"}], "]"}], "&"}], ")"}]}]}], 
  "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->443269537],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1.1507695890710887`"}], ",", 
   RowBox[{"b", "\[Rule]", "1.0022987426644`"}], ",", 
   RowBox[{"c", "\[Rule]", "1.0468558066626197`"}]}], "}"}]], "Output",
 ImageSize->{252, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->878749325]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindFit", "[", 
  RowBox[{"data", ",", 
   RowBox[{"a", " ", "x", " ", 
    RowBox[{"Log", "[", 
     RowBox[{"b", "+", 
      RowBox[{"c", "x"}]}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", "x", ",", 
   RowBox[{"NormFunction", "->", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Norm", "[", 
       RowBox[{"#", ",", "1"}], "]"}], "&"}], ")"}]}]}], "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->14151221],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1.1477982434452392`"}], ",", 
   RowBox[{"b", "\[Rule]", "1.0047401046682187`"}], ",", 
   RowBox[{"c", "\[Rule]", "1.0517840065727222`"}]}], "}"}]], "Output",
 ImageSize->{252, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->222379493]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "StepMonitor",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->244192407],

Cell["\<\
Show steps taken in parameter space to fit the Michaelis\[Dash]Menten model \
to experimental data:\
\>", "ExampleText",
 CellID->398990986],

Cell[BoxData[
 RowBox[{
  RowBox[{"model", "=", 
   FractionBox[
    RowBox[{
     SubscriptBox["\[Theta]", "1"], "x"}], 
    RowBox[{
     SubscriptBox["\[Theta]", "2"], "+", "x"}]]}], ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->73123166],

Cell["\<\
Data from an experiment on the rate of an enzymatic reaction:\
\>", "ExampleText",
 CellID->545405375],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.02", ",", "76."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.02", ",", "47."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.06", ",", "97."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.06", ",", "107."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.11", ",", "123."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.11", ",", "139."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.22", ",", "159."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.22", ",", "152."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.56", ",", "191."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.56", ",", "201."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.1", ",", "207."}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.1", ",", "200."}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->947481304],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"fit", ",", "steps"}], "}"}], "=", 
   RowBox[{"Reap", "[", 
    RowBox[{"FindFit", "[", 
     RowBox[{"data", ",", "model", ",", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[Theta]", "1"], ",", 
        SubscriptBox["\[Theta]", "2"]}], "}"}], ",", "x", ",", 
      RowBox[{"StepMonitor", "\[RuleDelayed]", 
       RowBox[{"Sow", "[", 
        RowBox[{"{", 
         RowBox[{
          SubscriptBox["\[Theta]", "1"], ",", 
          SubscriptBox["\[Theta]", "2"]}], "}"}], "]"}]}]}], "]"}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->139363387],

Cell["Show how the parameters evolve during the search:", "ExampleText",
 CellID->145906611],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"steps", ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Red", ",", 
      RowBox[{"Point", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          SubscriptBox["\[Theta]", "1"], ",", 
          SubscriptBox["\[Theta]", "2"]}], "}"}], "/.", "fit"}], "]"}]}], 
     "}"}]}]}], "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->461283651],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.019444444444444445`], 
    AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGAQA2IQ3f6LY8uKvK/2yxRfrnxy9bq9q/d0s8cz/thzRDqJ
yrRvsJeYcllT/gGTQ8IpHr9HKxPtl145GuQ8l8vBgufup8Wp1ft197w7cE1T
xMEqiKPfS7l1v1Ybg+1JHQUHvYj8VvO8zv0sao57nYS0HY6/3rxffXP3/q3r
ejh7pps7TEwKYC6f2L0/yW935tQMV4c34sy/T39r2/9tvgyH+MZgh0eavy0/
byza31KSn3tOPskh9o7tOgeeTvvIdIkUEbMMB86L5d/Zriy215bV+KgiluXw
8aHlydWua+3/Vaiz5TZnOSydbfQjRHODfeO+HPMrk7McDPJuNU1L3mDP27O/
bO3ULIe8MkO12Zkb7FMYTljeAfI5+2uWGGQB5Q/+3fsAyN9uE8lnD+SL/cnS
fQjkCzM8KXQA8qeVqFuA+Pt2qk4B8ZtcDSxB/G0biqaD+HEnPcF8X6kjYD4A
jHmgQA==
     "]]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Epilog->{
    RGBColor[1, 0, 0], 
    PointBox[{212.68374313746875`, 0.06412128167367222}]},
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{0, 212.68374313746875`}, {-0.013525305307202985`, 
    0.17712257655448932`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 ImageSize->{244, 137},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->1167283052]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "WorkingPrecision",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->276747749],

Cell[TextData[{
 "Use a higher ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["WorkingPrecision"]],"paclet:ref/WorkingPrecision"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " to get a more precise parameter estimate:"
}], "ExampleText",
 CellID->429534],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "126"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "125"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "123"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"12", ",", "120"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"14", ",", "119"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"16", ",", "118"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"20", ",", "116"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"24", ",", "115"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"28", ",", "114"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"31", ",", "113"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"34", ",", "112"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"75", "/", "2"}], ",", "111"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"41", ",", "110"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->11960218],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindFit", "[", 
  RowBox[{"data", ",", 
   RowBox[{"60", "+", 
    RowBox[{"70", " ", 
     RowBox[{"Exp", "[", 
      RowBox[{
       RowBox[{"-", "a"}], " ", "x"}], "]"}]}]}], ",", "a", ",", "x", ",", 
   RowBox[{"WorkingPrecision", "\[Rule]", "50"}]}], "]"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->195890952],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "a", "\[Rule]", 
   "0.0094154962840453400771940379222510706270007523073428862669685677597`50.\
"}], "}"}]], "Output",
 ImageSize->{420, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->33927605]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Applications",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(7)", "ExampleCount"]
}], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->107405395],

Cell[CellGroupData[{

Cell[TextData[{
 "Mathematical Data",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(2)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->308456881],

Cell["Fit a list of Fibonacci numbers:", "ExampleText",
 CellID->31387452],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Fibonacci", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "15"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->61543534],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "2", ",", "3", ",", "5", ",", "8", ",", "13", ",", "21",
    ",", "34", ",", "55", ",", "89", ",", "144", ",", "233", ",", "377", ",", 
   "610"}], "}"}]], "Output",
 ImageSize->{368, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[1]=",
 CellID->866946877]
}, Open  ]],

Cell["The base is approximately the golden ratio:", "ExampleText",
 CellID->628619116],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindFit", "[", 
  RowBox[{"%", ",", 
   RowBox[{
    RowBox[{"a", " ", 
     RowBox[{"c", "^", "x"}]}], "+", 
    RowBox[{"b", " ", 
     RowBox[{"c", "^", 
      RowBox[{"-", "x"}]}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", "x"}], "]"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->652836235],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "0.20087203717209653`"}], ",", 
   RowBox[{"b", "\[Rule]", "0.4471342844733007`"}], ",", 
   RowBox[{"c", "\[Rule]", "0.618026449008038`"}]}], "}"}]], "Output",
 ImageSize->{280, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->427832899]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell["\t", "ExampleDelimiter"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->92107301],

Cell["Generate data with some noise present:", "ExampleText",
 CellID->554009824],

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Sqrt", "[", "x", "]"}], " ", 
      RowBox[{"Cos", "[", "x", "]"}]}], "+", 
     RowBox[{"RandomReal", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "1"}], "}"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "100"}], "}"}]}], "]"}], ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->196749448],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", "%", "]"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->434322074],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJw1lAtMU2cUxwEfVORRy6Mtr0J5iA4Xii+YAn8KFMZDWgqloLINHJmGiIQp
bGp2MxxTMoGJqcAC0TgYMh6CGh5BKESRDQfoYDBFRXHiE2pEkYdjLvf0Jjc3
//ud8/ufc77vXufk9JjPjQwMDHa9v/9/spcuwKNNnv3CTRdAL8B3Ez7oCH3V
wUoOVmVK3PO73pHmInx3WWOqoaGW1VYQyLjfdNY9pXwBxNfe/PTwFw5YbY8e
af+0i88S0k44cEWhWvzzKsWLsUlyNikrZwXxXOHbvOcTcd8S0u7g5uV9Ztf0
hOI9wA8VzK8dXU68tXjq3l7Ha7Yg7YnCR7WXx571UfyHmDKtvTG73oh4Xsh5
vfXYnURT0hJcNDx385zNberPGy8sUkSiLDPirQemXl5q7bYivQF/CQ/XXJic
J/5GeJnX73vXpedvgsvdnoHxLdakN2PCZXu39fOVpH3wdm6mbzF/lvJ9Mflo
oCLr2Crif4TcsIllztampLegdcKrfu7WPNW3FT6ph5v9Xq4inh+uysZO1nMs
Sftjeu2Mp6/wFvEDoDOvvlGx05J4QOP8han0RdIMoJZ2Klt6Sik+EEzSw7oC
by7LYwLRd7S3VlCu95NCPtg4Z9nawtbDSJEg8pV4qG2IH4TCo8fr+MlC4gfh
7aWMobunjGg9GA/EiTddn1C9TDCYYqbg+Y+2xA8Br5J/b1ZE+8+EoMgmJPPQ
9WWUL8OOK1Fdp8vsiC9DrNfrzL91K2k9FEOrNRuLEo0pPxT+j70Wxg46ED8M
yYEOe8caeLQehjbjV5NR3Gnq/2PkZpww9Km1Jf57Pd1k1TEgIH44OGe/0g2G
LFD/4fi24nqNhMMnfgR+Vr5xdJuwIn4EvNt5/HT/Z8SPxD5+n6v2N3viR+J8
dkNE4RfkZxCFEcXiLrPkN2w8E4XK9M2vspuFxN+GqiqT3cK7jsTfhi71ak1a
o47ORzScppjxU1o+8aNh/jpywFktIr4cn25IO9LQs5TVkCO1un6yxU6/33IU
qgq4mhl7VmvlaHYry3DbTusGCnDSbhsfHKHvAwqMj74tcvvOkfwUmCvuCht+
bM1qrQLx5TKNvFr/PcfgWmdpU8F+J1YjBr3DW7za/Gh+TAzKS6tOF85Msf1r
Y+B+0Tml/IQz1a9E6w8l62pkTuSvRPDJpKwi/36alxLV+TlDzsU0H60S4rzg
UfPHIvKPhYku9Mgazhg7L8TivlW3ILlff55iMag5fa8tR0z1xyK65M5IiGQF
+cch3KA33sSR9gNx6Bn84E6Ijvph4uDhKGi3rbQg/zhI58Iq9zbo/x8qpLaU
2Zmfp36gwpcLbQkBSTzyV6Fhx9LLv9qZUb4KXRe+Lzh+xoXqj8eef74We2bq
/eNRX1BzRAWqj4kH/8xyTXauC9Ufj3bY7PRmHMhfjVTTy3+ILy2jfDX+PcRL
WaMQU/1qREr3D5cc0M9PjXWevN/3Ce/T+UqAmbSzKYgR4T8g5Mna
      "]]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageMargins->0.,
  Method->{},
  PlotRange->{{0., 100.}, {-9.81553314715882, 9.762638748463855}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 ImageSize->{184, 102},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 GraphicsBoxOptions->{ImageSize->Small},
 CellLabel->"Out[2]=",
 CellID->408068852]
}, Open  ]],

Cell["Fit the data:", "ExampleText",
 CellID->256354851],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindFit", "[", 
  RowBox[{"%%", ",", 
   RowBox[{"a", " ", 
    RowBox[{"x", "^", "b"}], " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"c", " ", "x"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", "x"}], "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->831553048],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1.0116436220228195`"}], ",", 
   RowBox[{"b", "\[Rule]", "0.49383335185838506`"}], ",", 
   RowBox[{"c", "\[Rule]", "0.9996302046317734`"}]}], "}"}]], "Output",
 ImageSize->{266, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->1786114464]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Experimental Data",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(3)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->56107519],

Cell["Determine the approximate complexity of a computation:", "ExampleText",
 CellID->233528021],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", ",", "v"}], "}"}], ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"n", "=", 
        RowBox[{"2", "^", "k"}]}], ";", 
       RowBox[{"v", "=", 
        RowBox[{"RandomComplex", "[", 
         RowBox[{
          RowBox[{"1", "+", "I"}], ",", "n"}], "]"}]}], ";", 
       RowBox[{"{", 
        RowBox[{"n", ",", 
         RowBox[{"First", "[", 
          RowBox[{"Timing", "[", 
           RowBox[{"Fourier", "[", "v", "]"}], "]"}], "]"}]}], "}"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"k", ",", "16", ",", "20"}], "}"}]}], "]"}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[1]:=",
 CellID->50305132],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "65536", ",", 
     "0.00626499999999999973576692013921274338`3.8175209886097927"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "131072", ",", 
     "0.01845300000000000065214500466481695184`4.286666895023035"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "262144", ",", 
     "0.03228899999999999825828211896805441938`4.529654508274892"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "524288", ",", 
     "0.07205999999999999905408998301936662756`4.878294171066174"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "1048576", ",", 
     "0.1366789999999999949409357213880866766`5.156301705940219"}], "}"}]}], 
  "}"}]], "Output",
 ImageSize->{425, 33},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[1]=",
 CellID->1900254420]
}, Open  ]],

Cell["Fit to the theoretical model for the complexity of an FFT:", \
"ExampleText",
 CellID->547014642],

Cell[BoxData[
 RowBox[{
  RowBox[{"model", "=", 
   RowBox[{"c", " ", "n", " ", 
    RowBox[{"Log", "[", "n", "]"}]}]}], ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->167968953],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fit", "=", 
  RowBox[{"FindFit", "[", 
   RowBox[{"data", ",", "model", ",", "c", ",", "n"}], "]"}]}]], "Input",
 CellLabel->"In[3]:=",
 CellID->120560214],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "c", "\[Rule]", "9.62254622752317741776784516918`3.8175209886097927*^-9"}], 
  "}"}]], "Output",
 ImageSize->{106, 18},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->1421914290]
}, Open  ]],

Cell["Show the timing data and the fit in a log-log plot:", "ExampleText",
 CellID->70723954],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LogLogPlot", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{"model", "/.", "fit"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", 
     RowBox[{"2", "^", "16"}], ",", 
     RowBox[{"2", "^", "20"}]}], "}"}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"Map", "[", 
     RowBox[{"Point", ",", 
      RowBox[{"Log", "[", "data", "]"}]}], "]"}]}]}], "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->524019058],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
AABIz/8Bzzml/g==
    "], {{0, 233}, {403, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{403, 233},
  PlotRange->{{0, 403}, {0, 233}}]], "Output",
 ImageSize->{407, 233},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 GraphicsBoxOptions->{ImageSize->{403., Automatic}},
 CellTags->"RasterizedOutput",
 CellLabel->"Out[4]=",
 CellID->189243357]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell["\t", "ExampleDelimiter"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->430150368],

Cell["Fit a model for lubricant viscosity to experimental data:", \
"ExampleText",
 CellID->497012135],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"\"\<ExampleData/lubricant.tsv\>\"", ",", "\"\<TSV\>\"", ",", 
     RowBox[{"\"\<HeaderLines\>\"", "\[Rule]", "7"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->90706713],

Cell[TextData[{
 "Model for lubricant viscosity as a function of temperature ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "1"], TraditionalForm]], "InlineMath"],
 " and pressure/1000 ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "2"], TraditionalForm]], "InlineMath"],
 ":"
}], "ExampleText",
 CellID->235035511],

Cell[BoxData[
 RowBox[{
  RowBox[{"model", "=", 
   RowBox[{
    FractionBox[
     SubscriptBox["\[Theta]", "1"], 
     RowBox[{
      SubscriptBox["\[Theta]", "2"], "+", 
      SubscriptBox["x", "1"]}]], "+", 
    RowBox[{
     SubscriptBox["\[Theta]", "3"], 
     SubscriptBox["x", "2"]}], "+", 
    RowBox[{
     SubscriptBox["\[Theta]", "4"], 
     SuperscriptBox[
      SubscriptBox["x", "2"], "2"]}], "+", 
    RowBox[{
     SubscriptBox["\[Theta]", "5"], 
     SuperscriptBox[
      SubscriptBox["x", "2"], "3"]}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["\[Theta]", "6"], "+", 
       RowBox[{
        SubscriptBox["\[Theta]", "7"], 
        SuperscriptBox[
         SubscriptBox["x", "2"], "2"]}]}], ")"}], 
     SubscriptBox["x", "2"], " ", 
     RowBox[{"Exp", "[", 
      FractionBox[
       RowBox[{"-", 
        SubscriptBox["x", "1"]}], 
       RowBox[{
        SubscriptBox["\[Theta]", "8"], "+", 
        RowBox[{
         SubscriptBox["\[Theta]", "9"], 
         SuperscriptBox[
          SubscriptBox["x", "2"], "2"]}]}]], "]"}]}]}]}], ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->13701714],

Cell["Scale the pressure to improve the conditioning of the model:", \
"ExampleText",
 CellID->36776710],

Cell[BoxData[{
 RowBox[{
  RowBox[{"sdata", "=", "data"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"sdata", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "2"}], "]"}], "]"}], "*=", "0.001"}], 
  ";"}]}], "Input",
 CellLabel->"In[3]:=",
 CellID->183188250],

Cell[TextData[{
 "Find the parameters ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Theta]", "i"], TraditionalForm]], "InlineMath"],
 " that best fit the scaled data:"
}], "ExampleText",
 CellID->840290591],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fit", "=", 
  RowBox[{"FindFit", "[", 
   RowBox[{"sdata", ",", "model", ",", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox["\[Theta]", "1"], ",", 
      SubscriptBox["\[Theta]", "2"], ",", 
      SubscriptBox["\[Theta]", "3"], ",", 
      SubscriptBox["\[Theta]", "4"], ",", 
      SubscriptBox["\[Theta]", "5"], ",", 
      SubscriptBox["\[Theta]", "6"], ",", 
      SubscriptBox["\[Theta]", "7"], ",", 
      SubscriptBox["\[Theta]", "8"], ",", 
      SubscriptBox["\[Theta]", "9"]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox["x", "1"], ",", 
      SubscriptBox["x", "2"]}], "}"}]}], "]"}]}]], "Input",
 CellLabel->"In[4]:=",
 CellID->124043390],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SubscriptBox["\[Theta]", "1"], "\[Rule]", "1054.8625781979829`"}], ",", 
   RowBox[{
    SubscriptBox["\[Theta]", "2"], "\[Rule]", "206.61106711760684`"}], ",", 
   RowBox[{
    SubscriptBox["\[Theta]", "3"], "\[Rule]", "1.4599783029079627`"}], ",", 
   RowBox[{
    SubscriptBox["\[Theta]", "4"], "\[Rule]", 
    RowBox[{"-", "0.25954857632123174`"}]}], ",", 
   RowBox[{
    SubscriptBox["\[Theta]", "5"], "\[Rule]", "0.02255320370519599`"}], ",", 
   RowBox[{
    SubscriptBox["\[Theta]", "6"], "\[Rule]", "0.4017968455972749`"}], ",", 
   RowBox[{
    SubscriptBox["\[Theta]", "7"], "\[Rule]", "0.035267496907376024`"}], ",", 
   RowBox[{
    SubscriptBox["\[Theta]", "8"], "\[Rule]", "57.43425812280103`"}], ",", 
   RowBox[{
    SubscriptBox["\[Theta]", "9"], "\[Rule]", 
    RowBox[{"-", "0.47599432842125805`"}]}]}], "}"}]], "Output",
 ImageSize->{508, 33},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->154483175]
}, Open  ]],

Cell["Show a plot of the fit with the scaled experimental data:", \
"ExampleText",
 CellID->27339907],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Plot3D", "[", 
     RowBox[{
      RowBox[{"Evaluate", "[", 
       RowBox[{"model", "/.", "fit"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["x", "1"], ",", "0", ",", "100"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["x", "2"], ",", "0", ",", "8"}], "}"}]}], "]"}], ",", 
    RowBox[{"Graphics3D", "[", 
     RowBox[{"{", 
      RowBox[{"Red", ",", 
       RowBox[{"PointSize", "[", ".025", "]"}], ",", 
       RowBox[{"Map", "[", 
        RowBox[{"Point", ",", "sdata"}], "]"}]}], "}"}], "]"}]}], "}"}], 
  "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->934645470],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztneuSHLd1x7eSfMgzUFwud5d6gnmC5BGcJ7Crwq+pclKV8oPFsUTasi6U
KetKkyIl3mRdKMn+lDfoDLrRwLnjoLtnpmeJU5BqdgZA9wA//PuP073L81/9
xy9u/8PJycl//vP2f7/45X//y69//cvf/Ns/bX/419/817//6h+3L+5t//u/
7X/hddeiMm7jOPTptGgxMUSGG9stjjESrga3DewWRxFck0/G0Oo3tlusMwiT
A8afjHECQmve2G6xhuAQQpJ52GB3je0WhwuOnA2zCHZju8UaYg7Mc9je8ddq
8TqGbZjnRDPbLfYcVYZ5Ds/Fm1mN7RZzonb3NwXgn9/sfr7V/S2UzWbjvz/b
2G5RFYsYZkLvltgeYFD+NpTI8/b/Ex45aGy3sGMCzCdSdK9udT/2oP70Zig/
v5mR/hsqA8xDmYA0PPPGdgsYxu5PhDZr73e3uu/78kNfXt2SecYkd38PJbz/
9wV4Jl+kgf06h2iYkd4+v+xe9OVlX765DBz+9Vb37a0tzOE1g7n78c3I8+gx
ENIZ5v71EhKtfa/G9msV4lxH4X162T27DDA/RzBHnr+NPG9hDj8mnn+k4pyc
RkT674TnW4nnxZGGX7OxfeVDm9wA1dMe2gTziwzzVpkJzxHpVwWeI9JEnIE+
7xRp+K0b21cvbJiDMj/rkX4hifNgNgDPW3GOSEOYGc8JaYPn7uedIw0HobF9
7GFPX+a5F+cA3ksozthswM3gq57kEs8UZmI5fo5lb0inaGAfYxTnK4D0DDnn
iLQoziy5MSDd/XSrQp8Zz/2KOADSQzTRPpZwwfz0IvM8mo0AmJvngUbKs2Sh
hS0h4HlA+lBUD9HYXm14ZgSaZ7ITjPgRmDHPUZzF/SDkmWQ5sHnub74MCn/Z
/RjKYZFO0dheSTingIozy2xEpG2z4UnZ8US0yXP3ai1Ip2hsHyr8A07FWeI5
J+tEcQYpuy2Q5JaKwPP4IEdCGsB8K8Lc89z9sDqkUzS29xaVMEvi/ALeEwz5
jS3M8Ta3zXNCOlhi8SkOlKaL4j/kNyDPryLPa0Y6RQN7d1E1qoGlZ4rZYDxn
pEWeGdIDqBlXpSBx5jx/f1n1cOlho4n2gjFhGOM9bhHmlN8APOcnN9LNlPT8
BkMaCHUB5pTZ6Ntms5F47r67OHjSozYa23NiwqCNZuNCuMedxDnzfJn8c0Ia
PcLBkB4ojawaPP8E9HzgGYvzFubu27789eK4kE7R2K6KaaOUeI73uDHPKfkc
eWZIo0fsJKQhq9lOgELfH5oAcY4wfxdhDuWbY0U6RWPbjtkwX6R73PHJDcIz
kujLlIKO9X+QkU5JaZD0UHj+EZXekMvivIU5lJfnx450igY2iclDwXmGt7nh
zW4m0Zey5cBII55HUOGbvEIovdPo++z///2lyHP34vzo7LQdTbRnfnfM8wX0
zxE8i+dLmOjgSKOkxysmvwTmWA3l6OI5fHdJzEb3MvLcPT8/orxHVbyGbM/8
phHmxPOzC7IfjDgpPI+kXSKkgZemPL+iVgRXQCRn5zz4DSrOFwHmF+d9Wua8
e3rVhJrE68D2/K+WeZYkejM+LKoh3WN2OSJ9mZAehJrK9Q8yz9EnY4yzbf4+
dh6RJjw/zzx3X9/svrp5hZFOcSXZXgbmry8ozwlpwLOIdIR5NB6A6stM9fe3
KNK5RHsMXwwYp5L1vxfn8WKRzXOGeeS5e3Lzags1iSvA9lInb/J8EVMc/K4K
5DkZaQb2yPOlViLD8EdY4bsR5m8vs9PoS7/KLiLMz8+zOI88d49DeX2QTnGM
VC91wsMNwYBEkWeM9ED1Jt3+htvDb8k+0aKavw+2fsBgAJKjMn9zkY3Ks3No
NjLPX27L2Wsl1N0R8rzg2UZx/voiIw147qWvB5shnR8chV6a7xOxViNDIr2D
MQZuGZPcpzVCKfIcPn101j08e02Qft1h/upi4HlAOlI9Ip15DkhfiCotbxK5
tR4Jp9pLSOaVCckJ5hcX0Wn0m8H+zLN5HniOMPc8d3+5+kI9sHEsPC++9AjP
gz5v4iN244vnFxjpEWxwkwUhTXy15EOA9jKLMpTQ6mKAOW/9gCz35wCccy/O
4UdsnpM4Dzx3D866L64y1UfE8+InGWEeioR0AlukOm7HmKNORbUiI+3Ue8cC
tnvYJwOSBZh7cR6FOonz1j+P4px47j6/sS1XD+lEyPp53sUZ9jyfU54B0ohn
hnS/TxzpirKpKzYpo3qPSDNH8c3I80tklePhUrY5kdzDHEpvnuPJf3nT4HnT
30y8MlRDQlbO865gfnIeSkIaq/RgpDWqo69+gUui7uVFltOXFNTMKtRe7ChQ
c3CIWPk5STgPJJ/nneCTEelHgOcHlOfu0xvbcjWoPgqed7dXzTxHpEewU64D
ZKQp0mSfyMBG9kAq/FP4DlL+VOKxgibHrZ8Jc0puhNeM5/DmZwHm7pO+fHzc
VBNI1snz7s4qTNzj88wzozryTBz10wu0T+QmBFuRyBIjU8YV1I8VULfn2So/
iya5P0kA8xMKc282bm5hjpVHniPMmOfu49Puz6fHSPVrDnOXfqlqi/RjAenw
0VeD7lEHkkwIkWvBijxXnYnGs9Q8M4ySGKMsx1MCMINt4FjG5EZ4/4sCz91H
p8flqzknK+R51zB3XwaSIwxMqCPPQ/kagw2oFu4nKtI9ml6BdlqesVt+cMcX
M3LQY5wPuz+UoEswP7yZd4K934g9f35D4PnPmefu/mn3p+PQ6pXzvIebO5Hn
ofRUQ6Hu2SD2I4OdcKJI604bom58moxEAnhcOMgno7W2LU/Q7k+FGTqNz0eq
JZ4jzD3PoXy4aqpFVNbD8x7OJEzNo/PMc1+yUD8GPAu+GlqRsVVSy6/xNo2i
LiH6lGnvU5p/g4fIMD85hwYjli9BToPDDHge9DlWzjz3m8SPTgnPodxbI9Ua
LSvheT+nEXkeCqT6MaJasNZPmDaOhCPRBnjngnEVhVdt/hXY/T0BJD9GJI/P
aQRljpVVmM+y2fh0pBryLCN9fVW+2qBlDTzvD+aHaaNEqe4v1sB+MLCpdHOq
qes+p+pt/8gWC1DjtNwoxgTmXplvDru/DclpMJij3/h4pLr3zwLP93of8sH1
UN6/vgaq18zz3k4g8jyUR6REnrP9+BIhTWw2LxRpJuOqtsMKvOftOQ/ZmJBj
xDf+QBIjvPkwwww3gDmnkWD+DMA88jzoM7UcHwo8D+VkjP3MHQwbmAPyvM9H
+8LI/+VmKA9ZeQT0bSiQ6qTeXLdHwpN0Y2OgCLu4EOCbUIQhz1yNCcx/kT3z
CPOZCHPiOeU3wo/AbIQf712PPCek34tlz1SvGea9HSsmnAeeUwFIRySoaMf0
FwQbWm4q3co71lqIn47C+1gxxj3VoYATSxhnt4xJhsoc639agDmJc6wfYT4V
eB6RDhXe3R/V6+R5z8cNQ/0gbZRukoIu1syQxFZIvZl3/VJ4M4FKKeW46l3R
Qz+iyzDDzEgeDHOoMCpzrC/AfCPCjM1zrB94PhV5Dp9uqX63L3/cuQkpYnMQ
ng8A8xc3Q3lwc6B6eBFK4lkSbSjdAtWPmFHRqGbvU4AfqctHXmvxbHtW012S
LyjJAOYzaDNifcizBPPA8yDR2T+bPKeyC6o92OwZrYP8LkzmeSxxggjeTLe5
dMOrfKadQR5K8r2iwovL4RE9UD4WOqusxgPPyVdsUhKDKDOxGSinAcT5PhXn
tB8ctoSxycgzghnzvC2bMb+3CNhObPZJ175J7okKgwmmuJ96gWqhcOkGkCfR
FsTzId7E2WtBbP4wH2U8AWAnHgCYmSbHJr0mb6BhxjCrOQ0mztFsAL+RT2zY
Er4rIx0qvPPGUOZTvTaeDwJz5JkgncE+y1MDBfyB5Eww5xrqsUCeU14Ft7Ka
pwoPwEMXfJeHrcWYwYgkI5gxyfnuSVDmGzmnwWHOPNP9YEZa4rmH+XriuftD
KJPl2g/PfjA7gEtPMH92hgq5HH+OZe0LAgwlHJa8FvinYjoFyztuKGkv3Nl9
gc8QnzwkOZRP47P6sQkjmcBMchqxFYKZbgaj63hvpBrzHN7ZvmA8p1JF9apg
PswvjyeYPz3L5TNa4nVZJzzJOC8QfqSf43UhvyMVgDTOSMDmbHOX1t0m55Mh
xmdJkDPGn6A72hnmjyjMRJw3Ka0RYEY8J5iT38hn5eA5fOqW6yp4dk3aYZKB
EAmCNCibvPGnkGdg9ELEPFNNnIZzLWCec3NyXHKGmGGYvqCaDHd/H7HnNETb
/CGgmovze4jnVCDVIs8J5lB+H4tB9Xp4PtidGmCbxwvuGSoDzBxyRrUAPJNx
zrlrLWitIMzcLOVd3lm2E9AeJ5g/pgYjKfOG7P4AyZJtBsm692VxhmZjgDmv
OB/PkGoIdi1Cu0PukM+EDGPCpQkgTSHn0j2+iK+5S9EL0k/N5PgbonMbf4kV
AwwZ3mw2HOPRKkdljk0wyfnWNrTNozjnc9NgBjyP4jzK9TsSzIzn8CkAewJC
u6Du8H9taeA5zSOhGs544OGMlIw6wBvquazto8JDGkWq8zuKC8KHowmKDTDG
UIdzQwnj5JYjxvCOdnroKN/ahrb5lOc0NkqmLsOMzcYGhAYz5HkoW4pq8yGL
g3fwR/W64e7JR0ydyAX34xtawcAgzqnOi55cQbS0FpRN3CfMS4inDb7aJicu
MsYJYNFgxFaE5w/UnIaQ1pDEOZuNd6I4I6RLMIcXd2NxUr0sfmuAuUs88wLy
VIKUkYu1grqImSqeoivQS67ArinCuUlLNZmK+BqY5CjFzGDAJ0Ijzx8UYCZp
DSfM0ELHhgrPBOZtCZ/eLeRDrizM92+gApBOM47m/c8IdblgokSRt9cCWg7a
dUHRXiS8ip3IX+3+DWQn4M1rkeT0eDPZ/cHnNBw5DZVn3TknqinMdwWYYRHB
XorAwxvmMcIX/NONWO7T0k+uDPkAA6FdUD/RuhjLgd+MkxoWlhLxEuKlZzj5
+0LWIjfkGOMkxijLp2n354GZpzVscRadBpRrD8+iD1kEwpWQPER8yBldVW+k
gniWaC/Qon+kiqeJK2xl9E+Ong93/wbyEswYy8/Ikbt+FGYkyxsQMsnSNjA3
EWHWnfP2xRYnQq8B88Bzmv35KK4CZvicBrwLkCSIX2111AEqirbbSNcuh5Rn
Fj+lRz8lfnj4UtJXQyIMMY6tQPpihJkaDLL125DdH7m1LTmN3NABM1Tm2Gq/
PK8C5g7dPQmF3AUgEwoLUTC25U/MW8Le23V7OajNwa1ALrlUeyXhRafKv6CY
grsXGU6avAG+QoRZ2P2R544yydQ5I4U3c3SizYBg2zB384C8PcZsHGdH4nm4
YrIrKVIkbcYl1HNbkSVyV13MgGniObBKbm1LR3RqL1y81BXTZDI1yZTn91Dh
spxbCTC/YWwDYytRnO9atjkfManWtizNc3qxirsndLJyoUhz66ijLqCSCqPR
Ek9dXUVc00HlQ5OVSC5JsjFGJKMUHHzyswQzebx5E3d/jkc1/kB3fzbMotOA
VPOsnfHnZQil2jtGhb1F+F7vnwoFmUMMdprZe9LlWKJdo9rDm7oiHM1F1ZXl
9x79mgxm6igIw5nqUYc1kuETzvlY7uc0ULLODXMod0IZGjrFmVAqvmM33/ef
IICSEqYJUd1LEOU8zbUiX2AtmO7FuRYs8fQvJbGC56okemOegnsP2YnMM8MY
P66flTk25DwrMA/KvJFyGpTnO7TE7RIGr0iLwXOxh/2AHRN07EKZL5fvC5An
1BHtIs8mLejNonhiOG2YOa7kiMK5hW+BcYVe4n02MkY+md8ioRkM+ddP6E1t
ieTM813kNHJDCDMjWYS5q/m972k8w2o7Ajt8r3fZvvtdZcoU2inVprDLAqhp
u0c8jUuD2dAQXvHedG6lGWMln5ypfofALP/iSVLm2JDDfFeAWTDJEsmZZwkz
G8Kq155YFuzwpaBuMKqFKdMFCs51/lRARaCdrwhxgYgVxNVks4oecjOSEnwJ
i2tf+z1WLMj5iBBmRnLmWbz3d7cM82CPk0nmYE94eIN8tBTPsOF8sCnPWE/i
jCgSJE8oEDGZB5gsIh/By/r70Ofo4sn4lCuIlxVlGaIK5nfPQyQaY5pPVk0y
v/EnazLY/ak838kww0LAruX5Ng6DwPlYVvcAbwUKAy4hrU2ZdrWF1pF8BBN0
uodRl0PJBRXbatYXnrD11Zj28oHaoF0eTsQxL4HAVh775I/JDYFgxvRqNiMe
UWdpModL9QC7cvUGbwWKPL+DZkQE2+A8f8ovzeTuyWjdNeWnKwJquwgbRlrD
0rMSRQuhfnf0WyRC1sLKJzOTTGFWsnBDQmN47YR5stmo5XCRflJvFtgJ5jiY
14VCZ8ScL4NnfteAfOpzMhkwx1ogzTnVNqsdecitwkhwk6wbY8cDciLJEGZo
lWNDB8/G8/wL8ryLxIUKds8zVwk84DLnkGqPthPgNUg8yp9nLUm0u7m8mhzN
AZzKt2PPDlHVFWE2U3BZdfX7I2FaFS9h8fz2G8NvFIq8rVOfxf7hVwgrFD8H
TlOa2j4F0D5OVubcnG5BvoSaJdhEs1rlgoS2vpOXzlnITogAp0Hmo62l4LTn
iAZWRZihMiOq386FPEfH93cL8rZIV54D5UuVRLU15my+8phrwm5Kt0/6LFdf
uDQon8qrydZe/pCbYSSYncgNJYyte9Mgk2zDTJ3G2+A5DQazCsZCmC3STzFO
+uephqsVAvuuOeAO1O2JVrQrMj82NGkcDJJu6f0wW6upfGFSvURBe8fR45Lr
edYCeomCOAM1Rtvn0i8M1kII6xOp3yvPaQQY2Eh/xNEuzZe8IpQLsXhdFqqR
lEhVW9MJ+NvS5iQbvISXoGOu4JpyGkSKBzVGMGOei38NDLqOolaTCrzyHiwH
gpkVoticak1VBt8CZ1ME26/8lC6S0zBh08isXk3uC5O1kB2jhzREn50Es5BJ
1mB+W3XOPEQLrQFJRJj7cKPtUmHDDK1XPrc7mWoL5qLxK2qXVKFC+lgFAlhV
8wmLMY0AF4GCFLjzEhtoMzCoua0Nsy9N52fSXgK74nm81qhfWc9YEqppHc98
wb99Zy+HWunzwTanOV2M7uWcDypWMDdx4lAPExfmQsF1qKCBXfwDMoQ9595Q
rEBEu4ZUR0Dv1G9yxe8rcC76EJIFEvfUkHboe/XfYrNRny59Ol1VPbgWY/HQ
viuj6CWcMHPFjj++VU5riEB2K9TnBPNb6ve1r1OwQgIbzpE6Wfy+NpmpGpi9
0mc2F8GuWk3qgjJZtalG70uDvxmchmOCcnnr2rYMbZ22WXzHyXPn+MWrZSLC
fA2UN1LRLk+FsVLA9iuP0zHS5pWqa+CaGhaa60+peb6g5iUgvR4xGWBWZupa
/+Y1PMWo1PIswjkhyJ5xkWAw0xJGYwQ7cl6CWQNbXQtLaVf9ithdc89iRD0o
2zc/z7Rtnj42rSlHNwnmBWPx/sPX+Z0NM/oRvpMJT0WX7ryi3csBfSo5cz8t
Il21zWuXg3Bcx6VNA9uEWZ47Ml8UZl/OeVneeP8LHAJ+oy3MYtGWNqBaqyDQ
7lbs4lxvNhtkucXmOmyQrqI423CiCqWvIJLp4Rk2D9wOZRzhAENhCqgKOWHe
ibmVjjK3C/BdwtdUeKYf+Ze/ou18MEXFLs81yO/ZwjVH9+weim3t9eg4+rXo
e80xd/KszZc/4by7WIrnk1Gc89e0eeafKibEgpld7NKk9POC9qGah8kpER2t
et2rWw4eLN0L6prmFmxQq2AWF8VKeJ57oAFmCdHEcBlmpfnG9iEkQYcHGfkQ
bZqE5kIeplZ4q5rzCpzqDGoJVy6bTp5vw4c0ijCz+TqsbV72QOG7/O81VCSq
q3hWeyjQKM/UqNh681HeRfExSLBRMQjx6960E4ANiz2QwcnH9c2RzfPiMBez
0HM6F2AGZRgHPj4VPsRcF3JzNtdDcw62E5UK4arH0tnDhNXkX1BhTHQxmQzz
Illlsc/0Gr7P36wNG+bIMxDt2lVPKpDhrWsO5tdlRSRaCBszm1f1oJFZvSTZ
KGkwO6nep9Mgd0yW5bkOZvy+Z9UbFTw9eJpnAZHk3VBUp+7Naa71ABvGFzWD
QMbNAzNti9Oz+3QapFuN52nHjd+uEmaBasl7e2i3qfbQnppzsP0nIFdw7KEW
WZJzmlfBnEt6fPFAd0+W1GeYOQdYToCZgG01L40zn1kPjWJzWbEdzSefgEam
swcD7GIPKadRwTMQ54356NHuchqL8UyeBQV+gzBp8yx+CnsoN9c1pxZmEctN
SmL7VWuhE6hdDmJzJ8zid3f10E+E9sdCF98D8kPYh/OeAIH5t9diKVoIt3RX
92BiWUWjCIYo13YPxROwe9hD806zzWD87SnIPE9FbqdBto1qJJ4TybAA2IwB
cbJKe4C3TjxORnGnft0jYKCUSE0P0xaU0dzZg9q8H6Uw16VhtIfaD7P4eqfh
PZABc1/ICPAxqZXuPC/w3kd9D64npnw2wDbY4goiPTiXg0ZmoQdpb0KGxQOz
0dwPc6f84uquw3k4G2bOMxkTr7TyAjbUBs9W/9N6MLmqtSKG3qLmpmAWx1Ab
h9Q8XmIqeyBHr+JZ+2h3UTgQN8wazNhOV02HZ5CNTmyYk1GZ2AOoIMpdtiIz
vkLVIEwbxpzQqFwO8FPjb+xzkA7Fs3os/DhoHA0DZuaoySiJ41mrGLwTQ9tz
0XuYdgKkh6zYy34FqYIIdrGHdG7aupB7wGNY9Zdv98MzcTUemKFEE6plmH9r
jRIcz6K0ag7B38NGMd5FwSxyIjbnYBuC7DkBoxPY1iPO9vkLPbh//USjaA/+
2b4uoND3gIlqm+ciKra0bhymV+3EnRKxiZrcQ6J61+dQbF60Q/YYIlnzEbW3
ELec2vl49oBEros7RD5NwnSMDPuVU5wR5wnstAfbhyx7DiLYHm8P2+bKPnE+
IMydYmmm8QwxFqn20yjOZhVL4oTWngDpYcIJGD2IYBd7mDMOfp5JBb4u1inO
JCDP+azgqvwfF8wi1dNgEAezqrm2B6zogSExpwdbsXd6DpupCTp+Alpa4+Aw
l/WZ7AEVpEWeqQmZQaPdidU5fmZG68Q5y/N7MLB0WpHJ55CWzPTB7Ms6nUYK
yz9Ds7QleSg1MOdP9Xn0wJzUVezE7mHDdpGkkwmStVQPEPIi2KQTjmWRZ7GH
RWDuVsOzGJlwgPRJAtsNM+S5mgQ9pwGncloPnUOpiic5vwcRSxHsaT0YME/4
FgbPa4a5g7d4oP/s4wRn7VzizG4UOsfQw8kiPdi0OHswgJnZg8eK2Oti+lA4
7p50R8JzZ+Y64h+N8WU8dsFS+lTop34PKJ5JrfDyTub3AOt4rAjpwQ+z0EMp
R5d1b93BTbUY2YTUiLM2gDNJyBOBZ4E2FJ8Xks5kwgks1UmxB0i13YM/4Wyc
Q3e0TmMICLPnhDnVHnEW3p+cXhOffzuxHgpFPPsfgatccc5LzLQeij7kNvzL
MFNPIw+mgsqS5O0snBINI1GNYJZ4VgcQJNbs+9rFhy3zPNbD3OEH6cXK8U0H
JBpRftk0mBzeFMEmTsPuwS5HLc4wJlON5LoG5pSRkCfRJ6220jphNjqZ0EPu
pEacRamEiJIKt0F4evCcxpWBGcZ0ua5UA20KFmEpqe6EHjyy7zlJ1EPNONhY
crDtToo9XG2eU8ykujhN9E0Rg0kgaXI9rQebWM9Jyp3ULHyDSf820KaawIz0
fwYVa4tauc4mxC/OVRj8Lv4ilZN2jcmq9SJ2UuyhrhPfwudMeniGFUSwncq8
2qzdBFMxDewJMIsYJJJzyfXf4EUEmHTrR1HsZPIVJHVi9WCqN2TSSHrY+g+p
9vBclQfbZ4gn6W87Ua55rliYx4SiwGccf3hfWyJZ64H2g973omgobVUPEzuR
mCzqs/wp2JJXwTyBmV3HIuc20V0nGhV1NVAMJaX49DqFHsYKRj96DxQzA0i/
emtgO/1M2g9qSm7AbDyxL9pmzVQfNhZcaxXfDqrBQjTyyuEd8q9lsQLrxE60
Cr6T5EDONzP+Tm5rf8LLkS+d9usnq4K52821o0w1HsMo15NgzoUBWeRZrJAx
mNoD7cc0MzarHh8Ce4A8W51oOQ3pUQ17Kl8HnlNvlmLj5/e6ZEKKMMProw3S
VBQNua7qQT0ZuirLrNpUc3Gu7kT/9ZMFkdhP7NoFVfWfH+EzYd4MxrtEkYac
34oY/VQtGbEf9KPi0onr4Eza4swvAWInV/vuyY6ilmrBXTtgFkGag6LYz2T9
h/1UdMK8VgKyyLOmybCTKyPO+48Jch3ntOQ0DEigPM6xIk4zUzyKpx+nI0rX
Ms08F/1Mg3mRmCDXm5RtnsfAHBQ9NPoPMccUkU7CYL4l7poZxuA+VHMay4Y3
jQlTfPNQ5P/e5bR/ClbrZ4J68wUyoZPb6W8t8grahlr59ZMG8/woDCNL8VXA
XPqHXP0wa3VgPxUrQr98TLiIRH0ubocr7560mBOuFF8/CycYbDp3Nf8ENgKg
HmZbrqddAib4mcSzpvkE5sbzPmNKim8piqb2kOoY/UzwM7SOg2fiOjLYYPeh
3UDZwWS2iOFPhmS53hFFU/9Z+fl+hvQjd6LzLILdYD5sQKrtYRepnqDeLop8
h0j97NTPhGHhnSh2pTmNNUStXNeheEcuESHlU1itWCF3VQ8zQZpXlnmWSstp
rC2cYNsmxMkhRFGr7IG5uECEN03gCdgDz55F0cR5tVEn17NRFGmcpt5kgVR3
wsAe8s8N5isQ1XI9FWaRxsmdiGBP62Rb8v2UerOxs5lpMSsI1dpMJarnU7QI
ikU/4+TZOqUmzkcbTrmO2/wqDu/SEurcBRqrVDBK0c94YIY8o37S3ZM7GWbP
km+xwphmQhK3LhTZO/DNYg9aHbhAYoUamGPR7wbyJe/PHbU4bFS56zpd1T8y
FLtWvYv9DJtBm2fbaTTFPsaok+u71+3SM1aoMKJod+IC3qA68mz0c6diG9h4
Pq6olOuJMMM6GtjuTiy5Hl7bPPO72w3mqxcQ7EImxMnh73MJdX5/nZSIol6B
17fFPwFf5pl9d3FAFh/kFs64DYK8M60ro0I2IT4U7QpZY2d0QrrqeebYN5iP
Jsj4z9/ReJYDpHoOikMFm2qvgPcv4s1BVoHkNLTBuY1jwui1mBOiOMNP53du
VCByPYdDjeraTsIJS8p/wmxzw3WFweldPOM0Wa6nGQmCYm0nA8+kt3Zr+xhj
RzzD3vxyLXD4B1pCHfYm/NSukDvRedbEecFhabFg7EGf+RGLih0lscihg9Us
175Owlnhd5o4H1dwuvaznfGakBkwF+Va5hne3WY8N5hbGFFcO9mE1PBsCHIC
W6xDeG4wt5gWTrCnibMGts0zvBvYUnAtpoVXrt+5rpUAqv4prJPlenw/HHp8
3cS5xVLhletJPPMKierEc4O5xS7CBpvLtV+caendRfQbjecWuwy/XE8QZ85z
g7nFfsKTuC676z9eF8oAc/+aP63RosXuwivXDFoV5r4MPDdxbnGoqKW6iueW
oGtxkHDuGXuYT42y7aGJc4v1hAdsP88N5hYrCVeK793TUNLd7SH5DHrY18m2
aOGKolyTRzUazy2OIlSqT1CkOg3mFusPQa6xRN/GT4C3Z5BaHEVkSsE9wdsg
uvaXjlocWxCAO2xLGs8tjjSKmtx4bnF0Qaxy47nFVYrGc4srFi2/0aJFixa7
CGIYuD1u2tviWMLOvDVv3OKIgt/m0z7qGs8tjiQazy2uUjSeW1ylaDy3uErR
8hstWrRo0aJFixYtWrSYEP8P4ZkqJQ==
    "], {{0, 197}, {240, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{240, 197},
  PlotRange->{{0, 240}, {0, 197}}]], "Output",
 ImageSize->{244, 197},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellTags->"RasterizedOutput",
 CellLabel->"Out[5]=",
 CellID->621895525]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell["\t", "ExampleDelimiter"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->616353932],

Cell[TextData[{
 "Fit a model for the rate of isomerization of ",
 Cell[BoxData[
  StyleBox["n", "TI"]], "InlineFormula"],
 "-pentane to isopentane with experimental data:"
}], "ExampleText",
 CellID->370945209],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<ExampleData/isomerization.dat\>\"", ",", "\"\<Table\>\"", ",", 
     RowBox[{"\"\<HeaderLines\>\"", "\[Rule]", "7"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->448973570],

Cell[TextData[{
 "Nonlinear model for rate as a function of hydrogen ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    SubscriptBox["x", "1"], ")"}], TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  StyleBox["n", "TI"]], "InlineFormula"],
 "-pentane ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    SubscriptBox["x", "2"], ")"}], TraditionalForm]], "InlineMath"],
 ", and isopentane ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    SubscriptBox["x", "3"], ")"}], TraditionalForm]], "InlineMath"],
 ":"
}], "ExampleText",
 CellID->558097503],

Cell[BoxData[
 RowBox[{
  RowBox[{"model", "=", 
   RowBox[{
    SubscriptBox["\[Theta]", "1"], " ", 
    SubscriptBox["\[Theta]", "3"], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["x", "2"], "-", 
       RowBox[{
        SubscriptBox["x", "3"], "/", "1.632"}]}], ")"}], "/", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{
        SubscriptBox["\[Theta]", "2"], 
        SubscriptBox["x", "1"]}], "+", 
       RowBox[{
        SubscriptBox["\[Theta]", "3"], 
        SubscriptBox["x", "2"]}], "+", 
       RowBox[{
        SubscriptBox["\[Theta]", "4"], 
        SubscriptBox["x", "3"]}]}], ")"}]}]}]}], ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->560143462],

Cell[TextData[{
 "Find the parameters ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Theta]", "i"], TraditionalForm]], "InlineMath"],
 " that best fit the data starting with values having the right size:"
}], "ExampleText",
 CellID->202452456],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindFit", "[", 
  RowBox[{"data", ",", "model", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["\[Theta]", "1"], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["\[Theta]", "2"], ",", ".1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["\[Theta]", "3"], ",", ".1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["\[Theta]", "4"], ",", ".1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["x", "1"], ",", 
     SubscriptBox["x", "2"], ",", 
     SubscriptBox["x", "3"]}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->280600424],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SubscriptBox["\[Theta]", "1"], "\[Rule]", "36.02765870064032`"}], ",", 
   RowBox[{
    SubscriptBox["\[Theta]", "2"], "\[Rule]", "0.08154214884427477`"}], ",", 
   RowBox[{
    SubscriptBox["\[Theta]", "3"], "\[Rule]", "0.04296370785635613`"}], ",", 
   RowBox[{
    SubscriptBox["\[Theta]", "4"], "\[Rule]", "0.19268114013450702`"}]}], 
  "}"}]], "Output",
 ImageSize->{402, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->1307596980]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Differential Equations",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(2)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->89447407],

Cell["\<\
Find parameters in a differential equation model that gives the best fit:\
\>", "ExampleText",
 CellID->759987326],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"sol", "=", 
   RowBox[{"First", "[", 
    RowBox[{"x", "/.", 
     RowBox[{"NDSolve", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"x", "''"}], "[", "t", "]"}], "+", 
           RowBox[{".33", " ", 
            RowBox[{
             RowBox[{"x", "'"}], "[", "t", "]"}]}], "+", 
           RowBox[{".72", 
            RowBox[{
             RowBox[{"x", "[", "t", "]"}], "^", "3"}]}]}], "\[Equal]", "0"}], 
         ",", 
         RowBox[{
          RowBox[{"x", "[", "0", "]"}], "\[Equal]", "2"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"x", "'"}], "[", "0", "]"}], "\[Equal]", "0"}]}], "}"}], 
       ",", "x", ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "20"}], "}"}]}], "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"times", "=", 
   RowBox[{"N", "[", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"0", ",", "100"}], "]"}], "/", "5"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{"times", ",", 
      RowBox[{
       RowBox[{"sol", "[", "times", "]"}], "+", 
       RowBox[{"RandomReal", "[", 
        RowBox[{".1", ",", "101"}], "]"}]}]}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{"lp", "=", 
  RowBox[{"ListPlot", "[", 
   RowBox[{"data", ",", 
    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}]}], "Input",
 CellLabel->"In[1]:=",
 CellID->185936742],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
    AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJw10wlQE2cUAOA0NAgqGIUQrtJwJhxCDihX6z5sSqUgFKZ4MGgLNDhaYqaD
WmwrilCkgLRjKwmUU6G2TOKA2IBSJ2AFqkSOIFjCIZGryDFBbrla5PFmdnZ2
9r3v3/3f/6yjRWECMolEEvx/rd83Qxw3EOPPJEFuzno8JP7xYza031sjNp67
iNYxRoVH0iuC9zoGiCDKMaOOpBl8P0q81KS6k+NfEBualpBH3Kim96kxf5rg
X22qSheXErGvY47wqLFg2QS3KTbqF4nx8h3dycIBxWPleiwTyuh9pWFmEwr8
PLgz6LSXGjuN+W+A6vzZJUvRnGLD14HPTiZ7jTPnsf5NqLyYmGDeO6fYWE8X
FBXa4ZqiWfT0oOEH2xZ9yaanD4Gnphk+9pPobYOqmANOC9JR9LbD/mn5fp3O
fvQMQXWkLEQe0oYeFc74+wKDcgfzqeDZ6Gt4aVKO+7MTZg9+m2cqbMb/3wXZ
3BKTTEkP7o8R+J5KnrG2GMT9M4bIlL9p9TtGiA3PGG7v/VdTOjGGHg3cV2or
o2Yn0DMB58VonfgSLXp0iFRm0Dx2vkTPFH4XBneaF0yhZwpryYUdaZe16JmB
5qPRsMJPteiZA0vAyajfMomeBfCnxGOJtePoWQK1UC3QJm5+nyXwVSGel+hD
6L0F8l++N8w8rEHPCrYepB/dbtWH3tuQ0DAfLnnRiR4DVnNCWYojTzCfAXBC
Jz+vtB59Bgw3Ozws9avDemuIyUopWDtzE9ezhnIbiYXU8Rb2wwYy7+2xky1W
Yb9sIN1HHZWkrcH+2EDxrSLnD39swX7bgp1XTcv7vyrxPNgCxaC9xoqrQs8O
lNP6jMnaDvTsIK4xS/fxcTV6dhDkEnp5mdyDnj1EBLcvGy51oWcPsUE/RXrP
9KLnAPDIIP568eZ5coBvfjudP6fTj54DXA98JqCf0KDHBDOhdJevqwY9Juir
sxcHZH3osaBHN+ts6tY+9Fgg73BRxN/vQ48FJlHitXa3bvQcofyZ54NlZTd6
jkCdiHovf1iNnhMk3GaIvh57ip4TFK1UL5xO60bPCch+q96TPk/Rcwa2eZU4
fPUJes5AdhamrDS1o+cCbUzfKWNJM3ouoNcSqI640IqeC3DvKowPfaFEbzd0
vpvGOMlvQm83ULZ59CSp7qPnCocKhq74MOrQc4UPzieosjvr0XOF1OajRgcC
HqDnBnzKvjpt9V/ouYH/J8nzebp/oscGk8aYUFFbLeazgZ6aMFw2I0efDfnH
WQG9ReVYzwalfpewhJaD67Eh8Yqet2egFD0O1PYz8g+PSdHjAItyc0k0cAE9
DrjnWm+JSBOjxwHSxeD8PwSfo8cB6RJfPL5HgvPBha8cI8Jc3snF88+F8ij+
wjFRBnpcGJRdi0s/V4bzwAUq6buKpUoZzg8XKLLnI7RmOXo8+HLi1Yih/1X0
eOAjCqU9ZxTj/PHgnOxnldfa5nzxwHzuUSb54wr0eNAacNdgqOIaeu4QXlzs
kep3g/gPLmbQng==
     "]]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{0, 20.}, {-1.4472467620425036`, 2.0191772273806907`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 ImageSize->{244, 137},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[1]=",
 CellID->1297094092]
}, Open  ]],

Cell[TextData[{
 "Define a model so the solution for a set of parameters ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"\[Gamma]", ",", "a", ",", "b"}], ")"}], TraditionalForm]], 
  "InlineMath"],
 " is reused for all ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]], "InlineMath"],
 " values:"
}], "ExampleText",
 CellID->246277593],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"model", "[", 
    RowBox[{
     RowBox[{"\[Gamma]_", "?", "NumberQ"}], ",", 
     RowBox[{"a_", "?", "NumberQ"}], ",", 
     RowBox[{"b_", "?", "NumberQ"}]}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"model", "[", 
      RowBox[{"\[Gamma]", ",", "a", ",", "b"}], "]"}], "=", 
     RowBox[{"First", "[", 
      RowBox[{"x", "/.", 
       RowBox[{"NDSolve", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"x", "''"}], "[", "t", "]"}], "+", 
             RowBox[{"\[Gamma]", " ", 
              RowBox[{
               RowBox[{"x", "'"}], "[", "t", "]"}]}], "+", 
             RowBox[{"a", " ", 
              RowBox[{"x", "[", "t", "]"}]}], "+", 
             RowBox[{"b", " ", 
              RowBox[{
               RowBox[{"x", "[", "t", "]"}], "^", "3"}]}]}], "\[Equal]", 
            "0"}], ",", 
           RowBox[{
            RowBox[{"x", "[", "0", "]"}], "\[Equal]", "2"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"x", "'"}], "[", "0", "]"}], "\[Equal]", "0"}]}], "}"}], 
         ",", "x", ",", 
         RowBox[{"{", 
          RowBox[{"t", ",", "20"}], "}"}]}], "]"}]}], "]"}]}], ")"}]}], 
  ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->19020788],

Cell["\<\
Find the fit with tolerance appropriate to the precision of the solutions of \
the ODE:\
\>", "ExampleText",
 CellID->619280420],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fit", "=", 
  RowBox[{"FindFit", "[", 
   RowBox[{"data", ",", 
    RowBox[{
     RowBox[{"model", "[", 
      RowBox[{"\[Gamma]", ",", "a", ",", "b"}], "]"}], "[", "x", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\[Gamma]", ",", ".1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"a", ",", ".1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"b", ",", "1"}], "}"}]}], "}"}], ",", "x", ",", 
    RowBox[{"PrecisionGoal", "\[Rule]", "4"}], ",", 
    RowBox[{"AccuracyGoal", "\[Rule]", "4"}]}], "]"}]}]], "Input",
 CellLabel->"In[3]:=",
 CellID->145117175],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[Gamma]", "\[Rule]", "0.3412583425259562`"}], ",", 
   RowBox[{"a", "\[Rule]", "0.03614031816731029`"}], ",", 
   RowBox[{"b", "\[Rule]", "0.7122543575449424`"}]}], "}"}]], "Output",
 ImageSize->{288, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->1591952011]
}, Open  ]],

Cell["Show the fitted model with the data and the residuals:", "ExampleText",
 CellID->240791162],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"Plot", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"model", "[", 
          RowBox[{"\[Gamma]", ",", "a", ",", "b"}], "]"}], "[", "x", "]"}], "/.",
         "fit"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", "20"}], "}"}]}], "]"}], ",", "lp"}], 
    "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"Transpose", "[", 
     RowBox[{"{", 
      RowBox[{"times", ",", 
       RowBox[{
        RowBox[{"data", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "2"}], "]"}], "]"}], "-", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", 
            RowBox[{"\[Gamma]", ",", "a", ",", "b"}], "]"}], "[", "times", 
           "]"}], "/.", "fit"}], ")"}]}]}], "}"}], "]"}], "]"}]}], 
  "}"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->639620771],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
hP8BD2493A==
    "], {{0, 67}, {265, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{265, 67},
  PlotRange->{{0, 265}, {0, 67}}]], "Output",
 ImageSize->{269, 67},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellTags->"RasterizedOutput",
 CellLabel->"Out[4]=",
 CellID->8679149]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell["\t", "ExampleDelimiter"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->5874383],

Cell["\<\
Find how a nonsoliton initial condition for the KdV equation breaks down into \
two solitons:\
\>", "ExampleText",
 CellID->283959408],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"xl", "=", "25"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"tend", "=", "15"}], ";"}], "\n", 
 RowBox[{"sol", "=", 
  RowBox[{"First", "[", 
   RowBox[{"u", "/.", 
    RowBox[{"NDSolve", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"D", "[", 
           RowBox[{
            RowBox[{"u", "[", 
             RowBox[{"t", ",", "x"}], "]"}], ",", "t"}], "]"}], "+", 
          RowBox[{"D", "[", 
           RowBox[{
            RowBox[{"u", "[", 
             RowBox[{"t", ",", "x"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", "3"}], "}"}]}], "]"}], "+", 
          RowBox[{"3", " ", 
           RowBox[{"u", "[", 
            RowBox[{"t", ",", "x"}], "]"}], " ", 
           RowBox[{"D", "[", 
            RowBox[{
             RowBox[{"u", "[", 
              RowBox[{"t", ",", "x"}], "]"}], ",", "x"}], "]"}]}]}], 
         "\[Equal]", "0"}], ",", 
        RowBox[{
         RowBox[{"u", "[", 
          RowBox[{"0", ",", "x"}], "]"}], "\[Equal]", 
         RowBox[{"3", " ", 
          RowBox[{
           RowBox[{"Sech", "[", 
            RowBox[{"x", "/", "2"}], "]"}], "^", "2"}]}]}], ",", 
        RowBox[{
         RowBox[{"u", "[", 
          RowBox[{"t", ",", 
           RowBox[{"-", "xl"}]}], "]"}], "\[Equal]", 
         RowBox[{"u", "[", 
          RowBox[{"t", ",", 
           RowBox[{"3", " ", "xl"}]}], "]"}]}]}], "}"}], ",", "u", ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", "tend"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "xl"}], ",", 
        RowBox[{"3", "xl"}]}], "}"}], ",", 
      RowBox[{"Method", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<MethodOfLines\>\"", ",", 
         RowBox[{"\"\<SpatialDiscretization\>\"", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<TensorProductGrid\>\"", ",", 
            RowBox[{
            "\"\<DifferenceOrder\>\"", "\[Rule]", 
             "\"\<Pseudospectral\>\""}]}], "}"}]}]}], "}"}]}]}], "]"}]}], 
   "]"}]}]}], "Input",
 CellLabel->"In[1]:=",
 CellID->499266246],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["InterpolatingFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 GrayLevel[0.6], 
                 AbsolutePointSize[5], 
                 PointBox[{1, 1}], 
                 PointBox[{2, 4}], 
                 PointBox[{3, 2}], 
                 PointBox[{4, 3}]}, {{}, {}, {
                  AbsoluteThickness[1], 
                  Opacity[1.], 
                  LineBox[CompressedData["
1:eJwBMQPO/CFib1JlAgAAADIAAAACAAAA4ScLwZmZ6T/ACPskWpOYv4AjHgZ5
3Os/cnpQh5xu1j/qWn1XCVDuP5K7ih5ptuc/r+pongFN8D/CUK87BHLxP46d
cUQ/bPE/ujUa8/qu9j9TbqBw1aPyP/TWyyAhFfw/neDJZqDG8z+QAqdF9GsA
QM1wGePDAfU/VsVD/9nXAkCidscSKDf2P6Bp73exDQVA/B1wDMFX9z+TpM3k
wfUGQDzjPoyykPg/7M3Z+O7ZCEABSgjW2LT5P3pl9LwNcgpAbCYw0z/T+j86
ypori9cLQL0gflb/Cfw/lpOs9xIqDUCTvMaj8yv9Pw4alcoYNg5AT3Y1d0Bm
/j+pB2LLtyIPQLClAv7Nmv8/NnA5bbjSD0BLO2UnSF0AQFrcILXmpw9AsTLc
klX5AED+sDHBQukOQNp6UGP9igFAbZ+lR/sLDkD10dd20SgCQNHi3Mj38wxA
42MO5MXDAkAZdr6AZb8LQJRGQrZUVANArv7zEMKHCkA4OInLD/EDQLBlMO3M
IglAnnrNRWWDBEA3d8OX6skHQNf3wBnbEgVAD3D3ndNyBkADhMcwfa4FQHOK
7Wak/wRA8WDLrLk/BkC/MhCgYawDQNJM4msi3QZAwss/TmVLAkCGc6iEq3cH
QIsIg92+BgFA/OprAs8HCECrPCvgePD/P2VxQsMepAhAKXVLE0Xg/j+RSBbp
CDYJQPRz0a7WJ/4/kFqZaBPFCUDN4sX5uLj9P4J7LytKYApAvh1MbRmT/T82
7cJSG/EKQHzT1YZwwv0/3W1pvRiOC0B2LZ/10lT+P0c/DY2wIAxAVrX8MJA7
/z+DS2C2aLAMQElWzbMzPQBAsmbGIk1MDUCi9bAadCABQKTSKfTL3Q1AYexd
q+EpAkCJTaAId3sOQFyS/ndEhgNAQAPGdkIWD0BHWcLdahwFQLoJ6Umopg9A
vd1CiejSBkCTjw8wnSEQQPiVkXD08QhAq0KpbbNqEEBsk2Azxi4LQCyTGthZ
shBAYCBYjj+gDUAnaxVkFgARQMwfdA9ySBBAg+uOIqBIEUBj/5rHgMsRQNFn
q5SZmRFAL++xNeOlE0Dwt3AR
                   "]]}}}, AspectRatio -> 1, Axes -> False, Background -> 
               GrayLevel[0.93], Frame -> True, FrameStyle -> Directive[
                 GrayLevel[0.7], 
                 Thickness[Tiny]], FrameTicks -> None, 
               ImageSize -> {Automatic, 
                 Dynamic[
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])]}, PlotRange -> {{0, 5}, {0, 5}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "15.`"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "25.`"}], ",", "75.`"}], "}"}]}], "}"}], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"scalar\"", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 GrayLevel[0.6], 
                 AbsolutePointSize[5], 
                 PointBox[{1, 1}], 
                 PointBox[{2, 4}], 
                 PointBox[{3, 2}], 
                 PointBox[{4, 3}]}, {{}, {}, {
                  AbsoluteThickness[1], 
                  Opacity[1.], 
                  LineBox[CompressedData["
1:eJwBMQPO/CFib1JlAgAAADIAAAACAAAA4ScLwZmZ6T/ACPskWpOYv4AjHgZ5
3Os/cnpQh5xu1j/qWn1XCVDuP5K7ih5ptuc/r+pongFN8D/CUK87BHLxP46d
cUQ/bPE/ujUa8/qu9j9TbqBw1aPyP/TWyyAhFfw/neDJZqDG8z+QAqdF9GsA
QM1wGePDAfU/VsVD/9nXAkCidscSKDf2P6Bp73exDQVA/B1wDMFX9z+TpM3k
wfUGQDzjPoyykPg/7M3Z+O7ZCEABSgjW2LT5P3pl9LwNcgpAbCYw0z/T+j86
ypori9cLQL0gflb/Cfw/lpOs9xIqDUCTvMaj8yv9Pw4alcoYNg5AT3Y1d0Bm
/j+pB2LLtyIPQLClAv7Nmv8/NnA5bbjSD0BLO2UnSF0AQFrcILXmpw9AsTLc
klX5AED+sDHBQukOQNp6UGP9igFAbZ+lR/sLDkD10dd20SgCQNHi3Mj38wxA
42MO5MXDAkAZdr6AZb8LQJRGQrZUVANArv7zEMKHCkA4OInLD/EDQLBlMO3M
IglAnnrNRWWDBEA3d8OX6skHQNf3wBnbEgVAD3D3ndNyBkADhMcwfa4FQHOK
7Wak/wRA8WDLrLk/BkC/MhCgYawDQNJM4msi3QZAwss/TmVLAkCGc6iEq3cH
QIsIg92+BgFA/OprAs8HCECrPCvgePD/P2VxQsMepAhAKXVLE0Xg/j+RSBbp
CDYJQPRz0a7WJ/4/kFqZaBPFCUDN4sX5uLj9P4J7LytKYApAvh1MbRmT/T82
7cJSG/EKQHzT1YZwwv0/3W1pvRiOC0B2LZ/10lT+P0c/DY2wIAxAVrX8MJA7
/z+DS2C2aLAMQElWzbMzPQBAsmbGIk1MDUCi9bAadCABQKTSKfTL3Q1AYexd
q+EpAkCJTaAId3sOQFyS/ndEhgNAQAPGdkIWD0BHWcLdahwFQLoJ6Umopg9A
vd1CiejSBkCTjw8wnSEQQPiVkXD08QhAq0KpbbNqEEBsk2Azxi4LQCyTGthZ
shBAYCBYjj+gDUAnaxVkFgARQMwfdA9ySBBAg+uOIqBIEUBj/5rHgMsRQNFn
q5SZmRFAL++xNeOlE0Dwt3AR
                   "]]}}}, AspectRatio -> 1, Axes -> False, Background -> 
               GrayLevel[0.93], Frame -> True, FrameStyle -> Directive[
                 GrayLevel[0.7], 
                 Thickness[Tiny]], FrameTicks -> None, 
               ImageSize -> {Automatic, 
                 Dynamic[
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])]}, PlotRange -> {{0, 5}, {0, 5}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "15.`"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "25.`"}], ",", "75.`"}], "}"}]}], "}"}], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"scalar\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"3", ",", "6"}], "}"}], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Hermite\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"False", ",", "True"}], "}"}], "SummaryItem"]}]}},
                GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->(
    "InterpolatingFunction[{{0., 15.}, {\[Ellipsis], -25., 75., \
\[Ellipsis]}}, <>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 ImageSize->{401, 60},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[1]=",
 CellID->683098962]
}, Open  ]],

Cell["The initial wave breaks into two separate waves:", "ExampleText",
 CellID->628084645],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"sol", "[", 
    RowBox[{"t", ",", "x"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "tend"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "xl"}], ",", 
     RowBox[{"3", " ", "xl"}]}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"PlotPoints", "\[Rule]", "100"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->157219196],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvQd4FUe2NTrf+9FJffrkcyQBtu/8933v/e+9/854PDO2x+NsAzY5Z4RQ
TkhCIAmQkFAARM4554xyFiCyydHGOGDAxgEb42wc+61du7slwOZiI7Cw1Z9o
+nSorq5ae9Xau6qr/xyS0DXi//jTn/401IRV10GpzyQlDRrRrRl+PDtiWHjI
/8DGAfz7BP9oW2labm2JuHb5rbPTtDQtv35hANeHcRO2m5Z7camP2J+DbhO2
m5Z7YrkOn7cC1yZgNy2Nc7kRk78IpU2k3bQ0nuUnQfirkdmE7ablt1pugroG
QWMTtpuWu7bcHGMNjsAmbDctd275b0F1R1HXhO2mpQGXW4xd3IWcKE1Bkqbl
9pZbRM7dB1gTaTctv2j5RVD5bUHVhO2m5ebLLwVG4wFSE7abluuWX4GExgme
Jmw3Lb+u6hs/YJqA/Udbbqe67yGcNJH2H2G5zcq9R7HRhO3f5XL7tfk7wEMT
tn8fS4NU3+8MA03YvheXBqyv33G9N2H7nlgatnb+IHXdBOzGuTR4jfzRqriJ
tBvPcieq4I9crU3Y/q2WO1fmTVXJSxO279pyR0u4qfpuXJqwfeeWu1CkTbV2
k6UJ2A243J1ibKqsW1maSPt2lrtZbk0V9EuXJmz/ouUul1JTpdzO0oTtmy93
v1iaKqKhliZsX7f8JuXQVPh3YmnC9m/14H/YAr9ryx8N2L/tw/5xyvk3X/4I
pP2bP9pvnoE/5vK7xHZjeJbGkIc/+PL7wHYjyXwjyUbTwsu9iO1GldvGk5Om
5brlnqiaxpbJxpafpkVfGn/VNMIcNsIsNS1KI2vEf3JpnNlrnLn6gy8RN3x9
rFEtjdnWGm3G/rCLXiONs2oaZ670pZFn7w+4NGY8N8IsXbc0/hz+oZb61dHY
qqax5ecnl3sik3+Q5bq6aDxV05gF83XLvZLPP8LSOMm58eTkVpZ7K7e/46Vx
knMjycatL/dchn+Xy4210BjqpTHk4Zcu92Kef2fLT1bBb1sv95Bgvm65R7P9
e1oaG57vaUiwJf7pT3+6p5/i3l1+rth/q+q4p2HAmQeYlXnuP9Vb7umHujvL
zM6WnzsU+6hf3fYjfnntLbvjbPyz11/o0JIuRkUU+03K+Tepgnu63uvAPN9N
fws89IeNma4/FLDj/mXYleDYl+jA9oKe1nVBMjaqQwiuLw1x9H/IgI2Up01Y
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
4EyyzmbeKC3hVdOiPnLKa6aaLhJ9dGt9ERIWt6A/zPJgdXlfNe8t065ovaab
AqG+NUrfn2C5kWut7aNdyqR+vpjOFtolAXJ0Ew+APPGVv7dsu2M99/q+9cPU
9QxPNqSMY4Pq7WxjyDvmi5kUvWuD5eoO8poQSogZXaUJXemYiuBuUicp8TXz
5M7yAHFIzQPrCjtnhpba8EhXsTXmZdO1LAMSGlI8sylt/PG/CCfxTub689x8
Vje+Qlmbp2NUhHv9dtYP0iEhz3us7ydP6iydSuCgrq39ybfbwmhP5Bpuu5Fj
vZPLMPBQjHo+3XJtkDG8FUd6Te6u7h6gzOmjIiSs6iBvDGaTL54FUb2pnzyu
k7wmiG4DENh4G1czKLY5EenZBmcSNTeYf5/rG0cJP+K6XH9UJ7xmQrjHMYhj
nKK5gOfX68N1cOyBaKYmFveRIaHXh/AcZFekmtNcOhSrFbaUTifpCPouputJ
r3H6AHbHjSzxOsOttL0t51TN27kseD6bbnk/0u1E9ztdj0PxJ56R1Z+uNw4g
3mJfpntqTjPT7O70Xaxuaw7+L3oFR/zV46AYSHc4Tkt/0+ya6Bn3isk11Svr
LQlBIlC9IkQ7nWaZ24sGRyfSrFsitCtZ1M+lbeTKtuYLaW4w/07XNzTwz3Xm
W091vaIfJcGVbEv+O1JpaynmJRPAHCuO86o7KosDlBVh+r6BliOpNtcoT44N
neozhibYzhMplnEdpcqOysUs6/ZYi2uR34AmzD9DNl8THqFupfF7Xj87nr9+
hSfT9R8eM3rC2hJljGorQSovDVJGtZevZFuZqZvtQw+cTY3oODrJGfYXjwcF
ltTXTV/k8/TwRLya+KoJghw/5Wgcz2UgWtzk/DtfvxCeH3+p+qO6x3822BVO
e+qD0Wry6+Yd/ZVBzcxbw+Sst8z7hDvfwWgF90NCQ6KsDpKndFf3Cyfz2u7S
6lDNTc7u9Uvj+esXrH/YOK4ziy6ChZkMxXOpLfdt86YQpaq9vDNCzWtu5qTR
ZhyJ1R8h4QgGg/eG2qCf3WB2r5+e3/ihP+47d9DX62tU183OptKY4ZXBzkGv
+YHqlRzb/D40uz6fYakRrkqDm1E8F7b45mgqN57d65+26k/XNT3I1XN6yYgZ
5/dREl8zzegmbYrQobRLWkuze8i5zXnY7VYa7vVbWD80bKQD/zjH1gGcWljn
FTOli1yH58df8J/07t3Lvb5n1QeHX6MaIuR4HKcT1vZStgknxm+81C/5Tt3L
veq7HqfrJ6evsVJfN90WXa6/aCTrXu7109cPousnB5ju5V6/kVXPfIsbz+71
dK0no/rJ+sS93Ou3ub5B149/4wazez296xsAduPZvf4FVuhj69d+L+7lXu7l
Xu7lXu7lXu7lXu7lXu71c67vrGV1R3/u9TSubyflfsU3417u9VPWN4783OTs
Xv8C6zsLM9yQdq+ndH0ndN14dq+ndLn52b3+ldZ35jd+xffjXu7lXu7lXu7l
Xu7lXu7lXr/l9f8BwLBb9Q==
    "], {{0, 202}, {240, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{240, 202},
  PlotRange->{{0, 240}, {0, 202}}]], "Output",
 ImageSize->{244, 202},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellTags->"RasterizedOutput",
 CellLabel->"Out[2]=",
 CellID->797846807]
}, Open  ]],

Cell[TextData[{
 "Get the spatial grid used by ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["NDSolve"]],"paclet:ref/NDSolve"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " to solve the PDE:"
}], "ExampleText",
 CellID->365473181],

Cell[BoxData[
 RowBox[{
  RowBox[{"xg", "=", 
   RowBox[{"sol", "[", 
    RowBox[{"[", 
     RowBox[{"3", ",", "2"}], "]"}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->161037294],

Cell["The discretized solution at the final time:", "ExampleText",
 CellID->200967086],

Cell[BoxData[
 RowBox[{
  RowBox[{"dsol", "=", 
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{"xg", ",", 
      RowBox[{"sol", "[", 
       RowBox[{"tend", ",", "xg"}], "]"}]}], "}"}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->210495540],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"dsol", ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->74395396],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
    AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
Pv0/Q8EAiw==
     "]]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{-25., 75.}, {-0.0803005524324712, 4.030895346112758}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 ImageSize->{244, 155},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[5]=",
 CellID->1940464626]
}, Open  ]],

Cell["Model of two solitons with different velocities:", "ExampleText",
 CellID->381346136],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"model", "[", 
    RowBox[{"t_", ",", "x_"}], "]"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"k1", "^", "2"}], " ", 
     RowBox[{
      RowBox[{"Sech", "[", 
       RowBox[{"k1", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", "-", 
           RowBox[{
            RowBox[{"k1", "^", "2"}], " ", "t"}]}], ")"}], "/", "2"}]}], 
       "]"}], "^", "2"}]}], "+", 
    RowBox[{
     RowBox[{"k2", "^", "2"}], " ", 
     RowBox[{
      RowBox[{"Sech", "[", 
       RowBox[{"k2", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", "-", 
           RowBox[{
            RowBox[{"k2", "^", "2"}], " ", "t"}]}], ")"}], "/", "2"}]}], 
       "]"}], "^", "2"}]}]}]}], ";"}]], "Input",
 CellLabel->"In[6]:=",
 CellID->432777935],

Cell["\<\
Find fit with starting conditions estimated from the graph of the discretized \
solution:\
\>", "ExampleText",
 CellID->106690545],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fit", "=", 
  RowBox[{"FindFit", "[", 
   RowBox[{"dsol", ",", 
    RowBox[{"model", "[", 
     RowBox[{"tend", ",", "x"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"k1", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"k2", ",", "2"}], "}"}]}], "}"}], ",", "x"}], "]"}]}]], "Input",
 CellLabel->"In[7]:=",
 CellID->4291732],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"k1", "\[Rule]", "0.962695059901965`"}], ",", 
   RowBox[{"k2", "\[Rule]", "2.0162572310786584`"}]}], "}"}]], "Output",
 ImageSize->{196, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[7]=",
 CellID->824764018]
}, Open  ]],

Cell["\<\
Plots of the two-soliton model and residuals at intermediate times:\
\>", "ExampleText",
 CellID->202748041],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"ListPlot", "[", 
         RowBox[{
          RowBox[{"sol", "[", 
           RowBox[{"t", ",", "xg"}], "]"}], ",", 
          RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
          RowBox[{"DataRange", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "xl"}], ",", 
             RowBox[{"3", " ", "xl"}]}], "}"}]}]}], "]"}], ",", 
        RowBox[{"Plot", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", 
            RowBox[{"t", ",", "x"}], "]"}], "/.", "fit"}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"-", "xl"}], ",", 
            RowBox[{"3", " ", "xl"}]}], "}"}], ",", 
          RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], "]"}], ",", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"sol", "[", 
          RowBox[{"t", ",", "xg"}], "]"}], "-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"model", "[", 
            RowBox[{"t", ",", "xg"}], "]"}], "/.", "fit"}], ")"}]}], ",", 
        RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
        RowBox[{"DataRange", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "xl"}], ",", 
           RowBox[{"3", " ", "xl"}]}], "}"}]}]}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "tend", ",", 
      RowBox[{"tend", "/", "3"}]}], "}"}]}], "]"}], "//", "Grid"}]], "Input",
 CellLabel->"In[8]:=",
 CellID->89257198],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
/T0WRhkiH0XXuWLKSv2jV9/izaDq+dJ6xksdrr629WBhyi9G5/y+n9/YC57Z
ZObhEsvuxEpVuZLZidIAUVOk5a+pczvbjdz+EIkn+QUV47cMVqc6P3d1N3Re
JNxJdv95ZLjyqnDXZLPNd9ZXVlZq7SOytozC5+Ss88g5BoLJO4LOKYul5eUj
J+hOHb72ZlXn1dVDwubZ4mzdQDo36rEpzDlRAJ0bwXX++vKHkwPVIeaWpUa1
kAvccfclORedFyz7YvyWODqfolgiVP9ocfyiIn1e+F405piI/u9CsxvTpb3s
lzJEPpro/NjazUg6l60nOvLm75cmd3P20fJr72wsnhx83kVoRUHnyVm7tM10
fvT0jfcvfpXEgLrDoHNzqfzDKcEiZc2OR7vEQyJEWJStwy1D6qcu3GE6Zy/2
JrUtBgLw65y7WKK+pAM6F9pD9aZRGSIfZabzVrhCCih/fbUbtZFdULSDuk5o
nWt6pKap5V/+HjsnI+lc1tGVfzlrQjo/fuZWJ3TOie83Wv8k/eYbSOfCYMUC
xcw/J52zfzvht3Dil7yR3jyqMbwzP26HSoOjjQqqz1fWv6TKnKk9tS1VFLc4
efnXbTP1LjJpjc4nn8t6XJKXsy94ZV6AztMqJ5VjE5QynJZR3jpXYDcvF5hS
hshHE52vXdqOpnNfUtQpf0cXOtWvJqtfazE6P3r6xrmruzT6HyE7l5soXuui
c81Rdbt+P0cyGe7nFOO3DCYzW9jryLsfR8tRZ7KH+nz98lc3GHXMiFnzZyXy
UUH1OemcVltEy9FO5yL65Z+PjKVfPDdhV4DOjbIQE/dSdO6JRDZDdEgqD6Y4
/fB2lOG3PH/xcjBZGUqroQPlUrmV9XKrHBnUlgu1XlI/4n6C3zS5YuuXVEpe
PGEgWzwVU3gFiHw025yIiZx07n2LoiEIidd7Jd8xyncuaQit83Aoyj/asz7b
nkljKju3CgT4QSWgDJ27tGctMG1HZ09151aRAkQ+EnRO0UQfPn6W2iJdxHom
lc7LomSd0y1jIiedd2jrlhDlryNgd5FLU4iTtZJGnWu6LrmNcIlE17lkKSJf
Gf3aOwalNDReNKfKmv7WFNvS8rKwK+RiirNzFOmwy6dmzGQ1C6+33BR8bBRD
Ra71ObPtt8zCkznqnDabY//SblzBdV5fiiiGs5gt/NfBWOfqrAWdtiQ7Ufb0
dIsUpGbQF2/cO1jDKg940Dm9mJb8WubO7v1HJG8SfNCtuCp3ioq1KTxR6211
6Qewz5qumQWW0djGXZb1+sLubtYlEAfNQh5MavKp1FfTm12Buyuk86BbFC3c
uNktJclNPvpQrE90dG5px2LWE+RVWeOVgs51UhC/i7g8jf/cpInko3Nd53x1
48i7Hy/lYXaFa1v71M2y/+AJe/PJ7e98pSx4w9WeWbrXdB/FyKKaVSJhp/OK
zIxq48o3YtdqpiAqtrKtu5gIxVbVL4E46Jfz2x9ssRdXVFCrTOHd5ryDMXCG
86WI07uviESnxFzntVWQiiDVM+SVKg+IJzO+3b2vVN+za8dmmLRQ4qBZzjSB
5OKnX5MnnNvehaRzMjKCzqVLERWR/5ugKR9GQ0XKrBs7Olp0LjO+1RL+XJg9
yDbsepzioOm3kLxZ+44LPoJt+lAQ0dHs7sQJsejOoDa1KRNv1hSF2Zl8I836
nHm8zNqDw6dkNnNgQhtmxNqlbb68ghYWpbVHQeW+2/nnmYhHB9HUhGbrNkJX
Nt5477PRrEHK/n35y6/hrdNiPOSxssGXy8UJPVcPilv7aO4DCM5G9Zlu169o
IZjWS4zStFMsvyq+4HXKmaxideb0z0kHYz5j62Qe1zZ7E/RxMxBafNTm8r4/
UQiMdN7qhzgqNonO1SfwL8Ubd9MjOQ2MsmcNDwd99vIOPXoCMVgYMa+Oicg+
ku9PRGiWv52d1lqSXltReGsuWTlX+jrff/CkcjCwabowD0psGp/f2AvtVinG
RJjOFfsTCRsbTQmhc6kg7XDxrjPxzAkdv4W17CqewEeb31CzNKRpulAZ8rEh
cqt82SYdJ2IHX1/+cHLjzPYnYn7ObGOjKTxlFyP161jHlJOko/McEc+RelbD
xWV9kpNPLqioNVmpba3nD2urC/VLhizkj5tWt8qDJ6CYs1T7SNS2aVxuTVMN
yspfVR8Irkn+qvypecTshJPTE0Q3YHoJ7de5amOGFzvFI+yJwwVDboxmmqa3
gMujvj8RH3SZTU+dz5Ll+0FXfhOtNniXpaJS8pK+I0MQEvcbZCeVQW08tDVx
v5rMsHrfvf9oadJR7PfFCnlpUm9XjlN1vX3vB3WDblpKq1p5DfyZzZM6e3lH
Ogt38+6Bwiq6/NSFO74mMNSloike019ZCJ1HzjQm3HJezt39Lnmi6RtYP02k
CVr/3Czy6ha+HtxAjULn1j6PjqdtmngBkpYCkaeF6hnrVqF3WULnIAT18i9V
aVa0L/rOP2tx2odFCnM7hAW5UUrAA/X2UdMJvUZ70Xe+WWusN49hRiJa+wGg
8wrqRd+ZZh1xvXnm8H4ACFuF/aLvhFlbrjevJKG53jxz0D4iWteb89Ni1mZJ
1ptXEmlab965+jy1CTkjX/QdxTv1l7VyvXnrtU3rzTvhn3MwfqHA13rzxFkr
15u3Iq43t04EAAAAAAAAAAAAAIAi+X+PK5FS
    "], {{0, 372}, {248, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{248, 372},
  PlotRange->{{0, 248}, {0, 372}}]], "Output",
 ImageSize->{252, 372},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellTags->"RasterizedOutput",
 CellLabel->"Out[8]=",
 CellID->937396535]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Properties & Relations",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(4)", "ExampleCount"]
}], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->174534589],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["FindFit"]],"paclet:ref/FindFit"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " gives the parameter estimates:"
}], "ExampleText",
 CellID->118868499],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Exp", "[", 
        RowBox[{"RandomReal", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"i", "-", "1"}], ",", "i"}], "}"}], "]"}], "]"}]}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "10"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->353140223],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindFit", "[", 
  RowBox[{"data", ",", 
   RowBox[{"Exp", "[", 
    RowBox[{"a", " ", "+", 
     RowBox[{"b", " ", "x"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], ",", "x"}], "]"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->871064071],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", 
    RowBox[{"-", "2.7260254665293275`"}]}], ",", 
   RowBox[{"b", "\[Rule]", "1.247642430395976`"}]}], "}"}]], "Output",
 ImageSize->{183, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->30860645]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["NonlinearModelFit"]],"paclet:ref/NonlinearModelFit"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " allows for extraction of additional information about the fitting:"
}], "ExampleText",
 CellID->125357659],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nlm", "=", 
  RowBox[{"NonlinearModelFit", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Exp", "[", 
     RowBox[{"a", "+", 
      RowBox[{"b", " ", "x"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"a", ",", "b"}], "}"}], ",", "x"}], "]"}]}]], "Input",
 CellLabel->"In[3]:=",
 CellID->662712115],

Cell[BoxData[
 RowBox[{"FittedModel", "[", 
  PanelBox[
   TagBox[
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "2.7260254665293275`"}], "+", 
      RowBox[{
       RowBox[{"\[LeftSkeleton]", "18", "\[RightSkeleton]"}], " ", "x"}]}]],
    Short],
   FrameMargins->5], "]"}]], "Output",
 ImageSize->{197, 36},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->71896730]
}, Open  ]],

Cell["Extract the parameter estimates:", "ExampleText",
 CellID->31895825],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nlm", "[", "\"\<BestFitParameters\>\"", "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->13998670],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", 
    RowBox[{"-", "2.7260254665293275`"}]}], ",", 
   RowBox[{"b", "\[Rule]", "1.247642430395976`"}]}], "}"}]], "Output",
 ImageSize->{183, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->6365023]
}, Open  ]],

Cell["Extract additional results and diagnostics:", "ExampleText",
 CellID->363585979],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nlm", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<BestFit\>\"", ",", "\"\<FitResiduals\>\"", ",", 
    "\"\<ParameterTable\>\""}], "}"}], "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->66353542],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "2.7260254665293275`"}], "+", 
     RowBox[{"1.247642430395976`", " ", "x"}]}]], ",", 
   RowBox[{"{", 
    RowBox[{
    "1.082188989115243`", ",", "3.1220715261901426`", ",", 
     "16.215437624377397`", ",", "24.960462367461048`", ",", 
     "104.0796804324038`", ",", "222.4062099173238`", ",", 
     "588.6948363990546`", ",", 
     RowBox[{"-", "66.68039806509887`"}], ",", 
     RowBox[{"-", "132.3263113420544`"}], ",", "27.82505915623915`"}], "}"}], 
   ",", 
   StyleBox[
    TagBox[GridBox[{
       {"\<\"\"\>", "\<\"Estimate\"\>", "\<\"Standard Error\"\>", "\<\"t \
Statistic\"\>", "\<\"P\[Hyphen]Value\"\>"},
       {"a", 
        RowBox[{"-", "2.7260254665293275`"}], "0.41016440875287996`", 
        RowBox[{"-", "6.646177504327858`"}], "0.00016144607352628772`"},
       {"b", "1.247642430395976`", "0.04136783853572053`", 
        "30.159720076229146`", "1.5852876297521111`*^-9"}
      },
      AutoDelete->False,
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
      GridBoxDividers->{
       "ColumnsIndexed" -> {2 -> GrayLevel[0.7]}, 
        "RowsIndexed" -> {2 -> GrayLevel[0.7]}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{
       "ColumnsIndexed" -> {2 -> 1}, "RowsIndexed" -> {2 -> 0.75}}],
     "Grid"], "DialogStyle",
    StripOnInput->False]}], "}"}]], "Output",
 ImageSize->{533, 78},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[5]=",
 CellID->824101335]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell["\t", "ExampleDelimiter"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->204739007],

Cell[TextData[{
 "For linear models, ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Fit"]],"paclet:ref/Fit"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " and ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["FindFit"]],"paclet:ref/FindFit"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " are equivalent and use ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["LeastSquares"]],"paclet:ref/LeastSquares"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ":"
}], "ExampleText",
 CellID->441279876],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "20"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->50948481],

Cell[TextData[{
 "Use ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Fit"]],"paclet:ref/Fit"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " with the basis ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"1", ",", " ", 
    StyleBox["x", "TI"], ",", " ", 
    SuperscriptBox[
     StyleBox["x", "TI"], "2"]}], "}"}]], "InlineFormula"],
 ":"
}], "ExampleText",
 CellID->359675166],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"basis", "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", "x", ",", 
     RowBox[{"x", "^", "2"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{"Fit", "[", 
  RowBox[{"data", ",", "basis", ",", "x"}], "]"}]}], "Input",
 CellLabel->"In[2]:=",
 CellID->16038186],

Cell[BoxData[
 RowBox[{"1.3214285714285754`", "\[InvisibleSpace]", "-", 
  RowBox[{"2.382142857142857`", " ", "x"}], "+", 
  RowBox[{"1.1964285714285712`", " ", 
   SuperscriptBox["x", "2"]}]}]], "Output",
 ImageSize->{200, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->73508823]
}, Open  ]],

Cell[TextData[{
 "This is equivalent to ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["FindFit"]],"paclet:ref/FindFit"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " with the model function a linear combination of the basis:"
}], "ExampleText",
 CellID->517816379],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"model", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"a", "[", "0", "]"}], ",", 
      RowBox[{"a", "[", "1", "]"}], ",", 
      RowBox[{"a", "[", "2", "]"}]}], "}"}], ".", "basis"}]}], ";"}], "\n", 
 RowBox[{"FindFit", "[", 
  RowBox[{"data", ",", "model", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "[", "0", "]"}], ",", 
     RowBox[{"a", "[", "1", "]"}], ",", 
     RowBox[{"a", "[", "2", "]"}]}], "}"}], ",", "x"}], "]"}]}], "Input",
 CellLabel->"In[3]:=",
 CellID->94537532],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"a", "[", "0", "]"}], "\[Rule]", "1.3214285714285754`"}], ",", 
   RowBox[{
    RowBox[{"a", "[", "1", "]"}], "\[Rule]", 
    RowBox[{"-", "2.382142857142857`"}]}], ",", 
   RowBox[{
    RowBox[{"a", "[", "2", "]"}], "\[Rule]", "1.1964285714285712`"}]}], 
  "}"}]], "Output",
 ImageSize->{330, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->392373817]
}, Open  ]],

Cell[TextData[{
 "Construct a design matrix and use ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["LeastSquares"]],"paclet:ref/LeastSquares"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " to find the coefficients:"
}], "ExampleText",
 CellID->525347866],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m", "=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", "x", "}"}], ",", 
      RowBox[{"Evaluate", "[", "basis", "]"}]}], "]"}], ",", 
    RowBox[{"data", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellLabel->"In[4]:=",
 CellID->600072301],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "25"}], "}"}]}], "}"}]], "Output",
 ImageSize->{429, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->251824306]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LeastSquares", "[", 
  RowBox[{"m", ",", 
   RowBox[{"N", "[", 
    RowBox[{"data", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->156648758],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.3214285714285734`", ",", 
   RowBox[{"-", "2.382142857142858`"}], ",", "1.196428571428571`"}], 
  "}"}]], "Output",
 ImageSize->{195, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[5]=",
 CellID->166302794]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["LinearModelFit"]],"paclet:ref/LinearModelFit"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " fits linear models and gives additional results about the fitting:"
}], "ExampleText",
 CellID->25607046],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lm", "=", 
  RowBox[{"LinearModelFit", "[", 
   RowBox[{"data", ",", "basis", ",", "x"}], "]"}]}]], "Input",
 CellLabel->"In[6]:=",
 CellID->598516267],

Cell[BoxData[
 RowBox[{"FittedModel", "[", 
  PanelBox[
   TagBox[
    RowBox[{"1.3214285714285754`", "\[InvisibleSpace]", "-", 
     RowBox[{"2.382142857142857`", " ", "x"}], "+", 
     RowBox[{"1.1964285714285712`", " ", 
      SuperscriptBox["x", "2"]}]}],
    Short],
   FrameMargins->5], "]"}]], "Output",
 ImageSize->{270, 36},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[6]=",
 CellID->50435781]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lm", "[", "\"\<BestFitParameters\>\"", "]"}]], "Input",
 CellLabel->"In[7]:=",
 CellID->587319099],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.3214285714285754`", ",", 
   RowBox[{"-", "2.382142857142857`"}], ",", "1.1964285714285712`"}], 
  "}"}]], "Output",
 ImageSize->{195, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[7]=",
 CellID->278080519]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lm", "[", 
  RowBox[{"{", 
   RowBox[{"\"\<RSquared\>\"", ",", "\"\<FitResiduals\>\""}], "}"}], 
  "]"}]], "Input",
 CellLabel->"In[8]:=",
 CellID->1147988],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.9821512016021361`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.3214285714285754`"}], ",", 
     RowBox[{"-", "0.13571428571428945`"}], ",", "1.657142857142854`", ",", 
     RowBox[{"-", "0.9428571428571448`"}], ",", 
     RowBox[{"-", "0.935714285714285`"}], ",", "0.6785714285714306`"}], 
    "}"}]}], "}"}]], "Output",
 ImageSize->{515, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[8]=",
 CellID->129061026]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell["\t", "ExampleDelimiter"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->55697299],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["FindFit"]],"paclet:ref/FindFit"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " effectively uses ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["FindMinimum"]],"paclet:ref/FindMinimum"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " to minimize a norm of the residual function:"
}], "ExampleText",
 CellID->129377990],

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "20"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"xp", ",", "response"}], "}"}], "=", 
   RowBox[{"Transpose", "[", "data", "]"}]}], ";"}]}], "Input",
 CellLabel->"In[1]:=",
 CellID->238300117],

Cell[BoxData[
 RowBox[{
  RowBox[{"model", "=", 
   RowBox[{"a", " ", 
    RowBox[{"Exp", "[", 
     RowBox[{"b", " ", "x"}], "]"}]}]}], ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->293034305],

Cell["\<\
The residual is the difference between response and model prediction:\
\>", "ExampleText",
 CellID->80546646],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"residual", "=", 
  RowBox[{"response", "-", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", "x", "}"}], ",", 
       RowBox[{"Evaluate", "[", "model", "]"}]}], "]"}], ",", "xp"}], 
    "]"}]}]}]], "Input",
 CellLabel->"In[3]:=",
 CellID->405386996],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1", "-", "a"}], ",", 
   RowBox[{
    RowBox[{"-", "a"}], " ", 
    SuperscriptBox["\[ExponentialE]", "b"]}], ",", 
   RowBox[{"3", "-", 
    RowBox[{"a", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"2", " ", "b"}]]}]}], ",", 
   RowBox[{"4", "-", 
    RowBox[{"a", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"3", " ", "b"}]]}]}], ",", 
   RowBox[{"10", "-", 
    RowBox[{"a", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"4", " ", "b"}]]}]}], ",", 
   RowBox[{"20", "-", 
    RowBox[{"a", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"5", " ", "b"}]]}]}]}], "}"}]], "Output",
 ImageSize->{345, 18},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->360238027]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindMinimum", "[", 
  RowBox[{
   RowBox[{"residual", ".", "residual"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->2657863],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.510894928183351`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "\[Rule]", "0.5072247144521088`"}], ",", 
     RowBox[{"b", "\[Rule]", "0.7357440870932601`"}]}], "}"}]}], 
  "}"}]], "Output",
 ImageSize->{263, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->5152634]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindFit", "[", 
  RowBox[{"data", ",", "model", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], ",", "x"}], "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->86975213],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "0.5072247145192513`"}], ",", 
   RowBox[{"b", "\[Rule]", "0.7357440870657572`"}]}], "}"}]], "Output",
 ImageSize->{189, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[5]=",
 CellID->511241654]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell["\t", "ExampleDelimiter"],
  $Line = 0; Null]], "ExampleDelimiter",
 CellID->116451258],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["FindFit"]],"paclet:ref/FindFit"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " gives a result consistent with normally distributed responses by default:"
}], "ExampleText",
 CellID->925975778],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{
        RowBox[{"RandomReal", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"11", "-", "i"}], ",", 
           RowBox[{"10", "-", "i"}]}], "}"}], "]"}], "/", "10"}]}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "10", ",", "1", ",", 
       RowBox[{"-", "1"}]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->749543187],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ff", "=", 
  RowBox[{"FindFit", "[", 
   RowBox[{"data", ",", 
    RowBox[{"1", "/", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"Exp", "[", 
        RowBox[{"a", "+", 
         RowBox[{"b", " ", "x"}]}], "]"}]}], ")"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"a", ",", "b"}], "}"}], ",", "x"}], "]"}]}]], "Input",
 CellLabel->"In[2]:=",
 CellID->414331871],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", 
    RowBox[{"-", "2.690582256868977`"}]}], ",", 
   RowBox[{"b", "\[Rule]", "0.4892318958040887`"}]}], "}"}]], "Output",
 ImageSize->{190, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[2]=",
 CellID->492119341]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["LogitModelFit"]],"paclet:ref/LogitModelFit"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " assumes binomially distributed responses:"
}], "ExampleText",
 CellID->5399625],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lm", "=", 
  RowBox[{"LogitModelFit", "[", 
   RowBox[{"data", ",", "x", ",", "x"}], "]"}]}]], "Input",
 CellLabel->"In[3]:=",
 CellID->492334796],

Cell[BoxData[
 RowBox[{"FittedModel", "[", 
  PanelBox[
   TagBox[
    FractionBox["1", 
     RowBox[{"1", "+", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"\[LeftSkeleton]", "18", "\[RightSkeleton]"}]}], "+", 
        RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]}]]}]],
    Short],
   FrameMargins->5], "]"}]], "Output",
 ImageSize->{203, 52},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->31390801]
}, Open  ]],

Cell["The fits are not identical:", "ExampleText",
 CellID->57680471],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Normal", "[", "lm", "]"}], ",", 
   RowBox[{
    RowBox[{"1", "/", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"Exp", "[", 
        RowBox[{"a", "+", 
         RowBox[{"b", " ", "x"}]}], "]"}]}], ")"}]}], "/.", "ff"}]}], 
  "}"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->46524300],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"1", "+", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "2.780041947327945`"}], "+", 
       RowBox[{"0.5035537392158765`", " ", "x"}]}]]}]], ",", 
   FractionBox["1", 
    RowBox[{"1", "+", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "2.690582256868977`"}], "+", 
       RowBox[{"0.4892318958040887`", " ", "x"}]}]]}]]}], "}"}]], "Output",
 ImageSize->{278, 32},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->265831733]
}, Open  ]],

Cell[TextData[{
 "The same is true for ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["ProbitModelFit"]],"paclet:ref/ProbitModelFit"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 ":"
}], "ExampleText",
 CellID->284254438],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pm", "=", 
  RowBox[{"ProbitModelFit", "[", 
   RowBox[{"data", ",", "x", ",", "x"}], "]"}]}]], "Input",
 CellLabel->"In[5]:=",
 CellID->8380680],

Cell[BoxData[
 RowBox[{"FittedModel", "[", 
  PanelBox[
   TagBox[
    RowBox[{
     FractionBox["1", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"Erf", "[", 
        FractionBox[
         RowBox[{"1.6645573529545754`", "\[InvisibleSpace]", "-", 
          RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]}], 
         SqrtBox["2"]], "]"}]}], ")"}]}],
    Short],
   FrameMargins->5], "]"}]], "Output",
 ImageSize->{256, 58},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[5]=",
 CellID->9506026]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ff2", "=", 
  RowBox[{"FindFit", "[", 
   RowBox[{"data", ",", 
    RowBox[{
     RowBox[{"1", "/", "2"}], 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"Erf", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"a", "+", 
           RowBox[{"b", " ", "x"}]}], ")"}], "/", 
         RowBox[{"Sqrt", "[", "2", "]"}]}], "]"}]}], ")"}]}], ",", 
    RowBox[{"Transpose", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b"}], "}"}], ",", 
       RowBox[{"pm", "[", "\"\<BestFitParameters\>\"", "]"}]}], "}"}], "]"}], 
    ",", "x"}], "]"}]}]], "Input",
 CellLabel->"In[6]:=",
 CellID->208605809],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1.6255161674604324`"}], ",", 
   RowBox[{"b", "\[Rule]", 
    RowBox[{"-", "0.29539395003332747`"}]}]}], "}"}]], "Output",
 ImageSize->{190, 15},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[6]=",
 CellID->605383314]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Normal", "[", "pm", "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"1", "/", "2"}], 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"Erf", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"a", "+", 
           RowBox[{"b", " ", "x"}]}], ")"}], "/", 
         RowBox[{"Sqrt", "[", "2", "]"}]}], "]"}]}], ")"}]}], "/.", "ff2"}]}],
   "}"}]], "Input",
 CellLabel->"In[7]:=",
 CellID->243946289],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"Erf", "[", 
       FractionBox[
        RowBox[{"1.6645573529545754`", "\[InvisibleSpace]", "-", 
         RowBox[{"0.30124264484361635`", " ", "x"}]}], 
        SqrtBox["2"]], "]"}]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "2"], " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"Erf", "[", 
       FractionBox[
        RowBox[{"1.6255161674604324`", "\[InvisibleSpace]", "-", 
         RowBox[{"0.29539395003332747`", " ", "x"}]}], 
        SqrtBox["2"]], "]"}]}], ")"}]}]}], "}"}]], "Output",
 ImageSize->{454, 38},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[7]=",
 CellID->50156243]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["GeneralizedLinearModelFit"]],
    "paclet:ref/GeneralizedLinearModelFit"},
   "RefLink",
   BaseStyle->"InlineFormula"]], "InlineFormula"],
 " allows for binomial and other distributional structures."
}], "ExampleText",
 CellID->725562415],

Cell["Model gamma-distributed responses:", "ExampleText",
 CellID->123552193],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"gam", "=", 
  RowBox[{"GeneralizedLinearModelFit", "[", 
   RowBox[{"data", ",", "x", ",", "x", ",", 
    RowBox[{"ExponentialFamily", "\[Rule]", "\"\<Gamma\>\""}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[8]:=",
 CellID->308426291],

Cell[BoxData[
 RowBox[{"FittedModel", "[", 
  PanelBox[
   TagBox[
    FractionBox["1", 
     RowBox[{"0.3473197130337682`", "\[InvisibleSpace]", "+", 
      RowBox[{
       RowBox[{"\[LeftSkeleton]", "19", "\[RightSkeleton]"}], " ", "x"}]}]],
    Short],
   FrameMargins->5], "]"}]], "Output",
 ImageSize->{208, 53},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[8]=",
 CellID->268945152]
}, Open  ]],

Cell["Compare with the result for normally distributed responses:", \
"ExampleText",
 CellID->78046407],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Normal", "[", "gam", "]"}], ",", 
   RowBox[{
    RowBox[{"1", "/", 
     RowBox[{"(", 
      RowBox[{"a", "+", 
       RowBox[{"b", " ", "x"}]}], ")"}]}], "/.", 
    RowBox[{"FindFit", "[", 
     RowBox[{"data", ",", 
      RowBox[{"1", "/", 
       RowBox[{"(", 
        RowBox[{"a", "+", 
         RowBox[{"b", " ", "x"}]}], ")"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"a", ",", "b"}], "}"}], ",", "x"}], "]"}]}]}], "}"}]], "Input",
 CellLabel->"In[9]:=",
 CellID->177303305],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"0.3473197130337682`", "\[InvisibleSpace]", "+", 
     RowBox[{"0.4240743402762542`", " ", "x"}]}]], ",", 
   FractionBox["1", 
    RowBox[{"0.6792510395263692`", "\[InvisibleSpace]", "+", 
     RowBox[{"0.2913744393357399`", " ", "x"}]}]]}], "}"}]], "Output",
 ImageSize->{295, 33},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[9]=",
 CellID->764565401]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Possible Issues",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->309013018],

Cell[CellGroupData[{

Cell[TextData[{
 "Starting Values",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->739487787],

Cell["\<\
Good starting values may be necessary to get a reasonable fit:\
\>", "ExampleText",
 CellID->3297576],

Cell[BoxData[
 RowBox[{
  RowBox[{"model", " ", "=", " ", 
   RowBox[{
    RowBox[{"a1", " ", 
     RowBox[{"Exp", "[", 
      RowBox[{"-", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"b1", 
          RowBox[{"(", 
           RowBox[{"x", "-", "x1"}], ")"}]}], ")"}], "^", "2"}]}], "]"}]}], 
    " ", "+", " ", 
    RowBox[{"a2", " ", 
     RowBox[{"Exp", "[", 
      RowBox[{"-", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"b2", 
          RowBox[{"(", 
           RowBox[{"x", "-", "x2"}], ")"}]}], ")"}], "^", "2"}]}], 
      "]"}]}]}]}], ";"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->25917882],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"a1", "=", "1"}], ",", 
       RowBox[{"b1", "=", "5"}], ",", 
       RowBox[{"x1", "=", 
        RowBox[{"-", ".5"}]}], ",", 
       RowBox[{"a2", "=", "2"}], ",", 
       RowBox[{"b2", "=", "10"}], ",", 
       RowBox[{"x2", "=", ".25"}], ",", 
       RowBox[{"x", "=", 
        RowBox[{"Sort", "[", 
         RowBox[{"RandomReal", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "100"}], "]"}], 
         "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{"x", ",", " ", 
        RowBox[{"model", " ", "+", " ", 
         RowBox[{"RandomReal", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", ".1"}], ",", ".1"}], "}"}], ",", " ", "100"}], 
          "]"}]}]}], "}"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->95944592],

Cell["\<\
Find the fit with the default starting values of 1. The local minimum is far \
from correct:\
\>", "ExampleText",
 CellID->289703782],

Cell[BoxData[
 RowBox[{
  RowBox[{"fit", " ", "=", " ", 
   RowBox[{"FindFit", "[", 
    RowBox[{"data", ",", " ", "model", ",", " ", 
     RowBox[{"{", 
      RowBox[{
      "a1", ",", "b1", ",", " ", "x1", ",", " ", "a2", ",", " ", "b2", ",", 
       " ", "x2"}], "}"}], ",", "x"}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->220126268],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", " ", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{"data", ",", " ", 
     RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"model", " ", "/.", " ", "fit"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", " ", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"Directive", "[", 
       RowBox[{"Thick", ",", "Red"}], "]"}]}]}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->101239967],

Cell[BoxData[
 GraphicsBox[{{{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
/PCOlBX60bQfmAcW7ip+cgn/A/BjQyE=
      "]]}, {}}, {{}, {}, 
    {RGBColor[1, 0, 0], Thickness[Large], Opacity[1.], LineBox[CompressedData["
1:eJxF1IlL03EYBvBpmqVRUKlJimc2LUcYHvNg4VGu1JlZqavpZnlSmV0qlDMP
DCwZM1GnWc2Zx5wJljm2phOZ6KJ0NmfqmvPA7Zcuc0VaYAX2fh94ePj8A48z
41rsZVMcDhf1t/+WQLLRb2wYJLjNxGUeLFtbR85/7O+++h1ZhiUyFjDk5OqG
T/JxZNYKfrimA9nIDeQfTUIWbqNfTXu7DC54p8T66EtgHc/O1s/+C9jzc8T2
XdN6cOMernHivg7cTx16KCEtgu0b7J2qZxbAp0KpeYoH82DHX6lMD/Ic2EtQ
z8xZ0oI1N58RlM0z4Iw6FrcuUwOOv5fgyndRg/GYBzXuySQ4KzqmRDurAife
oAT7+irBbMlijOS1AkwyVZ0jmIyAM1XSbN6qHBxUU7hPmCsDp0+vTCbYSsEU
zeH2QTch2FfCGdcXC8DErxdT1CmV4ENFBsveW2zSf3fIllsK4jvAYvKQf4C0
B4y1Ps+IjpeC69sJHOMrGVhEL7U+0i0H5++t+UjZPQKWfxgLG61VgK8P+7lX
2CjBje/DrFMHVeByfnezReQk2IQ9Ru43V4NtW9pkjREasPIF09W8bAZMbfMs
zdFqwUEci8CBA3Pg2YqeH27F8+Au1wLMeWoBrOHe8TZzWASP4sOZq7k6sGNt
uNOgWA+uak1YI/7GwApJyMSbs0vgrD6alUP1MpjRMFElqkdOvBvncoGLHEE8
SeQIkN06fdLsBpCnnu7ot/6GHMkU5u+MNIBDaT5bBaeRA4JesqLOI+N/8prL
Gchm2SylZR6yOCnd26IJuSt4VtzUhszfTyMf70SuHT+TXCJCvk0hPdqiQL7i
JbTjqpAvWfnwQtTIsTJPUaEOmczjnXA2IB8rclL0GpH96Bxa8jry5n+B/wAz
608+
      "]]}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{-0.9676347102928959, 0.9722845026251048}, {-0.099009059619544, 
   1.9663774162189058`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 ImageSize->{244, 143},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[4]=",
 CellID->140107079]
}, Open  ]],

Cell["\<\
Typically, better starting values are required to get a good fit:\
\>", "ExampleText",
 CellID->142231484],

Cell[BoxData[
 RowBox[{
  RowBox[{"sfit", " ", "=", " ", 
   RowBox[{"FindFit", "[", 
    RowBox[{"data", ",", " ", "model", ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a1", ",", "1"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"b1", ",", "5"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"x1", ",", 
         RowBox[{"-", ".5"}]}], "}"}], ",", 
       RowBox[{"{", " ", 
        RowBox[{"a2", ",", "2"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"b2", ",", "10"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"x2", ",", ".25"}], "}"}]}], "}"}], ",", "x"}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->169431678],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", " ", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{"data", ",", " ", 
     RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"model", " ", "/.", " ", "sfit"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", " ", 
     RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[6]:=",
 CellID->442472748],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
+Iafz57fpXgO4isxEwRBEARBEGL8H0Eua/8=
    "], {{0, 143}, {240, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{240, 143},
  PlotRange->{{0, 240}, {0, 143}}]], "Output",
 ImageSize->{244, 143},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellTags->"RasterizedOutput",
 CellLabel->"Out[6]=",
 CellID->460488447]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell["", "SectionFooterSpacer"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  InterpretationBox[
   StyleBox[
    GraphicsBox[{},
     BaselinePosition->Baseline,
     ImageSize->{6, 0}],
    CacheGraphics->False],
   Spacer[6]]]],
 "See Also"
}], "SeeAlsoSection",
 WholeCellGroupOpener->True,
 CellID->20192],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["FindMinimum"]],"paclet:ref/FindMinimum"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Fit"]],"paclet:ref/Fit"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["NMinimize"]],"paclet:ref/NMinimize"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["LeastSquares"]],"paclet:ref/LeastSquares"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Interpolation"]],"paclet:ref/Interpolation"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["FindCurvePath"]],"paclet:ref/FindCurvePath"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["ChiSquareDistribution"]],"paclet:ref/ChiSquareDistribution"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["LinearModelFit"]],"paclet:ref/LinearModelFit"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["NonlinearModelFit"]],"paclet:ref/NonlinearModelFit"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula"]
}], "SeeAlso",
 CellID->32076]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  InterpretationBox[
   StyleBox[
    GraphicsBox[{},
     BaselinePosition->Baseline,
     ImageSize->{6, 0}],
    CacheGraphics->False],
   Spacer[6]]]],
 "Tutorials"
}], "TutorialsSection",
 WholeCellGroupOpener->True,
 CellID->26380],

Cell["", "SectionHeaderSpacer"],

Cell[BoxData[
 TemplateBox[{Cell[
    TextData["Manipulating Numerical Data"]],
   "paclet:tutorial/ManipulatingNumericalData"},
  "RefLink",
  BaseStyle->"Tutorials"]], "Tutorials",
 CellID->17773],

Cell[BoxData[
 TemplateBox[{Cell[
    TextData["Curve Fitting"]],"paclet:tutorial/CurveFitting"},
  "RefLink",
  BaseStyle->"Tutorials"]], "Tutorials",
 CellID->3867],

Cell[BoxData[
 TemplateBox[{Cell[
    TextData["Constrained Optimization"]],
   "paclet:tutorial/ConstrainedOptimizationOverview"},
  "RefLink",
  BaseStyle->"Tutorials"]], "Tutorials",
 CellID->168181981],

Cell[BoxData[
 TemplateBox[{Cell[
    TextData["Unconstrained Optimization"]],
   "paclet:tutorial/UnconstrainedOptimizationOverview"},
  "RefLink",
  BaseStyle->"Tutorials"]], "Tutorials",
 CellID->123070281],

Cell["", "SectionFooterSpacer"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  InterpretationBox[
   StyleBox[
    GraphicsBox[{},
     BaselinePosition->Baseline,
     ImageSize->{6, 0}],
    CacheGraphics->False],
   Spacer[6]]]],
 "Related Guides"
}], "MoreAboutSection",
 WholeCellGroupOpener->True,
 CellID->13071],

Cell["", "SectionHeaderSpacer"],

Cell[BoxData[
 TemplateBox[{Cell[
    TextData["Curve Fitting & Approximate Functions"]],
   "paclet:guide/CurveFittingAndApproximateFunctions"},
  "RefLink",
  BaseStyle->"MoreAbout"]], "MoreAbout",
 CellID->226375124],

Cell[BoxData[
 TemplateBox[{Cell[
    TextData["Data Transforms and Smoothing"]],
   "paclet:guide/DataTransformsAndSmoothing"},
  "RefLink",
  BaseStyle->"MoreAbout"]], "MoreAbout",
 CellID->552511639],

Cell[BoxData[
 TemplateBox[{Cell[
    TextData["Machine Learning"]],"paclet:guide/MachineLearning"},
  "RefLink",
  BaseStyle->"MoreAbout"]], "MoreAbout",
 CellID->425302925],

Cell[BoxData[
 TemplateBox[{Cell[
    TextData["Matrix-Based Minimization"]],
   "paclet:guide/MatrixBasedMinimization"},
  "RefLink",
  BaseStyle->"MoreAbout"]], "MoreAbout",
 CellID->60913542],

Cell[BoxData[
 TemplateBox[{Cell[
    TextData["Numerical Data"]],"paclet:guide/NumericalData"},
  "RefLink",
  BaseStyle->"MoreAbout"]], "MoreAbout",
 CellID->236451220],

Cell[BoxData[
 TemplateBox[{Cell[
    TextData["Optimization"]],"paclet:guide/Optimization"},
  "RefLink",
  BaseStyle->"MoreAbout"]], "MoreAbout",
 CellID->99315854],

Cell[BoxData[
 TemplateBox[{Cell[
    TextData["Scientific Data Analysis"]],
   "paclet:guide/ScientificDataAnalysis"},
  "RefLink",
  BaseStyle->"MoreAbout"]], "MoreAbout",
 CellID->692232019],

Cell[BoxData[
 TemplateBox[{Cell[
    TextData["Time Series"]],"paclet:guide/TimeSeries"},
  "RefLink",
  BaseStyle->"MoreAbout"]], "MoreAbout",
 CellID->250879954],

Cell["", "SectionFooterSpacer"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  InterpretationBox[
   StyleBox[
    GraphicsBox[{},
     BaselinePosition->Baseline,
     ImageSize->{6, 0}],
    CacheGraphics->False],
   Spacer[6]]]],
 "Related Links"
}], "RelatedLinksSection",
 WholeCellGroupOpener->True,
 CellID->28044],

Cell["", "SectionHeaderSpacer"],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Demonstrations with FindFit"]],
    "http://demonstrations.wolfram.com/symbol.html?symbol=FindFit"},
   "WebLink",
   BaseStyle->{"RelatedLinks"}]]],
 " (",
 Cell[BoxData[
  TemplateBox[{Cell[
     TextData["Wolfram Demonstrations Project"]],
    "http://demonstrations.wolfram.com/"},
   "WebLink",
   BaseStyle->{"RelatedLinks"}]]],
 ")"
}], "RelatedLinks"],

Cell[BoxData[
 TemplateBox[{Cell[
    TextData["Implementation notes: Numerical and Related Functions"]],
   "paclet:tutorial/SomeNotesOnInternalImplementation#20880"},
  "RefLink",
  BaseStyle->"RelatedLinks"]], "RelatedLinks",
 CellID->8698]
}, Open  ]],

Cell[TextData[{
 "Introduced in 2003",
 Cell[" (5.0)", "HistoryVersion"],
 " | ",
 "Updated in 2007",
 Cell[" (6.0)", "HistoryVersion"]
}], "History"],

Cell[" ", "FooterCell"]
},
Saveable->False,
ScreenStyleEnvironment->"Working",
WindowSize->{725, 750},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
WindowTitle->"FindFit",
TaggingRules->{
 "ModificationHighlight" -> False, "ColorType" -> "SymbolColor", "LinkTrails" -> 
  GridBox[{{
      RowBox[{
        ButtonBox[
        "Wolfram Language", ButtonData -> "paclet:guide/WolframRoot", 
         BaseStyle -> {"Link", "DockedLinkTrail"}], 
        Cell[">", "DockedLinkTrailSeparator"], 
        ButtonBox[
        "Statistical Data Analysis", ButtonData -> "paclet:guide/Statistics", 
         BaseStyle -> {"Link", "DockedLinkTrail"}], 
        Cell[">", "DockedLinkTrailSeparator"], 
        ButtonBox[
        "Curve Fitting & Approximate Functions", ButtonData -> 
         "paclet:guide/CurveFittingAndApproximateFunctions", 
         BaseStyle -> {"Link", "DockedLinkTrail"}], 
        Cell[">", "DockedLinkTrailSeparator"], 
        ButtonBox[
        "FindFit", ButtonData -> "paclet:ref/FindFit", 
         BaseStyle -> {"Link", "DockedLinkTrail"}]}]}, {
      RowBox[{
        ButtonBox[
        "Wolfram Language", ButtonData -> "paclet:guide/WolframRoot", 
         BaseStyle -> {"Link", "DockedLinkTrail"}], 
        Cell[">", "DockedLinkTrailSeparator"], 
        ButtonBox[
        "Computation with Structured Datasets", ButtonData -> 
         "paclet:guide/ComputationWithStructuredDatasets", 
         BaseStyle -> {"Link", "DockedLinkTrail"}], 
        Cell[">", "DockedLinkTrailSeparator"], 
        ButtonBox[
        "Numerical Data", ButtonData -> "paclet:guide/NumericalData", 
         BaseStyle -> {"Link", "DockedLinkTrail"}], 
        Cell[">", "DockedLinkTrailSeparator"], 
        ButtonBox[
        "Curve Fitting & Approximate Functions", ButtonData -> 
         "paclet:guide/CurveFittingAndApproximateFunctions", 
         BaseStyle -> {"Link", "DockedLinkTrail"}], 
        Cell[">", "DockedLinkTrailSeparator"], 
        ButtonBox[
        "FindFit", ButtonData -> "paclet:ref/FindFit", 
         BaseStyle -> {"Link", "DockedLinkTrail"}]}]}, {
      RowBox[{
        ButtonBox[
        "Wolfram Language", ButtonData -> "paclet:guide/WolframRoot", 
         BaseStyle -> {"Link", "DockedLinkTrail"}], 
        Cell[">", "DockedLinkTrailSeparator"], 
        ButtonBox[
        "Life Sciences & Medicine: Data & Computation", ButtonData -> 
         "paclet:guide/LifeSciencesAndMedicineDataAndComputation", 
         BaseStyle -> {"Link", "DockedLinkTrail"}], 
        Cell[">", "DockedLinkTrailSeparator"], 
        ButtonBox[
        "Statistical Data Analysis", ButtonData -> "paclet:guide/Statistics", 
         BaseStyle -> {"Link", "DockedLinkTrail"}], 
        Cell[">", "DockedLinkTrailSeparator"], 
        ButtonBox[
        "Curve Fitting & Approximate Functions", ButtonData -> 
         "paclet:guide/CurveFittingAndApproximateFunctions", 
         BaseStyle -> {"Link", "DockedLinkTrail"}], 
        Cell[">", "DockedLinkTrailSeparator"], 
        ButtonBox[
        "FindFit", ButtonData -> "paclet:ref/FindFit", 
         BaseStyle -> {"Link", "DockedLinkTrail"}]}]}}, ColumnAlignments -> 
    Left], "HasOptions" -> True, "ExampleCounter" -> 1, 
  "ExamplePageLinks" -> {}, "NeedPlatMsgIn" -> None, "RootCaptions" -> "", 
  "Metadata" -> {
   "built" -> "{2014, 7, 18, 17, 42, 6.1836406}", 
    "history" -> {"5", "6", "", ""}, "context" -> "System`", 
    "keywords" -> {
     "approximation of functions", "conjugate gradient", "curves", 
      "fitting curves", "fitting differential equations", "fitting surfaces", 
      "Gauss-Newton algorithm", "GNA", "gradient descent", 
      "least squares curve fitting", "least-squares fits", 
      "Levenberg Marquardt", "Levenberg-Marquardt algorithm", "LMA", "Newton",
       "Newton's method", "nonlinear fitting", "nonlinear programming", 
      "polynomial fit", "quasi-Newton", "residuals", "steepest-descent", 
      "testing models", "trend line", "ConjugateGradient", 
      "LevenbergMarquardt", "Newton", "NMinimize", "QuasiNewton", "COMFIT", 
      "CURVEFIT", "GAUSS2DFIT", "GAUSSFIT", "LADFIT", "LINFIT", "LMFIT", 
      "POLY_FIT", "REGRESS", "SFIT", "SVDFIT", "CurveFitting"}, 
    "specialkeywords" -> {
     "COMFIT", "CURVEFIT", "GAUSS2DFIT", "GAUSSFIT", "LADFIT", "LINFIT", 
      "LMFIT", "POLY_FIT", "REGRESS", "SFIT", "SVDFIT", "CurveFitting"}, 
    "tutorialcollectionlinks" -> {}, "index" -> True, "label" -> 
    "Built-in Wolfram Language Symbol", "language" -> "en", "paclet" -> 
    "Mathematica", "status" -> "None", "summary" -> 
    "FindFit[data, expr, pars, vars] finds numerical values of the parameters \
pars that make expr give a best fit to data as a function of vars. \
FindFit[data, {expr, cons}, pars, vars] finds a best fit subject to the \
parameter constraints cons.", "synonyms" -> {"find fit", "find fit", "fit"}, 
    "title" -> "FindFit", "titlemodifier" -> "", "windowtitle" -> "FindFit", 
    "type" -> "Symbol", "uri" -> "ref/FindFit"}, "SearchTextTranslated" -> ""},
FrontEndVersion->"10.0 for Microsoft Windows (64-bit) (July 9, 2014)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Reference.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "PrimaryExamplesSection"->{
  Cell[20822, 675, 388, 15, 31, "PrimaryExamplesSection",
   CellTags->"PrimaryExamplesSection",
   CellID->101786175]},
 "RasterizedOutput"->{
  Cell[42504, 1456, 7078, 124, 70, "Output",
   CellTags->"RasterizedOutput",
   CellID->206398272],
  Cell[56699, 1818, 8457, 147, 70, "Output",
   CellTags->"RasterizedOutput",
   CellID->439160670],
  Cell[68833, 2103, 18870, 317, 70, "Output",
   CellTags->"RasterizedOutput",
   CellID->97305525],
  Cell[102388, 2946, 4813, 87, 70, "Output",
   CellTags->"RasterizedOutput",
   CellID->259178278],
  Cell[116970, 3373, 8501, 147, 70, "Output",
   CellTags->"RasterizedOutput",
   CellID->379834793],
  Cell[145376, 4236, 4923, 89, 70, "Output",
   CellTags->"RasterizedOutput",
   CellID->189243357],
  Cell[155518, 4513, 12511, 213, 70, "Output",
   CellTags->"RasterizedOutput",
   CellID->621895525],
  Cell[179888, 5123, 3701, 69, 70, "Output",
   CellTags->"RasterizedOutput",
   CellID->8679149],
  Cell[196185, 5498, 50872, 842, 70, "Output",
   CellTags->"RasterizedOutput",
   CellID->797846807],
  Cell[255385, 6589, 11783, 201, 70, "Output",
   CellTags->"RasterizedOutput",
   CellID->937396535],
  Cell[302455, 8060, 6598, 116, 70, "Output",
   CellTags->"RasterizedOutput",
   CellID->460488447]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"PrimaryExamplesSection", 321686, 8576},
 {"RasterizedOutput", 321830, 8580}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[579, 21, 6093, 143, 48, "AnchorBarGrid",
 CellID->1],
Cell[6675, 166, 45, 1, 43, "ObjectName",
 CellID->13722],
Cell[CellGroupData[{
Cell[6745, 171, 1669, 52, 148, "Usage",
 CellID->19752],
Cell[CellGroupData[{
Cell[8439, 227, 750, 24, 32, "NotesSection",
 CellGroupingRules->{"SectionGrouping", 50},
 CellID->403096603],
Cell[9192, 253, 31, 0, 70, "SectionHeaderSpacer"],
Cell[9226, 255, 1175, 43, 70, "Notes",
 CellID->80243372],
Cell[10404, 300, 566, 21, 70, "Notes",
 CellID->580071915],
Cell[10973, 323, 464, 18, 70, "Notes",
 CellID->8382],
Cell[11440, 343, 318, 12, 70, "Notes",
 CellID->13616],
Cell[11761, 357, 287, 11, 70, "Notes",
 CellID->28781],
Cell[12051, 370, 253, 9, 70, "Notes",
 CellID->8808],
Cell[12307, 381, 112, 3, 70, "Notes",
 CellID->14609],
Cell[12422, 386, 1402, 51, 70, "Notes",
 CellID->10299],
Cell[13827, 439, 245, 8, 70, "Notes",
 CellID->22146],
Cell[14075, 449, 437, 16, 70, "Notes",
 CellID->22732],
Cell[14515, 467, 200, 6, 70, "Notes",
 CellID->19298],
Cell[14718, 475, 69, 1, 70, "Notes",
 CellID->26940],
Cell[14790, 478, 3247, 90, 70, "3ColumnTableMod",
 CellID->30188],
Cell[18040, 570, 617, 22, 70, "Notes",
 CellID->18960],
Cell[18660, 594, 675, 22, 70, "Notes",
 CellID->637],
Cell[19338, 618, 597, 20, 70, "Notes",
 CellID->4185],
Cell[19938, 640, 801, 27, 70, "Notes",
 CellID->24902],
Cell[20742, 669, 31, 0, 70, "SectionFooterSpacer"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[20822, 675, 388, 15, 31, "PrimaryExamplesSection",
 CellTags->"PrimaryExamplesSection",
 CellID->101786175],
Cell[CellGroupData[{
Cell[21235, 694, 195, 6, 25, "ExampleSection",
 CellID->231362347],
Cell[21433, 702, 82, 1, 33, "ExampleText",
 CellID->6495732],
Cell[CellGroupData[{
Cell[21540, 707, 207, 7, 28, "Input",
 CellID->425550223],
Cell[21750, 716, 414, 11, 36, "Output",
 CellID->673387210]
}, Open  ]],
Cell[22179, 730, 301, 12, 35, "ExampleText",
 CellID->32517813],
Cell[CellGroupData[{
Cell[22505, 746, 322, 10, 28, "Input",
 CellID->9895969],
Cell[22830, 758, 357, 10, 36, "Output",
 CellID->179251908]
}, Open  ]],
Cell[23202, 771, 69, 1, 33, "ExampleText",
 CellID->169120],
Cell[CellGroupData[{
Cell[23296, 776, 322, 11, 28, "Input",
 CellID->613462901],
Cell[23621, 789, 479, 12, 54, "Output",
 CellID->104697178]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[24149, 807, 186, 6, 25, "ExampleSection",
 CellID->456238338],
Cell[CellGroupData[{
Cell[24360, 817, 212, 6, 70, "ExampleSubsection",
 CellID->11860700],
Cell[24575, 825, 84, 1, 70, "ExampleText",
 CellID->261070299],
Cell[24662, 828, 477, 16, 70, "Input",
 CellID->613023938],
Cell[25142, 846, 218, 8, 70, "Input",
 CellID->211120279],
Cell[CellGroupData[{
Cell[25385, 858, 230, 7, 70, "Input",
 CellID->932959552],
Cell[25618, 867, 301, 9, 36, "Output",
 CellID->1864177522]
}, Open  ]],
Cell[25934, 879, 71, 1, 70, "ExampleText",
 CellID->71387768],
Cell[CellGroupData[{
Cell[26030, 884, 250, 8, 70, "Input",
 CellID->16189946],
Cell[26283, 894, 387, 12, 39, "Output",
 CellID->47743729]
}, Open  ]],
Cell[26685, 909, 72, 1, 70, "ExampleText",
 CellID->629282411],
Cell[CellGroupData[{
Cell[26782, 914, 325, 10, 70, "Input",
 CellID->83329518],
Cell[27110, 926, 2834, 63, 177, "Output",
 CellID->1835089251]
}, Open  ]],
Cell[29959, 992, 79, 1, 70, "ExampleText",
 CellID->368492844],
Cell[30041, 995, 201, 7, 70, "Input",
 CellID->301688966],
Cell[30245, 1004, 128, 3, 70, "ExampleText",
 CellID->112903641],
Cell[CellGroupData[{
Cell[30398, 1011, 186, 6, 70, "Input",
 CellID->829000504],
Cell[30587, 1019, 366, 10, 36, "Output",
 CellID->579721314]
}, Open  ]],
Cell[CellGroupData[{
Cell[30990, 1034, 502, 16, 70, "Input",
 CellID->619343705],
Cell[31495, 1052, 1564, 37, 158, "Output",
 CellID->809516547]
}, Open  ]],
Cell[CellGroupData[{
Cell[33096, 1094, 124, 3, 70, "ExampleDelimiter",
 CellID->74394520],
Cell[33223, 1099, 132, 4, 70, "ExampleText",
 CellID->485657525],
Cell[33358, 1105, 849, 28, 70, "Input",
 CellID->109105924],
Cell[34210, 1135, 140, 4, 70, "ExampleText",
 CellID->160429556],
Cell[34353, 1141, 167, 6, 70, "Input",
 CellID->648832529],
Cell[CellGroupData[{
Cell[34545, 1151, 238, 7, 70, "Input",
 CellID->164817600],
Cell[34786, 1160, 303, 9, 36, "Output",
 CellID->1811246098]
}, Open  ]],
Cell[35104, 1172, 126, 3, 70, "ExampleText",
 CellID->189393166],
Cell[CellGroupData[{
Cell[35255, 1179, 386, 13, 70, "Input",
 CellID->70031323],
Cell[35644, 1194, 300, 9, 36, "Output",
 CellID->368179779]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[35993, 1209, 125, 3, 70, "ExampleDelimiter",
 CellID->270889856],
Cell[36121, 1214, 102, 2, 70, "ExampleText",
 CellID->703708898],
Cell[36226, 1218, 476, 16, 70, "Input",
 CellID->93684799],
Cell[36705, 1236, 111, 3, 70, "ExampleText",
 CellID->1703653],
Cell[36819, 1241, 739, 24, 70, "Input",
 CellID->507606713],
Cell[CellGroupData[{
Cell[37583, 1269, 365, 12, 70, "Input",
 CellID->63559203],
Cell[37951, 1283, 413, 12, 36, "Output",
 CellID->195080153]
}, Open  ]],
Cell[38379, 1298, 68, 1, 70, "ExampleText",
 CellID->174378436],
Cell[38450, 1301, 844, 28, 70, "Input",
 CellID->245175184],
Cell[CellGroupData[{
Cell[39319, 1333, 366, 12, 70, "Input",
 CellID->339205902],
Cell[39688, 1347, 414, 12, 36, "Output",
 CellID->2048780362]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[40163, 1366, 217, 6, 70, "ExampleSubsection",
 CellID->30298558],
Cell[40383, 1374, 66, 1, 70, "ExampleText",
 CellID->197867878],
Cell[40452, 1377, 203, 7, 70, "Input",
 CellID->15080643],
Cell[40658, 1386, 465, 15, 70, "Input",
 CellID->218875459],
Cell[41126, 1403, 122, 3, 70, "ExampleText",
 CellID->161917982],
Cell[CellGroupData[{
Cell[41273, 1410, 417, 13, 70, "Input",
 CellID->74490737],
Cell[41693, 1425, 306, 9, 36, "Output",
 CellID->319752346]
}, Open  ]],
Cell[42014, 1437, 79, 1, 70, "ExampleText",
 CellID->47073673],
Cell[CellGroupData[{
Cell[42118, 1442, 383, 12, 70, "Input",
 CellID->139019433],
Cell[42504, 1456, 7078, 124, 70, "Output",
 CellTags->"RasterizedOutput",
 CellID->206398272]
}, Open  ]],
Cell[49597, 1583, 137, 4, 70, "ExampleText",
 CellID->50181010],
Cell[49737, 1589, 487, 16, 70, "Input",
 CellID->696071961],
Cell[CellGroupData[{
Cell[50249, 1609, 175, 5, 70, "Input",
 CellID->158684639],
Cell[50427, 1616, 1919, 46, 157, "Output",
 CellID->1545491091]
}, Open  ]],
Cell[CellGroupData[{
Cell[52383, 1667, 125, 3, 70, "ExampleDelimiter",
 CellID->568401064],
Cell[52511, 1672, 112, 3, 70, "ExampleText",
 CellID->339171382],
Cell[52626, 1677, 460, 17, 70, "Input",
 CellID->68570158],
Cell[53089, 1696, 801, 23, 70, "Input",
 CellID->504300830],
Cell[53893, 1721, 84, 1, 70, "ExampleText",
 CellID->152303581],
Cell[CellGroupData[{
Cell[54002, 1726, 293, 9, 70, "Input",
 CellID->628502664],
Cell[54298, 1737, 544, 13, 36, "Output",
 CellID->135259642]
}, Open  ]],
Cell[54857, 1753, 174, 6, 70, "ExampleText",
 CellID->72785105],
Cell[CellGroupData[{
Cell[55056, 1763, 343, 10, 70, "Input",
 CellID->109648129],
Cell[55402, 1775, 564, 14, 36, "Output",
 CellID->90657600]
}, Open  ]],
Cell[55981, 1792, 79, 1, 70, "ExampleText",
 CellID->171800968],
Cell[CellGroupData[{
Cell[56085, 1797, 611, 19, 70, "Input",
 CellID->61710716],
Cell[56699, 1818, 8457, 147, 70, "Output",
 CellTags->"RasterizedOutput",
 CellID->439160670]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[65217, 1972, 204, 6, 70, "ExampleSubsection",
 CellID->127486635],
Cell[65424, 1980, 81, 1, 70, "ExampleText",
 CellID->3453890],
Cell[65508, 1983, 457, 17, 70, "Input",
 CellID->53072381],
Cell[65968, 2002, 1129, 37, 70, "Input",
 CellID->292962567],
Cell[67100, 2041, 115, 3, 70, "ExampleText",
 CellID->103597510],
Cell[CellGroupData[{
Cell[67240, 2048, 414, 13, 70, "Input",
 CellID->84847018],
Cell[67657, 2063, 416, 11, 36, "Output",
 CellID->434186907]
}, Open  ]],
Cell[68088, 2077, 81, 1, 70, "ExampleText",
 CellID->670475389],
Cell[CellGroupData[{
Cell[68194, 2082, 636, 19, 70, "Input",
 CellID->391796545],
Cell[68833, 2103, 18870, 317, 70, "Output",
 CellTags->"RasterizedOutput",
 CellID->97305525]
}, Open  ]],
Cell[CellGroupData[{
Cell[87740, 2425, 125, 3, 70, "ExampleDelimiter",
 CellID->435170072],
Cell[87868, 2430, 82, 1, 70, "ExampleText",
 CellID->129853208],
Cell[87953, 2433, 528, 17, 70, "Input",
 CellID->329142581],
Cell[88484, 2452, 1240, 43, 70, "Input",
 CellID->262167145],
Cell[CellGroupData[{
Cell[89749, 2499, 424, 12, 70, "Input",
 CellID->531529081],
Cell[90176, 2513, 478, 12, 36, "Output",
 CellID->1820243664]
}, Open  ]],
Cell[90669, 2528, 122, 3, 70, "ExampleText",
 CellID->166969836],
Cell[90794, 2533, 613, 18, 70, "Input",
 CellID->926626446],
Cell[CellGroupData[{
Cell[91432, 2555, 137, 4, 70, "Input",
 CellID->134455144],
Cell[91572, 2561, 177, 5, 36, "Output",
 CellID->346693267]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[91822, 2574, 188, 6, 19, "ExampleSection",
 CellID->223291971],
Cell[CellGroupData[{
Cell[92035, 2584, 203, 6, 70, "ExampleSubsection",
 CellID->78762153],
Cell[92241, 2592, 122, 3, 70, "ExampleText",
 CellID->245920735],
Cell[92366, 2597, 1038, 32, 70, "Input",
 CellID->39132109],
Cell[CellGroupData[{
Cell[93429, 2633, 569, 18, 70, "Input",
 CellID->65187881],
Cell[94001, 2653, 282, 10, 36, "Output",
 CellID->46634113]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[94332, 2669, 195, 6, 70, "ExampleSubsection",
 CellID->442346239],
Cell[94530, 2677, 125, 3, 70, "ExampleText",
 CellID->261036267],
Cell[94658, 2682, 554, 19, 70, "Input",
 CellID->90513975],
Cell[95215, 2703, 451, 15, 70, "ExampleText",
 CellID->179578763],
Cell[CellGroupData[{
Cell[95691, 2722, 365, 12, 70, "Input",
 CellID->251205743],
Cell[96059, 2736, 456, 10, 70, "Message",
 CellID->688081705],
Cell[96518, 2748, 461, 10, 70, "Message",
 CellID->1714407379],
Cell[96982, 2760, 487, 10, 70, "Message",
 CellID->1774653336],
Cell[97472, 2772, 524, 10, 70, "Message",
 CellID->576340850],
Cell[97999, 2784, 319, 10, 36, "Output",
 CellID->1928679533]
}, Open  ]],
Cell[98333, 2797, 366, 13, 70, "ExampleText",
 CellID->170632306],
Cell[CellGroupData[{
Cell[98724, 2814, 371, 13, 70, "Input",
 CellID->31397592],
Cell[99098, 2829, 1717, 56, 90, "Output",
 CellID->224686044]
}, Open  ]],
Cell[100830, 2888, 113, 3, 70, "ExampleText",
 CellID->341588118],
Cell[CellGroupData[{
Cell[100968, 2895, 469, 14, 70, "Input",
 CellID->61959277],
Cell[101440, 2911, 366, 10, 36, "Output",
 CellID->1297523210]
}, Open  ]],
Cell[101821, 2924, 68, 1, 70, "ExampleText",
 CellID->4019287],
Cell[CellGroupData[{
Cell[101914, 2929, 471, 15, 70, "Input",
 CellID->25215762],
Cell[102388, 2946, 4813, 87, 70, "Output",
 CellTags->"RasterizedOutput",
 CellID->259178278]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[107250, 3039, 200, 6, 70, "ExampleSubsection",
 CellID->365923182],
Cell[107453, 3047, 301, 9, 70, "ExampleText",
 CellID->111416151],
Cell[107757, 3058, 1931, 62, 70, "Input",
 CellID->579614116],
Cell[109691, 3122, 88, 1, 70, "ExampleText",
 CellID->118008607],
Cell[CellGroupData[{
Cell[109804, 3127, 471, 15, 70, "Input",
 CellID->162448948],
Cell[110278, 3144, 504, 10, 70, "Message",
 CellID->2097989441],
Cell[110785, 3156, 415, 11, 36, "Output",
 CellID->1184400708]
}, Open  ]],
Cell[111215, 3170, 97, 1, 70, "ExampleText",
 CellID->11419712],
Cell[CellGroupData[{
Cell[111337, 3175, 526, 16, 70, "Input",
 CellID->239578397],
Cell[111866, 3193, 413, 11, 36, "Output",
 CellID->63886155]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[112328, 3210, 193, 6, 70, "ExampleSubsection",
 CellID->308617728],
Cell[112524, 3218, 412, 14, 70, "ExampleText",
 CellID->58344041],
Cell[112939, 3234, 461, 17, 70, "Input",
 CellID->112853019],
Cell[113403, 3253, 801, 23, 70, "Input",
 CellID->198224689],
Cell[114207, 3278, 64, 1, 70, "ExampleText",
 CellID->320088632],
Cell[CellGroupData[{
Cell[114296, 3283, 293, 9, 70, "Input",
 CellID->724733624],
Cell[114592, 3294, 544, 13, 36, "Output",
 CellID->256805150]
}, Open  ]],
Cell[115151, 3310, 70, 1, 70, "ExampleText",
 CellID->12121573],
Cell[CellGroupData[{
Cell[115246, 3315, 347, 10, 70, "Input",
 CellID->152087054],
Cell[115596, 3327, 565, 14, 36, "Output",
 CellID->844064540]
}, Open  ]],
Cell[116176, 3344, 125, 3, 70, "ExampleText",
 CellID->103264514],
Cell[CellGroupData[{
Cell[116326, 3351, 641, 20, 70, "Input",
 CellID->68814404],
Cell[116970, 3373, 8501, 147, 70, "Output",
 CellTags->"RasterizedOutput",
 CellID->379834793]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[125520, 3526, 195, 6, 70, "ExampleSubsection",
 CellID->31388],
Cell[CellGroupData[{
Cell[125740, 3536, 236, 8, 70, "Input",
 CellID->24887865],
Cell[125979, 3546, 414, 11, 36, "Output",
 CellID->583730768]
}, Open  ]],
Cell[126408, 3560, 93, 1, 70, "ExampleText",
 CellID->117745648],
Cell[CellGroupData[{
Cell[126526, 3565, 320, 10, 70, "Input",
 CellID->3720920],
Cell[126849, 3577, 358, 10, 36, "Output",
 CellID->306161343]
}, Open  ]],
Cell[127222, 3590, 159, 6, 70, "ExampleText",
 CellID->487219474],
Cell[CellGroupData[{
Cell[127406, 3600, 487, 16, 70, "Input",
 CellID->443269537],
Cell[127896, 3618, 355, 10, 36, "Output",
 CellID->878749325]
}, Open  ]],
Cell[CellGroupData[{
Cell[128288, 3633, 476, 15, 70, "Input",
 CellID->14151221],
Cell[128767, 3650, 358, 10, 36, "Output",
 CellID->222379493]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[129174, 3666, 198, 6, 70, "ExampleSubsection",
 CellID->244192407],
Cell[129375, 3674, 150, 4, 70, "ExampleText",
 CellID->398990986],
Cell[129528, 3680, 244, 9, 70, "Input",
 CellID->73123166],
Cell[129775, 3691, 112, 3, 70, "ExampleText",
 CellID->545405375],
Cell[129890, 3696, 965, 30, 70, "Input",
 CellID->947481304],
Cell[130858, 3728, 642, 20, 70, "Input",
 CellID->139363387],
Cell[131503, 3750, 92, 1, 70, "ExampleText",
 CellID->145906611],
Cell[CellGroupData[{
Cell[131620, 3755, 425, 14, 70, "Input",
 CellID->461283651],
Cell[132048, 3771, 1588, 42, 158, "Output",
 CellID->1167283052]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[133685, 3819, 203, 6, 70, "ExampleSubsection",
 CellID->276747749],
Cell[133891, 3827, 283, 9, 70, "ExampleText",
 CellID->429534],
Cell[134177, 3838, 1024, 33, 70, "Input",
 CellID->11960218],
Cell[CellGroupData[{
Cell[135226, 3875, 339, 10, 70, "Input",
 CellID->195890952],
Cell[135568, 3887, 290, 10, 36, "Output",
 CellID->33927605]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[135919, 3904, 193, 6, 19, "ExampleSection",
 CellID->107405395],
Cell[CellGroupData[{
Cell[136137, 3914, 204, 6, 70, "ExampleSubsection",
 CellID->308456881],
Cell[136344, 3922, 74, 1, 70, "ExampleText",
 CellID->31387452],
Cell[CellGroupData[{
Cell[136443, 3927, 210, 7, 70, "Input",
 CellID->61543534],
Cell[136656, 3936, 358, 10, 36, "Output",
 CellID->866946877]
}, Open  ]],
Cell[137029, 3949, 86, 1, 70, "ExampleText",
 CellID->628619116],
Cell[CellGroupData[{
Cell[137140, 3954, 353, 12, 70, "Input",
 CellID->652836235],
Cell[137496, 3968, 358, 10, 36, "Output",
 CellID->427832899]
}, Open  ]],
Cell[CellGroupData[{
Cell[137891, 3983, 124, 3, 70, "ExampleDelimiter",
 CellID->92107301],
Cell[138018, 3988, 81, 1, 70, "ExampleText",
 CellID->554009824],
Cell[138102, 3991, 435, 15, 70, "Input",
 CellID->196749448],
Cell[CellGroupData[{
Cell[138562, 4010, 108, 3, 70, "Input",
 CellID->434322074],
Cell[138673, 4015, 2556, 56, 123, "Output",
 CellID->408068852]
}, Open  ]],
Cell[141244, 4074, 56, 1, 70, "ExampleText",
 CellID->256354851],
Cell[CellGroupData[{
Cell[141325, 4079, 323, 10, 70, "Input",
 CellID->831553048],
Cell[141651, 4091, 360, 10, 36, "Output",
 CellID->1786114464]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[142072, 4108, 203, 6, 70, "ExampleSubsection",
 CellID->56107519],
Cell[142278, 4116, 97, 1, 70, "ExampleText",
 CellID->233528021],
Cell[CellGroupData[{
Cell[142400, 4121, 741, 24, 70, "Input",
 CellID->50305132],
Cell[143144, 4147, 864, 32, 54, "Output",
 CellID->1900254420]
}, Open  ]],
Cell[144023, 4182, 103, 2, 70, "ExampleText",
 CellID->547014642],
Cell[144129, 4186, 180, 6, 70, "Input",
 CellID->167968953],
Cell[CellGroupData[{
Cell[144334, 4196, 179, 5, 70, "Input",
 CellID->120560214],
Cell[144516, 4203, 270, 9, 39, "Output",
 CellID->1421914290]
}, Open  ]],
Cell[144801, 4215, 93, 1, 70, "ExampleText",
 CellID->70723954],
Cell[CellGroupData[{
Cell[144919, 4220, 454, 14, 70, "Input",
 CellID->524019058],
Cell[145376, 4236, 4923, 89, 70, "Output",
 CellTags->"RasterizedOutput",
 CellID->189243357]
}, Open  ]],
Cell[CellGroupData[{
Cell[150336, 4330, 125, 3, 70, "ExampleDelimiter",
 CellID->430150368],
Cell[150464, 4335, 102, 2, 70, "ExampleText",
 CellID->497012135],
Cell[150569, 4339, 286, 8, 70, "Input",
 CellID->90706713],
Cell[150858, 4349, 321, 11, 70, "ExampleText",
 CellID->235035511],
Cell[151182, 4362, 1146, 40, 70, "Input",
 CellID->13701714],
Cell[152331, 4404, 104, 2, 70, "ExampleText",
 CellID->36776710],
Cell[152438, 4408, 264, 10, 70, "Input",
 CellID->183188250],
Cell[152705, 4420, 208, 7, 70, "ExampleText",
 CellID->840290591],
Cell[CellGroupData[{
Cell[152938, 4431, 701, 20, 70, "Input",
 CellID->124043390],
Cell[153642, 4453, 1029, 27, 54, "Output",
 CellID->154483175]
}, Open  ]],
Cell[154686, 4483, 101, 2, 70, "ExampleText",
 CellID->27339907],
Cell[CellGroupData[{
Cell[154812, 4489, 703, 22, 70, "Input",
 CellID->934645470],
Cell[155518, 4513, 12511, 213, 70, "Output",
 CellTags->"RasterizedOutput",
 CellID->621895525]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[168078, 4732, 125, 3, 70, "ExampleDelimiter",
 CellID->616353932],
Cell[168206, 4737, 211, 6, 70, "ExampleText",
 CellID->370945209],
Cell[168420, 4745, 288, 9, 70, "Input",
 CellID->448973570],
Cell[168711, 4756, 551, 21, 70, "ExampleText",
 CellID->558097503],
Cell[169265, 4779, 701, 24, 70, "Input",
 CellID->560143462],
Cell[169969, 4805, 244, 7, 70, "ExampleText",
 CellID->202452456],
Cell[CellGroupData[{
Cell[170238, 4816, 707, 23, 70, "Input",
 CellID->280600424],
Cell[170948, 4841, 546, 16, 36, "Output",
 CellID->1307596980]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[171555, 4864, 208, 6, 70, "ExampleSubsection",
 CellID->89447407],
Cell[171766, 4872, 124, 3, 70, "ExampleText",
 CellID->759987326],
Cell[CellGroupData[{
Cell[171915, 4879, 1505, 48, 70, "Input",
 CellID->185936742],
Cell[173423, 4929, 2512, 55, 158, "Output",
 CellID->1297094092]
}, Open  ]],
Cell[175950, 4987, 347, 12, 70, "ExampleText",
 CellID->246277593],
Cell[176300, 5001, 1353, 41, 70, "Input",
 CellID->19020788],
Cell[177656, 5044, 138, 4, 70, "ExampleText",
 CellID->619280420],
Cell[CellGroupData[{
Cell[177819, 5052, 624, 18, 70, "Input",
 CellID->145117175],
Cell[178446, 5072, 367, 10, 36, "Output",
 CellID->1591952011]
}, Open  ]],
Cell[178828, 5085, 97, 1, 70, "ExampleText",
 CellID->240791162],
Cell[CellGroupData[{
Cell[178950, 5090, 935, 31, 70, "Input",
 CellID->639620771],
Cell[179888, 5123, 3701, 69, 70, "Output",
 CellTags->"RasterizedOutput",
 CellID->8679149]
}, Open  ]],
Cell[CellGroupData[{
Cell[183626, 5197, 123, 3, 70, "ExampleDelimiter",
 CellID->5874383],
Cell[183752, 5202, 144, 4, 70, "ExampleText",
 CellID->283959408],
Cell[CellGroupData[{
Cell[183921, 5210, 2133, 63, 70, "Input",
 CellID->499266246],
Cell[186057, 5275, 9485, 198, 70, "Output",
 CellID->683098962]
}, Open  ]],
Cell[195557, 5476, 91, 1, 70, "ExampleText",
 CellID->628084645],
Cell[CellGroupData[{
Cell[195673, 5481, 509, 15, 70, "Input",
 CellID->157219196],
Cell[196185, 5498, 50872, 842, 70, "Output",
 CellTags->"RasterizedOutput",
 CellID->797846807]
}, Open  ]],
Cell[247072, 6343, 260, 9, 70, "ExampleText",
 CellID->365473181],
Cell[247335, 6354, 193, 7, 70, "Input",
 CellID->161037294],
Cell[247531, 6363, 86, 1, 70, "ExampleText",
 CellID->200967086],
Cell[247620, 6366, 268, 9, 70, "Input",
 CellID->210495540],
Cell[CellGroupData[{
Cell[247913, 6379, 169, 5, 70, "Input",
 CellID->74395396],
Cell[248085, 6386, 3728, 75, 176, "Output",
 CellID->1940464626]
}, Open  ]],
Cell[251828, 6464, 91, 1, 70, "ExampleText",
 CellID->381346136],
Cell[251922, 6467, 796, 29, 70, "Input",
 CellID->432777935],
Cell[252721, 6498, 140, 4, 70, "ExampleText",
 CellID->106690545],
Cell[CellGroupData[{
Cell[252886, 6506, 399, 13, 70, "Input",
 CellID->4291732],
Cell[253288, 6521, 301, 9, 36, "Output",
 CellID->824764018]
}, Open  ]],
Cell[253604, 6533, 118, 3, 70, "ExampleText",
 CellID->202748041],
Cell[CellGroupData[{
Cell[253747, 6540, 1635, 47, 70, "Input",
 CellID->89257198],
Cell[255385, 6589, 11783, 201, 70, "Output",
 CellTags->"RasterizedOutput",
 CellID->937396535]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[267241, 6798, 203, 6, 19, "ExampleSection",
 CellID->174534589],
Cell[267447, 6806, 239, 8, 70, "ExampleText",
 CellID->118868499],
Cell[267689, 6816, 455, 16, 70, "Input",
 CellID->353140223],
Cell[CellGroupData[{
Cell[268169, 6836, 285, 9, 70, "Input",
 CellID->871064071],
Cell[268457, 6847, 318, 10, 36, "Output",
 CellID->30860645]
}, Open  ]],
Cell[268790, 6860, 295, 8, 70, "ExampleText",
 CellID->125357659],
Cell[CellGroupData[{
Cell[269110, 6872, 321, 10, 70, "Input",
 CellID->662712115],
Cell[269434, 6884, 442, 15, 57, "Output",
 CellID->71896730]
}, Open  ]],
Cell[269891, 6902, 74, 1, 70, "ExampleText",
 CellID->31895825],
Cell[CellGroupData[{
Cell[269990, 6907, 122, 3, 70, "Input",
 CellID->13998670],
Cell[270115, 6912, 317, 10, 36, "Output",
 CellID->6365023]
}, Open  ]],
Cell[270447, 6925, 86, 1, 70, "ExampleText",
 CellID->363585979],
Cell[CellGroupData[{
Cell[270558, 6930, 218, 7, 70, "Input",
 CellID->66353542],
Cell[270779, 6939, 1616, 40, 99, "Output",
 CellID->824101335]
}, Open  ]],
Cell[CellGroupData[{
Cell[272432, 6984, 125, 3, 70, "ExampleDelimiter",
 CellID->204739007],
Cell[272560, 6989, 574, 21, 70, "ExampleText",
 CellID->441279876],
Cell[273137, 7012, 521, 18, 70, "Input",
 CellID->50948481],
Cell[273661, 7032, 405, 16, 70, "ExampleText",
 CellID->359675166],
Cell[CellGroupData[{
Cell[274091, 7052, 280, 9, 70, "Input",
 CellID->16038186],
Cell[274374, 7063, 335, 9, 36, "Output",
 CellID->73508823]
}, Open  ]],
Cell[274724, 7075, 294, 9, 70, "ExampleText",
 CellID->517816379],
Cell[CellGroupData[{
Cell[275043, 7088, 546, 17, 70, "Input",
 CellID->94537532],
Cell[275592, 7107, 470, 15, 36, "Output",
 CellID->392373817]
}, Open  ]],
Cell[276077, 7125, 283, 9, 70, "ExampleText",
 CellID->525347866],
Cell[CellGroupData[{
Cell[276385, 7138, 367, 12, 70, "Input",
 CellID->600072301],
Cell[276755, 7152, 600, 19, 36, "Output",
 CellID->251824306]
}, Open  ]],
Cell[CellGroupData[{
Cell[277392, 7176, 248, 8, 70, "Input",
 CellID->156648758],
Cell[277643, 7186, 288, 9, 36, "Output",
 CellID->166302794]
}, Open  ]],
Cell[277946, 7198, 288, 8, 70, "ExampleText",
 CellID->25607046],
Cell[CellGroupData[{
Cell[278259, 7210, 175, 5, 70, "Input",
 CellID->598516267],
Cell[278437, 7217, 440, 14, 57, "Output",
 CellID->50435781]
}, Open  ]],
Cell[CellGroupData[{
Cell[278914, 7236, 122, 3, 70, "Input",
 CellID->587319099],
Cell[279039, 7241, 289, 9, 36, "Output",
 CellID->278080519]
}, Open  ]],
Cell[CellGroupData[{
Cell[279365, 7255, 180, 6, 70, "Input",
 CellID->1147988],
Cell[279548, 7263, 507, 14, 36, "Output",
 CellID->129061026]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[280104, 7283, 124, 3, 70, "ExampleDelimiter",
 CellID->55697299],
Cell[280231, 7288, 434, 14, 70, "ExampleText",
 CellID->129377990],
Cell[280668, 7304, 672, 23, 70, "Input",
 CellID->238300117],
Cell[281343, 7329, 196, 7, 70, "Input",
 CellID->293034305],
Cell[281542, 7338, 119, 3, 70, "ExampleText",
 CellID->80546646],
Cell[CellGroupData[{
Cell[281686, 7345, 328, 11, 70, "Input",
 CellID->405386996],
Cell[282017, 7358, 822, 27, 39, "Output",
 CellID->360238027]
}, Open  ]],
Cell[CellGroupData[{
Cell[282876, 7390, 215, 7, 70, "Input",
 CellID->2657863],
Cell[283094, 7399, 371, 12, 36, "Output",
 CellID->5152634]
}, Open  ]],
Cell[CellGroupData[{
Cell[283502, 7416, 201, 6, 70, "Input",
 CellID->86975213],
Cell[283706, 7424, 300, 9, 36, "Output",
 CellID->511241654]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[284055, 7439, 125, 3, 70, "ExampleDelimiter",
 CellID->116451258],
Cell[284183, 7444, 282, 8, 70, "ExampleText",
 CellID->925975778],
Cell[284468, 7454, 526, 18, 70, "Input",
 CellID->749543187],
Cell[CellGroupData[{
Cell[285019, 7476, 397, 13, 70, "Input",
 CellID->414331871],
Cell[285419, 7491, 319, 10, 36, "Output",
 CellID->492119341]
}, Open  ]],
Cell[285753, 7504, 260, 8, 70, "ExampleText",
 CellID->5399625],
Cell[CellGroupData[{
Cell[286038, 7516, 170, 5, 70, "Input",
 CellID->492334796],
Cell[286211, 7523, 512, 17, 73, "Output",
 CellID->31390801]
}, Open  ]],
Cell[286738, 7543, 69, 1, 70, "ExampleText",
 CellID->57680471],
Cell[CellGroupData[{
Cell[286832, 7548, 350, 13, 70, "Input",
 CellID->46524300],
Cell[287185, 7563, 606, 19, 53, "Output",
 CellID->265831733]
}, Open  ]],
Cell[287806, 7585, 249, 9, 70, "ExampleText",
 CellID->284254438],
Cell[CellGroupData[{
Cell[288080, 7598, 169, 5, 70, "Input",
 CellID->8380680],
Cell[288252, 7605, 562, 19, 79, "Output",
 CellID->9506026]
}, Open  ]],
Cell[CellGroupData[{
Cell[288851, 7629, 680, 22, 70, "Input",
 CellID->208605809],
Cell[289534, 7653, 321, 10, 36, "Output",
 CellID->605383314]
}, Open  ]],
Cell[CellGroupData[{
Cell[289892, 7668, 474, 17, 70, "Input",
 CellID->243946289],
Cell[290369, 7687, 789, 25, 59, "Output",
 CellID->50156243]
}, Open  ]],
Cell[291173, 7715, 306, 9, 70, "ExampleText",
 CellID->725562415],
Cell[291482, 7726, 77, 1, 70, "ExampleText",
 CellID->123552193],
Cell[CellGroupData[{
Cell[291584, 7731, 256, 7, 70, "Input",
 CellID->308426291],
Cell[291843, 7740, 425, 14, 74, "Output",
 CellID->268945152]
}, Open  ]],
Cell[292283, 7757, 103, 2, 70, "ExampleText",
 CellID->78046407],
Cell[CellGroupData[{
Cell[292411, 7763, 536, 18, 70, "Input",
 CellID->177303305],
Cell[292950, 7783, 464, 13, 54, "Output",
 CellID->764565401]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[293475, 7803, 196, 6, 19, "ExampleSection",
 CellID->309013018],
Cell[CellGroupData[{
Cell[293696, 7813, 202, 6, 70, "ExampleSubsection",
 CellID->739487787],
Cell[293901, 7821, 111, 3, 70, "ExampleText",
 CellID->3297576],
Cell[294015, 7826, 625, 23, 70, "Input",
 CellID->25917882],
Cell[294643, 7851, 1085, 33, 70, "Input",
 CellID->95944592],
Cell[295731, 7886, 143, 4, 70, "ExampleText",
 CellID->289703782],
Cell[295877, 7892, 353, 10, 70, "Input",
 CellID->220126268],
Cell[CellGroupData[{
Cell[296255, 7906, 593, 17, 70, "Input",
 CellID->101239967],
Cell[296851, 7925, 4202, 84, 164, "Output",
 CellID->140107079]
}, Open  ]],
Cell[301068, 8012, 116, 3, 70, "ExampleText",
 CellID->142231484],
Cell[301187, 8017, 718, 22, 70, "Input",
 CellID->169431678],
Cell[CellGroupData[{
Cell[301930, 8043, 522, 15, 70, "Input",
 CellID->442472748],
Cell[302455, 8060, 6598, 116, 70, "Output",
 CellTags->"RasterizedOutput",
 CellID->460488447]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[309092, 8181, 31, 0, 29, "SectionFooterSpacer"]
}, Open  ]],
Cell[CellGroupData[{
Cell[309160, 8186, 265, 12, 31, "SeeAlsoSection",
 CellID->20192],
Cell[309428, 8200, 2690, 79, 75, "SeeAlso",
 CellID->32076]
}, Open  ]],
Cell[CellGroupData[{
Cell[312155, 8284, 268, 12, 31, "TutorialsSection",
 CellID->26380],
Cell[312426, 8298, 31, 0, 14, "SectionHeaderSpacer"],
Cell[312460, 8300, 198, 6, 19, "Tutorials",
 CellID->17773],
Cell[312661, 8308, 166, 5, 19, "Tutorials",
 CellID->3867],
Cell[312830, 8315, 205, 6, 19, "Tutorials",
 CellID->168181981],
Cell[313038, 8323, 209, 6, 19, "Tutorials",
 CellID->123070281],
Cell[313250, 8331, 31, 0, 29, "SectionFooterSpacer"]
}, Open  ]],
Cell[CellGroupData[{
Cell[313318, 8336, 273, 12, 31, "MoreAboutSection",
 CellID->13071],
Cell[313594, 8350, 31, 0, 14, "SectionHeaderSpacer"],
Cell[313628, 8352, 219, 6, 19, "MoreAbout",
 CellID->226375124],
Cell[313850, 8360, 202, 6, 19, "MoreAbout",
 CellID->552511639],
Cell[314055, 8368, 174, 5, 19, "MoreAbout",
 CellID->425302925],
Cell[314232, 8375, 194, 6, 19, "MoreAbout",
 CellID->60913542],
Cell[314429, 8383, 170, 5, 19, "MoreAbout",
 CellID->236451220],
Cell[314602, 8390, 166, 5, 19, "MoreAbout",
 CellID->99315854],
Cell[314771, 8397, 193, 6, 19, "MoreAbout",
 CellID->692232019],
Cell[314967, 8405, 164, 5, 19, "MoreAbout",
 CellID->250879954],
Cell[315134, 8412, 31, 0, 29, "SectionFooterSpacer"]
}, Open  ]],
Cell[CellGroupData[{
Cell[315202, 8417, 275, 12, 31, "RelatedLinksSection",
 CellID->28044],
Cell[315480, 8431, 31, 0, 14, "SectionHeaderSpacer"],
Cell[315514, 8433, 426, 15, 18, "RelatedLinks"],
Cell[315943, 8450, 243, 6, 19, "RelatedLinks",
 CellID->8698]
}, Open  ]],
Cell[316201, 8459, 150, 6, 43, "History"],
Cell[316354, 8467, 23, 0, 25, "FooterCell"]
}
]
*)

(* End of internal cache information *)

